<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>[API] OpenAPI &amp; Swagger 簡介</title>
    <url>/API-OpenAPI-Swagger-%E7%B0%A1%E4%BB%8B/</url>
    <content><![CDATA[<h3 id="OpenAPI">OpenAPI</h3>
<p>OpenAPI 是一套 API 規範（OpenAPI Specification ，OAS），用於定義 RESTful API。API 規範使用 YAML 或 JSON 編寫，對於人類和機器來說皆易於閱讀。</p>
<span id="more"></span>
<p>OpenAPI 簡單來說就是 <code>API</code>，一般是指一開始是封閉的系統，比如最開始的 Twitter、Google 或者 Facebook。突然有一天，他們開放了！公佈了實現某些功能的 API，來獲得他們內部的數據、執行特定操作。這個時候，這樣的 API， 我們就可稱為 “Open” API。</p>
<h3 id="Swagger">Swagger</h3>
<p>Swagger 是一套以 OpenAPI 規範構建的開源工具，可以幫助你設計、構建、記錄和使用 REST API。主要的 Swagger 工具包括：</p>
<p>- <strong>Swagger Editor</strong>：基於瀏覽器的編輯器，你可以在其中編寫 OpenAPI 規範。<br>
- <strong>Swagger UI</strong>：將 OpenAPI 規範呈現為交互式的 API 文檔，使得用戶可以直接在瀏覽器中調用 API。<br>
- <strong>Swagger Codegen</strong>：一個開源的代碼產生器，根據定義好的 RESTful API 文件產生 server stubs 及client SDKs。</p>
<h3 id="為什麼要使用-Open-API">為什麼要使用 Open API</h3>
<h5 id="標準化">標準化</h5>
<p>遵循 OAS 規範的 RESTful API 定義，可使 API 互通介面不受程式語言限定。且統一採用 API 進行跨系統呼叫，使得內部系統的介接標準一致，即便未來得換掉某一套系統，API 串接仍保持一致，其他系統不用特別修改寫法就能繼續呼叫。</p>
<h5 id="節省開發時間及成本">節省開發時間及成本</h5>
<p>使用規範好的框架來設計 API。再開發者不需要從頭了解 API 就能開始串接，可以加快開發時間。</p>
<h6 id="Reference">Reference</h6>
<ul>
<li><a href="https://kknews.cc/code/nrgp5aq.html">https://kknews.cc/code/nrgp5aq.html</a></li>
<li><a href="https://www.ithome.com.tw/news/133682">https://www.ithome.com.tw/news/133682</a></li>
<li><a href="https://www.zhihu.com/question/20225153">https://www.zhihu.com/question/20225153</a></li>
</ul>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>API</category>
      </categories>
      <tags>
        <tag>OpenAPI</tag>
        <tag>Swagger</tag>
      </tags>
  </entry>
  <entry>
    <title>[API] curl 使用指南</title>
    <url>/API-curl-%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h2 id="curl">curl</h2>
<p>curl 可以用來請求 Web 服務器、支持文件的上傳和下載。它的名字就是 client + URL 的意思。</p>
<span id="more"></span>
<h3 id="基本指令格式">基本指令格式</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ curl [options] [URL]</span><br></pre></td></tr></table></figure>
<h3 id="HTTP-request">HTTP request</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-X/--request [GET|POST|PUT|DELETE|…]		使用指定的 http method 發出 http request</span><br><span class="line">-H/--header		設定request 裡的 header</span><br><span class="line">-i/--include		顯示response 的 header</span><br><span class="line">-d/--data		設定 http parameters </span><br><span class="line">-v/--verbose		輸出比較多的訊息</span><br><span class="line">-u/--user		使用者帳號、密碼</span><br><span class="line">-b/--cookie		cookie  </span><br></pre></td></tr></table></figure>
<h4 id="GET">GET</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ curl https://github.com/ulahsieh</span><br></pre></td></tr></table></figure>
<p>不帶有任何參數時，curl 就是發出 GET 請求，可以方便你測試 http server 是否運作正常。</p>
<h4 id="POST">POST</h4>
<p>Http 參數可以直接加在 url 的 query string，也可以用 <code>-d</code> 帶入參數間用 <code>&amp;</code> 串接，或使用多個 <code>-d</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -X POST -d &quot;param1=value1&amp;param2=value2&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li>檔案上傳</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ curl -X POST -F &#x27;file=@./upload.txt&#x27; http://www.example.com/upload.php</span><br></pre></td></tr></table></figure>
<p>-F 是使用http query parameter的方式，指定檔案位置的參數要加上 @</p>
<h4 id="認證">認證</h4>
<p>許多服務，需先進行登入或認證後，才能存取其 API 服務。可以透過 cookie、session 或在 header 加入 session key、認證的 token 來驗證。</p>
<ul>
<li>Session<br>
如果是用 session 記錄使用者登入資訊，server 會傳一個 session id 給前端，前端需要在每次跟後端的 requests header 中置入此session id，後端便會以此 session id 識別前端。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl --request GET &#x27;http://www.example.com/api/users&#x27; --header &#x27;sessionid:xxxxxxx&#x27;</span><br></pre></td></tr></table></figure>
<ul>
<li>Cookie<br>
在認證後，後端會回傳一個 cookie，把該 cookie 存成檔案，當要存取需要任務的 url 時，再用 -b cookie_file 的方式在 request 中植入 cookie 即可正常使用。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 將cookie存檔</span><br><span class="line">curl -i -X POST -d username=ula -d password=1234 -c  ~/cookie.txt  http://www.example.com/auth</span><br><span class="line"># 載入cookie到request中	</span><br><span class="line">curl -i --header &quot;Accept:application/json&quot; -X GET -b ~/cookie.txt http://www.example.com/users/1</span><br></pre></td></tr></table></figure>
<h3 id="其他常用到的參數">其他常用到的參數</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--user-agent &lt;string&gt;		設置用戶代理發送給服務器</span><br><span class="line">--header &lt;line&gt;			自定義頭信息傳遞給服務器</span><br><span class="line">-I				只顯示 response header</span><br><span class="line">-u/--user &lt;user[:password]&gt;	設置服務器的用戶和密碼</span><br><span class="line">-x &lt;IP&gt;				表示使用這個代理IP去請求其他的網頁</span><br><span class="line">-s				靜默模式，不顯示返回的一大堆頁面內容</span><br><span class="line">-o &lt;檔案名稱&gt;			取得網頁內容，輸出至檔案</span><br><span class="line">-L				表示如果在response header中如果有 location 的話就直接轉向到 location的地址 (redirect地址)</span><br></pre></td></tr></table></figure>
<h4 id="憑證錯誤的問題">憑證錯誤的問題</h4>
<p>如果有遇到以下錯誤，代表 curl 不認得 CA 憑證：<br>
<img src="https://imgur.com/JhmHkDA.png" alt=""><br>
要避免這個情況的話，需要在 curl 指令後面加上 <code>-k</code> 或 <code>–insecure</code> 參數，這樣 curl 便不會檢查 SSL 的有效性，例如：</p>
<p><code>$ curl -k https://github.com/ulahsieh</code><br>
<code>$ curl --insecure https://github.com/ulahsieh</code></p>
<p><img src="https://imgur.com/jlg54zn.png" alt=""></p>
<h6 id="Reference">Reference</h6>
<p>[1]<a href="http://blog.kent-chiu.com/2013/08/14/testing-rest-with-curl-command.html#header">http://blog.kent-chiu.com/2013/08/14/testing-rest-with-curl-command.html#header</a></p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>API</category>
      </categories>
      <tags>
        <tag>curl</tag>
        <tag>API</tag>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>[API] 簡介及實作 &amp; 資料交換格式 - XML, JSON, SOAP</title>
    <url>/API/</url>
    <content><![CDATA[<h3 id="API">API</h3>
<p>Application Programming Interface 應用程式介面，其中『介面』就是溝通的管道，比如說 USB 隨身碟的介面就是 USB．所有電腦以及 USB 隨身硬碟的廠商只要按照 USB 的規則製造就能使用此介面去溝通。</p>
<span id="more"></span>
<h3 id="提供-API-使用-API">提供 API &amp; 使用 API</h3>
<p>比如電腦使用者說想知道網路狀況，作業系統底層變提供了 API 讓我們使用。又比如說想要更改某個網站的會員資料，那這個網站就提供了 API 讓我們能在網站上修改資料庫的會員資料。或是要在網頁上加入 google map 的功能，就需使用 google map 提供的 API。</p>
<p><strong>所以 API 可以想成是某種功能，用以溝通兩個不同的東西用的。</strong></p>
<h3 id="WebAPI">WebAPI</h3>
<p>指 HTTP API，透過 HTTP 協定的 API。通常透過 HTTP method 去呼叫 API 進而交換資料，基本上就是丟 request，然後拿到 response 的資料。</p>
<h3 id="SDK">SDK</h3>
<p>Software Development Kit 軟體開發套件，是用來開發特定應用程式的工具組，通常是廠商針對某一平臺、系統、或硬體所釋出，用以開發應用程式的工具組，在這個工具包裡面，可能包含了各式各樣的開發工具，模擬器或 API 等。</p>
<h3 id="api-串接實作">api 串接實作</h3>
<p>將使用 <a href="https://reqres.in/">reqres</a> 網站當作伺服器，下 API 去取得該網站的資料。另外使用 request node module 實作。</p>
<ol>
<li>發 request 到網址，並印出 body<br>
<img src="https://imgur.com/R4FKQdA.png" alt=""></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>);</span><br><span class="line">request(</span><br><span class="line">  <span class="string">&#x27;https://reqres.in/api/users?page=2&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">error, response, body</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">&#x27;request failed&#x27;</span>, err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(body)</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>印出所有 user list<br>
<img src="https://imgur.com/aRf6k3X.png" alt=""></p>
<ol start="2">
<li>發 request 到網址，並印出單一使用者資料<br>
<img src="https://imgur.com/i9dXR3c.png" alt=""></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>);</span><br><span class="line">request(</span><br><span class="line">  <span class="string">&#x27;https://reqres.in/api/users/2&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">error, response, body</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">&#x27;request failed&#x27;</span>, err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(body)  </span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/mJQUD1u.png" alt=""></p>
<ol start="3">
<li>把取得得特定使用者變成是下 node index.js 時的參數<br>
將使用另一個 node module - process</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> process = <span class="built_in">require</span>(<span class="string">&#x27;process&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(process.argv)</span><br><span class="line">request(</span><br><span class="line">  <span class="string">&#x27;https://reqres.in/api/users/&#x27;</span> + process.argv[<span class="number">2</span>], <span class="comment">//第三個參數</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">error, response, body</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">&#x27;request failed&#x27;</span>, err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(body)  </span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/H5CQh3z.png" alt=""></p>
<ol start="4">
<li>post 一筆新使用者資料到網站上<br>
<img src="https://imgur.com/j4UE1Zp.png" alt=""></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>);</span><br><span class="line">request.post(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;https://reqres.in/api/users/&#x27;</span>, </span><br><span class="line">    <span class="attr">form</span>:&#123;</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&#x27;ula&#x27;</span>,</span><br><span class="line">      <span class="attr">job</span>:<span class="string">&#x27;student&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">error, response, body</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">&#x27;request failed&#x27;</span>, err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(response.statusCode) <span class="comment">//印出 http 狀態碼  </span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/XQcAPCK.png" alt=""></p>
<ol start="5">
<li>使用 patch 修改資料</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>);</span><br><span class="line">request.post(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;https://reqres.in/api/users/2&#x27;</span>, </span><br><span class="line">    <span class="attr">form</span>:&#123;</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&#x27;ula&#x27;</span>,</span><br><span class="line">      <span class="attr">job</span>:<span class="string">&#x27;student&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">error, response, body</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">&#x27;request failed&#x27;</span>, err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(response.statusCode) <span class="comment">//印出 http 狀態碼  </span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>使用 delete 刪除資料</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>);</span><br><span class="line">request.delete(</span><br><span class="line">  <span class="string">&#x27;https://lidemy-book-store.herokuapp.com/books/21&#x27;</span>, </span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">error, response, body</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">&#x27;request failed&#x27;</span>, err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(response.statusCode) <span class="comment">//印出 http 狀態碼</span></span><br><span class="line">    <span class="built_in">console</span>.log(body)  </span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="CURD">CURD</h3>
<p>CURD 是創建（Create）、更新（Update）、讀取（Read）和刪除（Delete）操作的縮寫。在電腦程式語言中是一連串常見的動作行為，通常是為了針對某個特定資源所作出的舉動（例如：建立資料、讀取資料等）。這四種行為最常使用在 SQL 資料庫操作或網站的 API 串接時。[3]</p>
<h3 id="RESTful-API">RESTful API</h3>
<p>REST (Representational State Transfer)具象狀態傳輸，而 Restful 形容詞， Restful API 是一種風格而非協定，形容以此規範設計的 API。</p>
<p>RESTful 風格的網址設計強調從 URL 就能看出要對什麼資料(資源名稱)、進行什麼操作(HTTP Method)。</p>
<ul>
<li>瀏覽全部資料：GET + 資源名稱</li>
<li>瀏覽特定資料：GET + 資源名稱 + id</li>
<li>新增一筆資料：POST + 資源名稱</li>
<li>修改特定資料：PUT + 資源名稱 + id</li>
<li>刪除特定資料：DELETE + 資源名稱 + id</li>
</ul>
<p>例如前面的 reqres 範例，get <a href="https://reqres.in/api/users/2%EF%BC%8C%E5%8F%96%E5%BE%97%E7%AC%AC%E4%BA%8C%E7%AD%86">https://reqres.in/api/users/2，取得第二筆</a> users 資料。</p>
<table><tr><td bgcolor=AliceBlue>
<b>小補充</b></p>
API 的網址通常會定義如下，會為 api 加上版本資訊，以便未來改版時不同版本的 client 可以同時使用。
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://ulagraphy.com/api/v1</span><br></pre></td></tr></table></figure>
</td></tr></table>
<hr>
<h3 id="資料格式">資料格式</h3>
<h4 id="XML">XML</h4>
<p>Extensible Markup Language，跟 html 很像，是一種標記式語言。與 html 不同的是，XML可以允許使用者自行定義所需的標籤(tags)，主要的功能是用來「資料傳遞」用。<br>
<img src="https://imgur.com/h2QBAaD.png" alt=""></p>
<h4 id="JSON">JSON</h4>
<p>Javascript Object Notation，是一種資料格式。相較於 XML，近年來 JSON 較廣為使用，易讀且檔案大小相對較小。<br>
前面的範例中 response 回傳的資料雖然是字串，但可以被轉成 json。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> process = <span class="built_in">require</span>(<span class="string">&#x27;process&#x27;</span>);</span><br><span class="line">request(</span><br><span class="line">  <span class="string">&#x27;https://reqres.in/api/users/&#x27;</span> + process.argv[<span class="number">2</span>], <span class="comment">//第三個參數</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">error, response, body</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> json = <span class="built_in">JSON</span>.parse(body)</span><br><span class="line">    <span class="built_in">console</span>.log(json)  </span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/e1lJJHm.png" alt=""><br>
轉成 json 格式後就可以存取裡面的屬性值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(json.data.first_name)</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/fvitz2E.png" alt=""></p>
<table><tr><td bgcolor=AliceBlue>
<b>補充</b></p>
1. 字串轉 JSON 使用 `JSON.parse(str)`</br>
2. Javascript 物件轉 JSON 格式的字串可使用 `JSON.stringify(obj)` </br>
3. 任何一種資料格式在任何程式語言都可以使用，所以雖然 JSON 全名有 Javascript，但他也支援其他如 C, Pyhon 等語言
</td></tr></table>
<h3 id="SOAP">SOAP</h3>
<p>除了前面提到的 HTTP METHOD 可以下 API 來跟網頁溝通外，還有其他種方式，SOAP (Simple Object Access Protocol) 就是其一，SOAP 的交換(request &amp; response)都是透過 XML。Node.js 有提供 node-soap 的 module，方便產生 SOAP 的資料格式，但此協定已很少被使用了！</p>
<hr>
<h6 id="reference">reference</h6>
<p>[1] <a href="https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/424027/">https://codertw.com/程式語言/424027/</a><br>
[2] <a href="https://noob.tw/restful-api/">https://noob.tw/restful-api/</a><br>
[3] <a href="https://zh.wikipedia.org/wiki/%E5%A2%9E%E5%88%AA%E6%9F%A5%E6%94%B9">https://zh.wikipedia.org/wiki/增刪查改</a><br>
[all] 記此篇為觀看 Lidemy NET101 的筆記，部分圖片以及內容取自上課影片</p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>API</category>
      </categories>
      <tags>
        <tag>curl</tag>
        <tag>API</tag>
        <tag>HTTP</tag>
        <tag>Network</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache Redirect http to https</title>
    <url>/Apache-Redirect-http-to-https/</url>
    <content><![CDATA[<p>目前手上有一個使用 php 開發的網頁，web server 使用 Apache (httpd) 實做。本篇記錄如何將 http 自動轉址到 https。</p>
<span id="more"></span>
<h3 id="mod-rewrite-c">mod_rewrite.c</h3>
<p>編輯 httpd config 檔，<code>/etc/httpd/conf/httpd.conf</code>，在 <code>&lt;VirtualHost *:80&gt;</code> 的區塊下新增以下 rewirte module：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;IfModule mod_rewrite.c&gt;</span><br><span class="line">  RewriteEngine on</span><br><span class="line">  RewriteRule ^ - [E=protossl]</span><br><span class="line"></span><br><span class="line">  RewriteCond %&#123;HTTPS&#125; on</span><br><span class="line">  RewriteRule ^ - [E=protossl:s]</span><br><span class="line"></span><br><span class="line">  RewriteCond %&#123;HTTPS&#125; !=on</span><br><span class="line">  RewriteRule ^ https://www.ula.com/$1 [L,R=301]</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure>
<p>作業環境為 CentOS，重啟 httpd</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart httpd</span><br></pre></td></tr></table></figure>
<h3 id="Reference">Reference</h3>
<ul>
<li><a href="https://stackoverflow.com/questions/57341254/how-to-redirect-http-to-https-on-apache">https://stackoverflow.com/questions/57341254/how-to-redirect-http-to-https-on-apache</a></li>
</ul>
]]></content>
      <categories>
        <category>Programming</category>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>[Big Data] Real-time / Streaming / Batch </title>
    <url>/BigData-Realtime-Streaming-Batch/</url>
    <content><![CDATA[<p>real-time 指的是資料的反應時間<br>
如果一個系統為實時系統，表示該系統能在極短的時間內反應</p>
<p>streaming 指的是針對資料採取的動作</p>
<p><a href="https://sqlstream.com/real-time-vs-streaming-a-short-explanation/">https://sqlstream.com/real-time-vs-streaming-a-short-explanation/</a></p>
<p><a href="http://zicesun.com/2019/03/22/201903272000-Batch-Processing-vs-Stream-Processing/">http://zicesun.com/2019/03/22/201903272000-Batch-Processing-vs-Stream-Processing/</a></p>
<p>**待比較 streaming &amp; batch**<br>
**待比較 kafka stream &amp; spark streaming**</p>
]]></content>
      <categories>
        <category>Big Data</category>
      </categories>
  </entry>
  <entry>
    <title>[Zookeeper] 建立 Zookeeper Cluster</title>
    <url>/Build-Zookeeper-Cluster/</url>
    <content><![CDATA[<p>Zookeeper 提供分散式應用程式中的協調服務，是 Hadoop 生態系產品中不可或缺的角色。<br>
Zookeeper 叢集適合搭建在奇數臺機器上，目的是為了提高可用性以及維持選舉制度的運行。[1]</p>
<h3 id="Step-1-Install-Java-JDK">Step 1: Install Java JDK</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install openjdk-8-jdk</span><br><span class="line">$ java -version</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo vi /etc/environment</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JAVA_HOME=&quot;/usr/lib/jvm/java-8-openjdk-amd64&quot;</span><br><span class="line">JRE_HOME=&quot;/usr/lib/jvm/java-8-openjdk-amd64/jre&quot;</span><br><span class="line">PATH=&quot;$&#123;PATH&#125;:$&#123;JAVA_HOME&#125;/bin:$&#123;JRE_HOME&#125;/bin&quot;</span><br></pre></td></tr></table></figure>
<p>使環境變數生效</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ source /etc/environment</span><br><span class="line">$ env</span><br></pre></td></tr></table></figure>
<h3 id="Step-2-Install-zookeeper">Step 2: Install zookeeper</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd /opt</span><br><span class="line">$ wget &quot;https://archive.apache.org/dist/zookeeper/zookeeper-3.6.1/apache-zookeeper-3.6.1-bin.tar.gz&quot;</span><br><span class="line">$ sudo tar zxvf apache-zookeeper-3.6.1-bin.tar.gz</span><br><span class="line">$ sudo mv apache-zookeeper-3.6.1-bin zookeeper</span><br><span class="line">$ sudo adduser nexcom root</span><br><span class="line">$ chown -R $USER:root /opt/zookeeper</span><br></pre></td></tr></table></figure>
<p>建立存放 zk config 及其資料的 directory</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mkdir /var/lib/zookeeper</span><br><span class="line">$ chown -R $USER:root /var/lib/zookeeper</span><br></pre></td></tr></table></figure>
<p>設定 zoo.cfg 配置檔</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo cp /opt/zookeeper/conf/zoo_sample.cfg ./zoo.cfg</span><br><span class="line">$ vi /opt/zookeeper/conf/zoo.cfg</span><br></pre></td></tr></table></figure>
<p>在配置檔中修改以下參數</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">dataDir=/var/lib/zookeeper</span></span><br><span class="line"><span class="string">clientPort=2181</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#加入其他 zookeeper 節點的 ip, 第一個 port 用於 follower 連接 leader, 第二個 port 用於節點選舉</span></span><br><span class="line"><span class="string">server.1=10.0.0.4:2888:3888</span></span><br><span class="line"><span class="string">server.2=10.0.0.5:2888:3888</span></span><br><span class="line"><span class="string">server.3=10.0.0.6:2888:3888</span></span><br></pre></td></tr></table></figure>
<p>建立 deamon，將 zookeeper 設為一服務</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo vi /etc/systemd/system/zookeeper.service</span><br></pre></td></tr></table></figure>
<p>在 zookeeper.service 中加入以下文字</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Zookeeper Daemon</span><br><span class="line">Documentation=http://zookeeper.apache.org</span><br><span class="line">Requires=network.target</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">WorkingDirectory=/opt/zookeeper</span><br><span class="line">User=root</span><br><span class="line">ExecStart=/opt/zookeeper/bin/zkServer.sh start /opt/zookeeper/conf/zoo.cfg</span><br><span class="line">ExecStop=/opt/zookeeper/bin/zkServer.sh stop /opt/zookeeper/conf/zoo.cfg</span><br><span class="line">ExecReload=/opt/zookeeper/bin/zkServer.sh restart /opt/zookeeper/conf/zoo.cfg</span><br><span class="line">TimeoutSec=30</span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=default.target</span><br></pre></td></tr></table></figure>
<p>修改 <a href="http://zkServer.sh">zkServer.sh</a> 以避免在 telnet 時發生 <code>stat is not executed because it is not in the whitelist. Connection closed</code> 的錯誤</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo vi /opt/zookeeper/bin/zkServer.sh</span><br></pre></td></tr></table></figure>
<p>在 <a href="http://zkServer.sh">zkServer.sh</a> 中加入以下這一行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ZOOMAIN=&quot;-Dzookeeper.4lw.commands.whitelist=* $&#123;ZOOMAIN&#125;&quot;</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/NXL1Btu.png" alt=""></p>
<p>在每台節點上設定 Zookeeper 識別用唯一 id</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ echo &quot;1&quot; &gt; /var/lib/zookeeper/myid</span><br></pre></td></tr></table></figure>
<p>啟動 zookeeper, 並設為開機自動啟動</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl start zookeeper</span><br><span class="line">$ sudo systemctl enable zookeeper</span><br></pre></td></tr></table></figure>
<p>下一篇將介紹 Kafka 叢集的安裝。</p>
<h3 id="source">source</h3>
<p>[1] <a href="https://medium.com/@bikas.katwal10/why-zookeeper-needs-an-odd-number-of-nodes-bb8d6020e9e9">https://medium.com/@bikas.katwal10/why-zookeeper-needs-an-odd-number-of-nodes-bb8d6020e9e9</a></p>
]]></content>
      <categories>
        <category>Big Data</category>
        <category>Zookeeper</category>
      </categories>
      <tags>
        <tag>Kafka</tag>
        <tag>Zookeeper</tag>
        <tag>BigData</tag>
      </tags>
  </entry>
  <entry>
    <title>[CSS] Margin &amp; Border &amp; Padding 比較</title>
    <url>/CSS-Margin-Border-Padding/</url>
    <content><![CDATA[<h2 id="比較">比較</h2>
<table>
<thead>
<tr>
<th>padding</th>
<th>border</th>
<th>margin</th>
</tr>
</thead>
<tbody>
<tr>
<td>內邊距</td>
<td>邊距</td>
<td>外邊距</td>
</tr>
</tbody>
</table>
<span id="more"></span>
<img src="https://imgur.com/ME7vlle.png" height=350px>
<h2 id="padding">padding</h2>
<p>用於調整元素邊界與內容的間距。</p>
<h3 id="單獨指定寫法">單獨指定寫法</h3>
<ul>
<li>padding-top: 30px;</li>
<li>padding-right: 30px;</li>
<li>padding-bottom: 30px;</li>
<li>padding-left: 30px;</li>
</ul>
<h3 id="合併寫法">合併寫法</h3>
<ul>
<li>padding: 30px;  --&gt; 上下左右皆為 30px</li>
<li>padding: 30px 50px --&gt; 上下 30px, 左右 50px</li>
<li>padding: 30px 20px 10px --&gt; 上 30px, 左右 20px , 下 10px</li>
<li>padding: 10px 20px 30px 40px --&gt; 分別對應為上右下左</li>
</ul>
<h2 id="margin">margin</h2>
<p>用於調整元素之間的邊界間距。<br>
屬性設定同 padding 有上右下左的單獨屬性值，或是合併簡寫寫法。</p>
<h2 id="border">border</h2>
<p>border 是元素最外層的邊界。</p>
<h3 id="單獨指定樣式寫法">單獨指定樣式寫法</h3>
<ul>
<li>border-width: 5px 5px 5px 5px;  --&gt; 上右下左</li>
<li>border-style: solid|dashed|double|dotted|hidden;</li>
<li>border-color: black;</li>
<li>border-top: 5px;</li>
<li>border-right: 5px;</li>
<li>border-bottom: 5px;</li>
<li>border-left: 5px;</li>
</ul>
<h3 id="合併寫法-2">合併寫法</h3>
<ul>
<li>border: 5px red solid; --&gt; 邊框粗細 5px, 顏色 red, 樣式 solid;</li>
</ul>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>[CSS] 簡介- Selector &amp; Selector Specificity</title>
    <url>/CSS-Selector/</url>
    <content><![CDATA[<h2 id="CSS">CSS</h2>
<p>Cascading Style Sheets 階層式樣式表，是一種用來為結構化文件（如HTML文件或XML應用）添加樣式（字型、間距和顏色等）的語言。</p>
<span id="more"></span>
<h2 id="幾種加入-CSS-的方式">幾種加入 CSS 的方式</h2>
<ol>
<li>
<p>inline style<br>
寫在 HTML 標籤中 (inline style)<br>
例如：<br>
<img src="https://imgur.com/70G2pbh.png" alt=""><br>
但比較不建議，因為會跟 HTML 混在一起，不便修改及維護。</p>
</li>
<li>
<p><code>&lt;style&gt;</code><br>
在 <code>&lt;head&gt;</code> 標籤區塊中加上 <code>&lt;style&gt;</code> 標籤</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span> : red;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中 <code>div</code> 是 selector，<code>background: red</code> 則是 property 及 value。<br>
<img src="https://imgur.com/D3IiYSG.png" alt=""></p>
<p>但仍然不建議使用此方法，因為當 html 標籤一多，style 區塊中就要有許多 selector，也是不便於修改及維護。</p>
<ol start="3">
<li><code>&lt;link&gt;</code><br>
將 CSS 獨立於單獨的檔案中，再從 HTML 中使用 <code>&lt;link&gt;</code> 指定 css 檔進來。</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./style.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* style.css */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">background</span> : grey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/Sk5WoUv.png" alt=""></p>
<ol start="4">
<li><code>@import</code><br>
<code>@import</code> 語法有兩種：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  @import &quot;style.css&quot;;</span><br><span class="line">  @import url(&quot;style.css&quot;);</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p><code>@import</code> 是 CSS 中的一個 @ 規則，必須<strong>先於</strong>所有其他類型的規則 (@charset 規則除外)，須寫在 <code>&lt;style&gt;</code> 標籤裡。</p>
<p><strong>非模塊化開發時盡量不要用 @import</strong><br>
使用 @import 會先導入 html 後才會加載 CSS 文件。</p>
<ul>
<li>
<p>非模組化開發<br>
正常開發時，所有的 CSS 文件都需要引入。如果在某個 CSS 文件中使用了 @import，瀏覽器要先下載使用了 @import 的 CSS，解析完後發現有另外的 CSS 文件需要下載，再去下載、解析，增加了用戶的等待時間。<br>
如果 CSS 內容不多，可以合並到一個文件里，減少請求次數。對於多個獨立的 CSS 文件，最好直接用 link 標簽加載。</p>
</li>
<li>
<p>模組化開發<br>
在用 webpack 等工具開發時，會合併 CSS 文件。如果 CSS 文件相互之間有依賴，可以直接用也只能用 @import 引入，最後構建好的文件會合併文件，不會出現 @import。</p>
</li>
</ul>
<div class="warning">
<p>建議使用 <code>&lt;link&gt;</code> 方式引入， HTML 及 CSS 檔案彼此獨立，可以針對單一的需求做修改而不影響另一個，且</p>
<ol>
<li>CSS 檔案加載與 HTML 檔案同時，網頁效能較佳。</li>
<li>載入 javascript 進行 DOM 操作只能使用 link 導入</li>
</ol>
</div>
<hr>
<h2 id="CSS-語法">CSS 語法</h2>
<p><img src="https://imgur.com/0JwAeMX.png" alt=""></p>
<ul>
<li>Selector 選擇器，用來選擇 HTML 的元素。</li>
<li>{ } 大括號包圍了一個宣告區域，任何寫在這個區域裡的設定，會對 HTML 中符合選擇器的元素起作用。</li>
<li>Property &amp; Value：在圖例中，我們宣告選擇器 <code>&lt;h1&gt;</code> 的 color 屬性的值是藍色、font-size 屬性的值是 12px。</li>
<li>多條宣告用分號 ( ; ) 隔開，可以使用空格或換行增加可讀性。</li>
<li>注釋使用 <code>/* */</code>。</li>
</ul>
<h2 id="Selector-的種類">Selector 的種類</h2>
<h3 id="Universal-Selector">Universal Selector</h3>
<p>使用 <code>*</code> ，代表選擇<strong>所有的</strong> html 元素。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">color</span> : orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Element-Selector">Element Selector</h3>
<p>使用特定的標籤，代表選擇所有指定標籤。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">color</span> : orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ID-Selector">ID Selector</h3>
<p>在一個 HTML 文件中單一 ID 只能被使用<strong>一次</strong>。選擇器以 <code>#</code> 開頭。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line">  test</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Class-Selector">Class Selector</h3>
<p>當你有相同的東西要長得一樣時就可以把他們都命名為同一個 class。選擇器以 <code>.</code> 開頭。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sty1&quot;</span>&gt;</span></span><br><span class="line">  hello</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sty1&quot;</span>&gt;</span></span><br><span class="line">  world</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.sty1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="info">
<p>至於何時要用 ID 、何時要用 Class，並沒有絕對的規則。但是大多的時候，Class 選擇器的使用頻率較高，因為較靈活，目的為了將幾個元素從其他元素中獨立出來做改動。但是當你要用 Javascript 的 GetElementByID 函數時，你就應該要用 ID 選擇器，因為ID 選擇器可以被 Javascript 中的 GetElementByID 函數所運用。</p>
</div>
<h3 id="同時符合">同時符合</h3>
<p>把 selector 連在一起，可以表示同時符合多種條件的選擇器。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sty1&quot;</span>&gt;</span></span><br><span class="line">  hello world</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  hello html</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sty1&quot;</span>&gt;</span></span><br><span class="line">  hello css</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sty1 bg-yellow&quot;</span> &gt;</span></span><br><span class="line">  hello js</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 同時符合是　div 標籤以及 .sty1 class 的元素 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.sty1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 同時符合是　div 標籤以及 .sty1 class 以及 bg-yellow class 的元素 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.sty1</span><span class="selector-class">.bg-yellow</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="選取底下的元素">選取底下的元素</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;lv1&quot;</span>&gt;</span></span><br><span class="line">  level 1</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>level 2</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bg-red&quot;</span>&gt;</span>level 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bg-red&quot;</span>&gt;</span>level 2-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="使用-選取左邊元素的下一層右邊元素">使用 <code>&gt;</code> 選取左邊元素的下一層右邊元素</h4>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*選擇 .lv1 下一層的所有的 .bg-red*/</span></span><br><span class="line"><span class="selector-class">.lv1</span> &gt; <span class="selector-class">.bg-red</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/CfTiiJj.png" alt=""></p>
<h4 id="使用-選取左邊元素下一層內的所有符合右邊的元素">使用 <code> </code> 選取左邊元素下一層內的所有符合右邊的元素</h4>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*選擇 .lv1 內的所有的 .bg-red*/</span></span><br><span class="line"><span class="selector-class">.lv1</span> <span class="selector-class">.bg-red</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/CfTiiJj.png" alt=""></p>
<h3 id="選取旁邊（同一層）的元素">選取旁邊（同一層）的元素</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bg-red&quot;</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bg-red&quot;</span>&gt;</span>div3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bg-red&quot;</span>&gt;</span>div4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>123<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>456<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>789<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="右邊一個"><code>+</code> 右邊一個</h4>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 選 bg-red (第三個 div) 旁邊的 bg-red (第四個 div) 標籤 */</span></span><br><span class="line"><span class="selector-class">.bg-red</span> + <span class="selector-class">.bg-red</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: red</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 選 span 旁邊的 div */</span></span><br><span class="line"><span class="selector-tag">span</span> + <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: yellow</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/a3zm31F.png" alt=""></p>
<h4 id="右邊全部的"><code>~</code> 右邊全部的</h4>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 選 bg-red (第一個 div) 後面所有的 bg-red 標籤 */</span></span><br><span class="line"><span class="selector-class">.bg-red</span> ~ <span class="selector-class">.bg-red</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: red</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 選 span 後面所有的 div */</span></span><br><span class="line"><span class="selector-tag">span</span> ~ <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: yellow</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/pMntnXU.png" alt=""></p>
<p>這個語法很適合用在排版，通常想要將一排的物件平均均分，第一個通常要靠邊界對齊不會動，在後面每個要間格 80px 的話只需要使用 <code>~</code> 選取。<br>
<img src="https://imgur.com/qHA3r2y.png" alt=""></p>
<h3 id="Pseudo-classes-偽類">Pseudo-classes 偽類</h3>
<h4 id="hover">:hover</h4>
<p>當游標移動到指定 selector 上面時要做什麼樣的變化。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/VzN9A6g.gif" alt=""></p>
<h4 id="nth-child">nth-child</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>div3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>div4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>div5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>div6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-tag">div</span><span class="selector-pseudo">:first</span>-child &#123;  <span class="comment">/* 選 wrapper class 下的第一個元素同時是 div */</span></span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-tag">div</span><span class="selector-pseudo">:last-child</span> &#123;  <span class="comment">/* 選 wrapper class 下的最後一個元素同時是 div */</span></span><br><span class="line">  <span class="attribute">background</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;   <span class="comment">/* 選 wrapper class 下的第三個元素同時是 div */</span></span><br><span class="line">  <span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(odd) &#123;  <span class="comment">/* 選 wrapper class 下的奇數位看同時是 div */</span></span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>n) &#123;  <span class="comment">/* 選 wrapper class 下的三的倍數位看同時是 div */</span></span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>n+<span class="number">1</span>) &#123;  <span class="comment">/* 選 wrapper class 下的三的倍數加一位看同時是 div */</span></span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>其他的 Pseudo-classes</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:link</span> <span class="comment">/*連結平常的樣式*/</span></span><br><span class="line"><span class="selector-pseudo">:visited</span> <span class="comment">/*連結查閱後的樣式*/</span></span><br><span class="line"><span class="selector-pseudo">:active</span> <span class="comment">/*滑鼠按下的樣式*/</span></span><br><span class="line"><span class="selector-pseudo">:focus</span> <span class="comment">/*目標為焦點的樣式*/</span></span><br><span class="line"><span class="selector-pseudo">:lang</span>(E) <span class="comment">/*當語言為E的樣式*/</span></span><br><span class="line"><span class="selector-pseudo">:first</span>-child <span class="comment">/*第一個元素的樣式*/</span></span><br></pre></td></tr></table></figure>
<p>更多偽類別請參考：<a href="https://www.w3schools.com/css/css_pseudo_classes.asp">Pseudo-classes</a></p>
<div class="info">
<p>補充<br>
因為 Pseudo-classes 通常都需要使用者觸發才會有樣式的變化，會較難 debug。下面展示了如何使用開發人員工具讓我們不須使用滑鼠也能測試 Pseudo-classes。</p>
</div>
<p><img src="https://imgur.com/ZiWXe25.png" alt=""></p>
<h3 id="Pseudo-element-偽元素">Pseudo-element 偽元素</h3>
<p>可以選到某個元素的某個部分，為了與 pseudo-class 區分，以兩個冒號<code>::</code>來表示。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">  1000</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/gr3x9Ju.png" alt=""></p>
<h4 id="Before">Before</h4>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;$&quot;</span>;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/SEB98dY.png" alt=""></p>
<h4 id="After">After</h4>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;NTD&quot;</span>;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/xcr6JQh.png" alt=""></p>
<h3 id="在-content-放入-selector-的-property-value">在 content 放入 selector 的 property value</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">attr</span>(class);</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/2j8aZJ6.png" alt=""></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span> <span class="attr">property</span>=<span class="string">&quot;value&quot;</span>&gt;</span></span><br><span class="line">  1000</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">attr</span>(value);</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/SnnyAAs.png" alt=""></p>
<hr>
<h2 id="CSS-Selector-的權重">CSS Selector 的權重</h2>
<p>所謂的權重就是指 css 的優先權:</p>
<ul>
<li>相同權重但是後寫的 css 可以覆蓋先寫的 css</li>
<li>當兩個選擇器同時作用在一個元素，權重高的優先生效</li>
</ul>
<p>權重大小(可以想成愈詳細的愈贏)</p>
<div class="warning">
<p>!important &gt; inline style &gt; ID &gt; Class/psuedo-class(偽類)/attribute（屬性選擇器） &gt; Element</p>
</div>
<h3 id="important">!important</h3>
<p>!important 的權重最高，可以蓋過所有的權重，建議不要隨便使用。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color=blue&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;!important</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最後 hello 的樣式會是採用 !important 的紅字。</p>
<p>一個可愛的 CSS 權重圖：<br>
<img src="https://imgur.com/LtsCyMr.png" alt=""></p>
<h6 id="Reference">Reference</h6>
<p>[1]<a href="https://www.w3schools.com/css/css_syntax.asp">https://www.w3schools.com/css/css_syntax.asp</a><br>
[2]<a href="https://ithelp.ithome.com.tw/questions/10183484">https://ithelp.ithome.com.tw/questions/10183484</a><br>
[3]<a href="https://ithelp.ithome.com.tw/articles/10196454">https://ithelp.ithome.com.tw/articles/10196454</a><br>
[4]<a href="http://www.standardista.com/css3/css-specificity/">http://www.standardista.com/css3/css-specificity/</a><br>
[5]<a href="https://www.itdaan.com/tw/78e32ccfaac206f9b1aab87e586f3b0a">https://www.itdaan.com/tw/78e32ccfaac206f9b1aab87e586f3b0a</a></p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>[CSS] background</title>
    <url>/CSS-background/</url>
    <content><![CDATA[<h3 id="background">background</h3>
<ul>
<li>指定顏色</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>box1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>box2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box3&quot;</span>&gt;</span>box3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box4&quot;</span>&gt;</span>box4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* style.css */</span></span><br><span class="line"><span class="selector-id">#box1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#box2</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#2ab4b4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#box3</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">117</span>, <span class="number">107</span>, <span class="number">255</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#box4</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">117</span>, <span class="number">107</span>, <span class="number">255</span>, <span class="number">0.3</span>); <span class="comment">/* a 指透明度，值從 0 到 1*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/JqH1PAs.png" alt=""></p>
<ul>
<li>指定背景圖片</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* style.css */</span></span><br><span class="line"><span class="selector-id">#box1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;./lemon.jpg&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/JJeq55s.png" alt=""></p>
<h3 id="background-repeat">background-repeat</h3>
<p>背景平舖方式，默認為 repeat，可以接受的屬性值有<code>no-repeat/ repeat-x/ repeat-y</code>，其中 repeat-x 為水平方向重複，repeat-y 則為垂直方向重複。<br>
<img src="https://imgur.com/sEPpMjb.png" alt=""></p>
<h3 id="background-position">background-position</h3>
<p>可能的屬性值有 <code>center center / top center / bottom center</code>，第一個值為水平方向、第二個值為垂直方向。</p>
<ol>
<li>center center 指定圖片置中。</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* style.css */</span></span><br><span class="line"><span class="selector-id">#box1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;./lemon.jpg&quot;</span>);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-position</span>: center center;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/vggM3P1.png" alt=""><br>
2. top center 指定圖片靠上置中對齊</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* style.css */</span></span><br><span class="line"><span class="selector-id">#box1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;./lemon.jpg&quot;</span>);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-position</span>: top center;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/HrZij8s.png" alt=""><br>
3. bottom center 指定圖片靠下置中對齊</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* style.css */</span></span><br><span class="line"><span class="selector-id">#box1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;./lemon.jpg&quot;</span>);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-position</span>: bottom center;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/fWHk3u4.png" alt=""></p>
<h3 id="簡寫">簡寫</h3>
<p><code>backgound-repeat</code> 以及 <code>backgound-position</code> 可以直接表示在 <code>background</code> 屬性中，例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;./lemon.jpg&quot;</span>) no-repeat center center;</span><br></pre></td></tr></table></figure>
<p>這三個屬性值沒有特性順序，也可以將 <code>no-repeat</code> 寫在 <code>url(&quot;./lemon.jpg&quot;)</code> 前。</p>
<h3 id="background-size">background-size</h3>
<ul>
<li>用 pixel 表示</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* style.css */</span></span><br><span class="line"><span class="selector-id">#box1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;./lemon.jpg&quot;</span>) no-repeat center center;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">300px</span> <span class="number">100px</span></span><br><span class="line">  height: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#box2</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#2ab4b4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/trKw6UL.png" alt=""></p>
<ul>
<li>用百分比表示</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* style.css */</span></span><br><span class="line"><span class="selector-id">#box1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;./lemon.jpg&quot;</span>) no-repeat center center;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">50%</span> <span class="number">80%</span></span><br><span class="line">  height: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#box2</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#2ab4b4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/UH2ANRV.png" alt=""></p>
<ul>
<li>contain<br>
縮放圖片以完全裝入背景，背景區可能會留白。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* style.css */</span></span><br><span class="line"><span class="selector-id">#box1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;./lemon.jpg&quot;</span>) no-repeat center center;</span><br><span class="line">  <span class="attribute">background-size</span>: contain;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#box2</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#2ab4b4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/NXi5EEu.png" alt=""></p>
<ul>
<li>cover<br>
縮放圖片以完全覆蓋背景區，圖片可能部分會被裁切。</li>
</ul>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>[CSS] float</title>
    <url>/CSS-float/</url>
    <content><![CDATA[<h2 id="HTML-Normal-Flow-inline-block">HTML Normal Flow / inline &amp; block</h2>
<p>一般 HTML 的 normal flow 為由左至右及由上至下排列，一般取決於元素的 display 屬性是 <code>inline</code> 或是 <code>block</code></p>
<ul>
<li>block 元素：區塊元素，在文檔中自己佔一行。如 <code>&lt;div&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;ol&gt;&lt;ul&gt;&lt;li&gt;</code>、<code>&lt;dl&gt;&lt;dt&gt;&lt;dd&gt;</code>、<code>&lt;table&gt;&lt;tr&gt;&lt;td&gt;</code>、<code>&lt;form&gt;</code>。</li>
<li>inline 元素：行內元素或內聯元素，可以在一行顯示。如 <code>&lt;span&gt;</code>、<code>&lt;a&gt;</code>、<code>&lt;i&gt;</code>、<code>&lt;b&gt;</code>。</li>
<li>inline-block 元素；行內塊元素。如 <code>&lt;img&gt;</code>、 <code>&lt;input&gt;</code>。</li>
</ul>
<span id="more"></span>
<hr>
<h2 id="Float-浮動">Float 浮動</h2>
<p>因為 HTML flow 的特性四個元素會由上至下排序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;box&quot;&gt;1&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;box&quot;&gt;2&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;box&quot;&gt;3&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;box&quot;&gt;4&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;box&quot;&gt;5&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">  width: 50px;</span><br><span class="line">  height: 50px;</span><br><span class="line">  background-color: orange;</span><br><span class="line">  border: 1px solid;</span><br><span class="line">  margin: 10px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<style>
.box{
  width: 50px;
  height: 50px;
  background-color: PaleGreen;
  border: 1px solid;
  margin: 10px;
}   
</style>
<div class="box">1</div>
<div class="box">2</div>
<div class="box">3</div>
<div class="box">4</div>
<div class="box">5</div>
<p>此時如果想要將 div box 由左至右排序，則可以使用 <code>float</code> 屬性。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">  width: 50px;</span><br><span class="line">  height: 50px;</span><br><span class="line">  background-color: orange;</span><br><span class="line">  border: 1px solid;</span><br><span class="line">  margin: 10px;</span><br><span class="line">  float: left</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<style>
.box2{
  width: 50px;
  height: 50px;
  background-color: PaleGreen;
  border: 1px solid;
  margin: 10px;
  float: left
}   
</style>
<div class="box2">1</div>
<div class="box2">2</div>
<div class="box2">3</div>
<div class="box2">4</div>
<div class="box2">5</div>
<p><br/> <br/><br/><br/><br/></p>
<hr>
<h2 id="Float-應用情景">Float 應用情景</h2>
<ol>
<li>為了實現文字環繞效果</li>
<li>為了設計 DIV 區塊水平排列 (後來已漸漸被 inline-block 取代)</li>
</ol>
<p>以下為文繞圖效果：</p>
<style>
img{
    float: right
}
.out{
    border: 4px solid yellow;
    padding: 10px
}
.clear{
  clear: both;
}
</style>
<div class="out">
<img src="https://imgur.com/cpUaqBE.png" style="height:100px">
<div style="background:PapayaWhip;color:black">
    Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cumsociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. 
</div>
</div>
<h2 id="Float-可能發生的錯誤">Float 可能發生的錯誤</h2>
<p>以下面的例子可以發現外面的框限沒有包覆到圖片，是因為浮動元素 img 在框線 div 的前面，而後面的框線 div 元素沒有使用浮動時，就會往上跑、疊在前一個元素的下方。</p>
<style>
img{
    float: right
}
.out{
    border: 4px solid yellow;
    padding: 10px
}
</style>
<div class="out">
<div style="background:PapayaWhip;color:black">
    Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cumsociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. 
</div>
<img src="https://imgur.com/cpUaqBE.png" style="height:100px">
</div>
<p><br/> <br/><br/> <br/></p>
<h2 id="清除浮動-－-clear">清除浮動 － clear</h2>
<p>clear 屬性用於清除浮動，可能的值有 left、right、both、none 以及 inherit（IE不支援），其中以 both 最常用。</p>
<p>後面的元素被浮動元素覆蓋，做法是在兩元素中另外新增一個 div 標籤，並賦予屬性 clear，其值為 both。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">float</span>: right</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.out</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">border</span>: <span class="number">4px</span> solid yellow;</span></span><br><span class="line"><span class="css">    <span class="attribute">padding</span>: <span class="number">10px</span></span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.cleafix</span>&#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;out&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background:PapayaWhip;color:black&quot;</span>&gt;</span></span><br><span class="line">    Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cumsociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://imgur.com/cpUaqBE.png&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height:100px&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clearfix&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<style>
img{
    float: right
}
.out{
    border: 4px solid yellow;
    padding: 10px;
}
.clearfix{
    clear: both;
}
</style>
<div class="out">
<div style="background:PapayaWhip;color:black">
    Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cumsociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus.
</div>
<img src="https://imgur.com/cpUaqBE.png" style="height:100px">
<div class="clearfix"></div>
</div>
<hr>
<h2 id="inline-block">inline-block</h2>
<p>上面 float 的應用場景提到，在傳統的設計 div 區塊水平排列的時候會採用 float 屬性，讓每個 div 區塊產生浮動的效果，但很容易造成這些區塊以外的區塊被覆蓋，所以還使用 clear 屬性，清除後面的浮動的效果。</p>
<p>現在使用 display:inline-block 可以做到 div 區塊水平排列，而且不需要額外設定 clear 也不會讓後面的元素被浮上來的區塊蓋住。</p>
<p>以下範例可以說明 block, inline 以及 inline-block 屬性的區別</p>
<div style="background:PapayaWhip;color:black">
    Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum <span class="ex1 style">inline</span>sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium.<span class="ex2 style">block</span> Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi. Aenean commodo ligula eget dolor.Cum sociis natoque penatibus et magnis dis parturien montes,  Aenean massa. Cum <span class="ex3 style">inline-block</span>sociis natoque penatibus tet magnis dis parturient montes, nascetur ridiculus mus.Aenean vulputate eleifend tellus. Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
</div>
<style>
.style{
    border:1px solid black;
    padding:20px;
    margin:5px;
    background-color: yellow;
}
.ex1{
    display:inline;
} 

.ex2{
    display:block;
} 

.ex3{
    display:inline-block;
} 
</style>
<br/>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.style</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.forInline</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: inline;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="selector-class">.forBlock</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="selector-class">.forInline-block</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<ul>
<li>inline 元素雖有設定 padding 及 margin，但元素上下並不會把其他行推開，會使得其他行被蓋到。</li>
<li>block 元素雖然可以設定寬高、padding 及 margin，但其屬性會占滿整行，無法並排。</li>
<li><strong>inline-block 可同時擁有 block 可設定寬高的屬性，但其排版仍像 inline 屬性，不會向右占滿整行。</strong></li>
</ul>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>float</tag>
      </tags>
  </entry>
  <entry>
    <title>[CSS] border &amp; outline</title>
    <url>/CSS-border/</url>
    <content><![CDATA[<h2 id="border">border</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>box1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#box1</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: yellow;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">20px</span> solid green;</span><br><span class="line">        <span class="comment">/* 框限大小  樣式  顏色*/</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/sWjrSzS.png" alt=""><br>
邊框是往外面長的，例如上面的例子<br>
能發現到整個選取的地方高度總共是 70px</p>
<h3 id="broder-style">broder-style</h3>
<p>border style 可以為外框限加上不同樣式，以下示範使用開發人員工具上面改樣式。<br>
<img src="https://imgur.com/FciPkEY.gif" alt=""></p>
<h3 id="border-radius">border-radius</h3>
<p>可以為外框的角加上弧度。<br>
<img src="https://imgur.com/dLXfqpa.gif" alt=""></p>
<h3 id="用-border-畫圓形">用 border 畫圓形</h3>
<p>可以在沒有設 border 參數下直接使用 border-radius，將值設成 <strong>50px</strong> 或是 <strong>50%</strong>，即可畫一個圓形。<br>
<img src="https://imgur.com/pwHCycd.png" alt=""></p>
<h3 id="用-border-畫三角形">用 border 畫三角形</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* style.css */</span></span><br><span class="line"><span class="selector-id">#box1</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: yellow;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">30px</span> solid salmon;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">30px</span> solid turquoise;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">30px</span> solid peachpuff;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">30px</span> solid pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以單獨為四個邊設定 border，每個邊會變成梯形；<br>
<img src="https://imgur.com/lCqP5pH.png" alt=""><br>
當中間的元素長寬都設 <strong>0px</strong> 時，四個邊會變成三角形；<br>
<img src="https://imgur.com/NfeVO3V.png" alt=""><br>
把除了要留住的三角形以外的邊以及元素本身顏色都設為 <em>transparent</em> 透明；<br>
<img src="https://imgur.com/ZTpmNjH.png" alt=""><br>
調整各邊的大小可以得道不同長邊的三角形。<br>
<img src="https://imgur.com/ZjQn33V.png" alt=""></p>
<h2 id="Outline">Outline</h2>
<p>Outline 跟 Border 都是邊框，不一樣的是 Outline 是外框，不會改變元件的位置，而 border 會。<br>
<img src="https://imgur.com/vU6Mq2K.gif" alt=""></p>
<div class="info">
<p>不過實際上比較常用 border!</p>
</div>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>[CSS] 文字樣式 &amp; 文字斷行</title>
    <url>/CSS-font-style/</url>
    <content><![CDATA[<h2 id="文字相關的-CSS-屬性">文字相關的 CSS 屬性</h2>
<h3 id="color">color</h3>
<p>文字顏色，值可以是顏色敘述如 <code>red</code>、<a href="https://www.ifreesite.com/color/">色碼表</a> <code>#FF0000</code>，或是 <code>rgb(255,0 , 0)</code>。另外 <code>rgba(255, 0, 0, 0.5)</code> 的 a 表示透明度，值從零到一。</p>
<span id="more"></span>
<h3 id="font-size">font-size</h3>
<p>文字大小。</p>
<h3 id="font-weight">font-weight</h3>
<p>字的粗細，值有 <code>normal, bold, lighter, bolder</code> 或是 100 ~ 900 的整百數值。常見的字重數值大致對應的字重描述詞語：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">100 - Thin </span><br><span class="line">200 - Extra Light (Ultra Light) </span><br><span class="line">300 - Light </span><br><span class="line">400 - Regular (Normal、Book、Roman) </span><br><span class="line">500 - Medium </span><br><span class="line">600 - Semi Bold (Demi Bold) </span><br><span class="line">700 - Bold </span><br><span class="line">800 - Extra Bold (Ultra Bold) </span><br><span class="line">900 - Black (Heavy)</span><br></pre></td></tr></table></figure>
<h3 id="font-family">font-family</h3>
<p>字體。可以接多個字體，如果字體名稱中有空白，就必須用 <code>''</code> 或 <code>&quot;&quot;</code> 括起來。<br>
有兩種類型的字體系列名稱：</p>
<ul>
<li>family-name：指定字體，如 <code>times</code>、<code>courier</code>、<code>arial</code>。</li>
<li>generic-family：通用字體，如 <code>serif</code>、<code>sans-serif</code>、<code>cursive</code>、<code>fantasy</code>、<code>monospace</code>。<br>
當瀏覽器載入網頁樣式時，會從 font-family 的第一個字體開始判斷，如果沒有對應的字體，就會採用下一種字體，如果到最後都沒有可用的字體，就採用電腦預設字體，一般來說定義font-family時，會將泛用字放在最後方，此時就可以透過 generic-family 來指定哪種預設字體。</li>
</ul>
<h3 id="letter-spacing">letter-spacing</h3>
<p>字的間距。值可以是 <code>normal</code>(按照當前字體的正常間距確定)、<code>3px</code>、<code>0.3em</code>。</p>
<h3 id="line-height">line-height</h3>
<p>行距，兩行文字中間的高度。值可以是 <code>normal</code>(按照當前字體的正常行距確定)、<code>3px</code>、<code>0.3em</code>。</p>
<h3 id="text-align">text-align</h3>
<p>水平對齊，常見屬性有：</p>
<ul>
<li>text-align:left; 向左對齊</li>
<li>text-align:right; 向右對齊</li>
<li>text-align:center; 置中</li>
<li>text-align:justify; 使左右對齊本文，通常用於整篇文章</li>
<li>text-align:inherit; 繼承父元素的 text-align 屬性</li>
</ul>
<h3 id="text-decoration">text-decoration</h3>
<p>可能的屬性值有 <code>none/ underline/ overline/ line-through</code>，分別是 <code>無作用/ 底線/ 上划線/ 刪除線</code>。<br>
<code>none</code> 可以使用在去除超連結自動加上的底線，使用 text-decoration: none 可將底線去除。</p>
<hr>
<h3 id="利用-line-hight-來達成垂直置中">利用 line-hight 來達成垂直置中</h3>
<p>把行距與元素高度調成一致來達成垂直置中，僅適用於文字只有一行時。<br>
<img src="https://imgur.com/AC3wncG.png" alt=""></p>
<h3 id="利用-padding-來達成垂直置中">利用 padding 來達成垂直置中</h3>
<p>或是單純利用 padding 把元素的邊框與內容撐開，可用於多行。<br>
<img src="https://imgur.com/Lmw58fy.png" alt=""></p>
<hr>
<h2 id="文字斷行">文字斷行</h2>
<h3 id="word-break">word-break</h3>
<p>設定字串斷行的時機，屬性值常用的有三個：</p>
<ul>
<li>normal：CJK(即 Chinese/Japanese/Koean，中日韓) 文本插入斷行，其它文本不插入斷行</li>
<li>break-all：所有文本都會插入斷行</li>
<li>keep-all：所有文本都不會插入斷行<br>
<img src="https://imgur.com/DQFnW1A.png" alt=""></li>
</ul>
<h3 id="word-wrap">word-wrap</h3>
<p>基本上和 word-break 一樣是設定字串換行，常用的屬性值：<br>
normal：不會在非 CJK 單詞中插入斷行<br>
break-word: 會在單詞中插入斷行避免溢出<br>
<img src="https://imgur.com/anF6t5j.png" alt=""></p>
<h3 id="word-break-word-wrap-的差別">word-break &amp; word-wrap 的差別</h3>
<p><img src="https://imgur.com/pTdP4xW.png" alt=""><br>
word-break: break-all 值如其名，斷開一切，利用上每一塊可以利用的空間來塞下文本，避免鋪張浪費；而 word-wrap: word-break 則收斂許多，假如一行文字有可以換行的點，如標點、CJK 文本等，那麼就不會在英文單詞或者字符中插入斷行了，不過從顯示效果來說的話則容易一塊兒密集、一塊兒空白，較不美觀。</p>
<h3 id="white-space">white-space</h3>
<p>在 word-break, word-wrap 什麼都沒設的情況下，white-space 就有預設值 normal，會幫我們自動換行。如果要取消換行的話則屬性值輸入 <code>nowrap</code>.<br>
<img src="https://imgur.com/xvTH4VL.png" alt=""></p>
<hr>
<h3 id="overflow">overflow</h3>
<p>針對超出元素範圍的內容作處理，屬性值有：</p>
<ul>
<li>visible：就給他超出去，default 值。</li>
<li>hidden：把超出的部分隱藏</li>
<li>scroll：多出 scroll bar 捲動多出來的部分</li>
<li>auto：由瀏覽器自動選擇，一旦超出範圍則自動變 scroll bar</li>
<li>inherit：繼承父元素的屬性值</li>
</ul>
<h3 id="text-overflow">text-overflow</h3>
<p>針對超出元素範圍的字串做處理，屬性值有：</p>
<ul>
<li>ellipsis：用 <code>...</code> 來取代多餘的字串</li>
<li>clipe：將超出範圍的字切斷</li>
<li>字串：使用指定字串來取代多餘的字串</li>
</ul>
<div class="warning">
<p>請注意</p>
<ol>
<li>要使用 text-overflow: ellipsis 的先決條件是要先設置 white-space:wrap &amp; overflow:hidden;</li>
<li>overflow 用的範圍比較廣，text-overflow 就僅針對文字而已。</li>
</ol>
</div>
<p><img src="https://imgur.com/gILIjIx.gif" alt=""></p>
<hr>
<h3 id="列表樣式">列表樣式</h3>
<h4 id="list-style-position">list-style-position</h4>
<p>可以用的參數值有 <code>inside/ outside</code>，<br>
inside 指項目符號在 <code>&lt;li&gt;&lt;/li&gt;</code> 標籤範圍之內。<br>
outside 指項目符號在 <code>&lt;li&gt;&lt;/li&gt;</code> 標籤範圍之外，為預設值。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">style</span>=<span class="string">&quot;list-style-position:inside;&quot;</span>&gt;</span></span><br><span class="line">　<span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;border:1px #cccccc solid&quot;</span>&gt;</span>Test list style position inside.<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">　<span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;border:1px #cccccc solid&quot;</span>&gt;</span>Test list style position inside.<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">style</span>=<span class="string">&quot;list-style-position:outside;&quot;</span>&gt;</span></span><br><span class="line">　<span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;border:1px #cccccc solid&quot;</span>&gt;</span>Test list style position outside.<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">　<span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;border:1px #cccccc solid&quot;</span>&gt;</span>Test list style position outside.<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul style="list-style-position:inside;">
　<li style="border:1px #cccccc solid">Test list style position inside.</li>
　<li style="border:1px #cccccc solid">Test list style position inside.</li>
</ul>
<ul style="list-style-position:outside;">
　<li style="border:1px #cccccc solid">Test list style position outside.</li>
　<li style="border:1px #cccccc solid">Test list style position outside.</li>
</ul>
<h4 id="list-style-type">list-style-type</h4>
<p>常用的屬性值如下表：</p>
<table><tr class="Line"><td bgcolor="#eeeeee" width="160"><b>參數</b><br></td><td bgcolor="#eeeeee"><b>定義</b><br></td></tr><tr class="Line"><td bgcolor="#eeeeee">none<br></td><td>不顯示符號<br></td></tr><tr class="Line"><td bgcolor="#eeeeee">disc<br></td><td>實心圓形<br></td></tr><tr class="Line"><td bgcolor="#eeeeee">circle<br></td><td>空心圓形<br></td></tr><tr class="Line"><td bgcolor="#eeeeee">square<br></td><td>實心正方形<br></td></tr><tr class="Line"><td bgcolor="#eeeeee">lower-alpha<br></td><td>小寫英文字母<br></td></tr><tr class="Line"><td bgcolor="#eeeeee">upper-alpha<br></td><td>大寫英文字母<br></td></tr><tr class="Line"><td bgcolor="#eeeeee">decimal</td><td>阿拉伯數字</td></tr><tr class="Line"><td bgcolor="#eeeeee">decimal-leading-zero</td><td>十進位制的阿拉伯數字，前方自動補零</td></tr></table>
<h4 id="list-style">list-style</h4>
<p>可以直接使用 <code>list-style</code> 簡化表示上面兩個屬性，例如 <code>list-style: circle inside;</code>。</p>
<h5 id="Reference">Reference</h5>
<p>[1]<a href="https://www.w3school.com.cn/">https://www.w3school.com.cn/</a><br>
[2]<a href="http://www.webtech.tw/">http://www.webtech.tw/</a><br>
[3]<a href="https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/655483/">https://codertw.com/程式語言/655483/</a></p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>[CSS] 移入轉換文字內容</title>
    <url>/CSS-nav-practice/</url>
    <content><![CDATA[<p>移入轉換其實很簡單，不需要算什麼正負位移，只要利用 display: none 屬性就可以輕鬆達成。先來看完成的範例：</p>
<span id="more"></span>
<head>
<style>
.nav2{
    width: 600px;
    height: 20px;
    margin: 0px auto;
    border-bottom: 8px red solid;
    padding-left: 10px;
}
.nav2 a{
    height: 20px;
    width: 80px;
    float: left;
    margin-right: 1px;
    text-decoration: none;
    text-align: center;
    background: rgb(223,223,223);
}
.nav2 a .en{
    display: block;
    color: black;
    font-size: 10px;
    line-height: 20px;
}
.nav2 a .cn{
    display: none;
    color: black;
    font-size: 10px;
    line-height: 20px;
}
.nav2 a:hover{
    background: red;
}
.nav2 a:hover .en{
    display: none;
    color: white;
}
.nav2 a:hover .cn{
    display: block;
    color:white;
}
</style>
</head>
<div class="nav2">
    <a href="#"><span class="en">Home</span><span class="cn">首頁</span></a>
    <a href="#"><span class="en">About</span><span class="cn">關於</a>
    <a href="#"><span class="en">Services</span><span class="cn">服務</a>
    <a href="#"><span class="en">Clients</span><span class="cn">客戶</a>
    <a href="#"><span class="en">Contact</span><span class="cn">聯絡</span></a>
</div>
<br>
<p>代碼如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.nav2</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">916px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">margin</span>: <span class="number">0px</span> auto;</span></span><br><span class="line"><span class="css">                <span class="attribute">border-bottom</span>: <span class="number">8px</span> red solid;</span></span><br><span class="line"><span class="css">                <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.nav2</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">                <span class="attribute">margin-right</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="css">                <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">                <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">223</span>,<span class="number">223</span>,<span class="number">223</span>);</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.nav2</span> <span class="selector-tag">a</span> <span class="selector-class">.en</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">                <span class="attribute">color</span>: black;</span></span><br><span class="line"><span class="css">                <span class="attribute">font-size</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">line-height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.nav2</span> <span class="selector-tag">a</span> <span class="selector-class">.cn</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">                <span class="attribute">color</span>: black;</span></span><br><span class="line"><span class="css">                <span class="attribute">font-size</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">line-height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.nav2</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">			&lt;!-- 在游標移入時 <span class="selector-class">.en</span> 的樣式 --&gt;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.nav2</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.en</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">                <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">			&lt;!-- 在游標移入時 <span class="selector-class">.cn</span> 的樣式 --&gt;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.nav2</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.cn</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">                <span class="attribute">color</span>:white;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav2&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 利用兩個標籤轉換不同文字 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;en&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;cn&quot;</span>&gt;</span>首頁<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;en&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;cn&quot;</span>&gt;</span>關於<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;en&quot;</span>&gt;</span>Services<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;cn&quot;</span>&gt;</span>服務<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;en&quot;</span>&gt;</span>Clients<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;cn&quot;</span>&gt;</span>客戶<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;en&quot;</span>&gt;</span>Contact<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;cn&quot;</span>&gt;</span>聯絡<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Frontend</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>[CSS] overflow 應用</title>
    <url>/CSS-overflow-usecase/</url>
    <content><![CDATA[<h2 id="Margin-重疊">Margin 重疊</h2>
<span id="more"></span>
<h3 id="狀況一">狀況一</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">		<span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">			<span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">			<span class="attribute">margin</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">			<span class="attribute">background</span>: pink;</span></span><br><span class="line"><span class="css">		&#125;</span></span><br><span class="line"><span class="css">		<span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">			<span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">			<span class="attribute">margin</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">			<span class="attribute">background</span>: lightblue;</span></span><br><span class="line"><span class="css">		&#125;</span></span><br><span class="line"><span class="css">	</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">sclass</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<div style="width:100px;height:100px;margin:30px;background:pink"></div>
<div style="width:100px;height:100px;margin:50px;background:lightblue"></div>
<p>可以發現到兩個 div 雖然都有設 margin，但兩者間的間距僅有 50px，是因為當上下都有 margin 時，會取最大的那個值。</p>
<h3 id="狀況二">狀況二</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">		<span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">			<span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">			<span class="attribute">background</span>: pink;</span></span><br><span class="line"><span class="css">		&#125;</span></span><br><span class="line"><span class="css">		<span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">			<span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">			<span class="attribute">margin</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">			<span class="attribute">background</span>: lightblue;</span></span><br><span class="line"><span class="css">		&#125;</span></span><br><span class="line"><span class="css">	</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">sclass</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以發現在子標籤中加上 margin，會連帶父標籤受影響。解決方式是在父標籤加上 <code>overflow: hidden;</code> 的屬性。</p>
<div style="width:100px;height:100px;background:pink;overflow: hidden;">
    <div style="width:50px;height:50px;background:lightblue;margin:20px"></div>
</div>
<hr>
<h3 id="當要顯示的列表不想超出既定範圍時-新聞、消息列表">當要顯示的列表不想超出既定範圍時(新聞、消息列表)</h3>
<p>一般什麼樣式都沒指定的狀況下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">		<span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">			<span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">			<span class="attribute">background</span>: salmon;</span></span><br><span class="line"><span class="css">		&#125;</span></span><br><span class="line"><span class="css">	</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>這是一個超出範圍的很長很長很長很長很長的範例文字<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>這是一個超出範圍的很長很長很長很長很長的範例文字<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>這是一個超出範圍的很長很長很長很長很長的範例文字<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul style="width:200px;height:100px;background:salmon;">
    <li>這是一個超出範圍的很長很長很長很長很長的範例文字</li>
    <li>這是一個超出範圍的很長很長很長很長很長的範例文字</li>
    <li>這是一個超出範圍的很長很長很長很長很長的範例文字</li>
</ul>
<br />
<br />
<br />
<br />
<br />
<br />
<p>將 li 也設置寬度，利用 <code>white-space: nowrap</code> 讓文字不換行、<code>overflow: hidden;</code> 將超出框的部分隱藏、<code>text-overflow: ellipsis;</code> 將超出框的部分用 <code>...</code> 取代：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">		<span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">			<span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">			<span class="attribute">background</span>: salmon;</span></span><br><span class="line"><span class="css">		&#125;</span></span><br><span class="line"><span class="css">		<span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="css">			hite-space:nowrap;</span></span><br><span class="line"><span class="css">			<span class="attribute">overflow</span>:hidden;</span></span><br><span class="line"><span class="css">			<span class="attribute">text-overflow</span>:ellipsis;</span></span><br><span class="line"><span class="css">		&#125;</span></span><br><span class="line"><span class="css">	</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>這是一個超出範圍的很長很長很長很長很長的範例文字<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>這是一個超出範圍的很長很長很長很長很長的範例文字<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>這是一個超出範圍的很長很長很長很長很長的範例文字<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul style="width:200px;height:100px;background:salmon;">
    <li style="width:200px; white-space:nowrap; overflow:hidden; text-overflow:ellipsis;">這是一個超出範圍的很長很長很長很長很長的範例文字</li>
    <li style="width:200px; white-space:nowrap; overflow:hidden; text-overflow:ellipsis;">這是一個超出範圍的很長很長很長很長很長的範例文字</li>
    <li style="width:200px; white-space:nowrap; overflow:hidden; text-overflow:ellipsis;">這是一個超出範圍的很長很長很長很長很長的範例文字</li>
</ul>
<p>另外用了 <code>overflow: hidden;</code> 會影響 list-style，即當 ul 中的 li 的 overflow 為 hidden 的時候， list-style 不起作用，不會顯示前面的點、圈等樣式。解決辦法是在ul 或 li 內加入屬性 <code>list-style-position: inside;</code> 即可。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">		<span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">			<span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">			<span class="attribute">background</span>: salmon;</span></span><br><span class="line"><span class="css">		&#125;</span></span><br><span class="line"><span class="css">		<span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="css">			hite-space:nowrap;</span></span><br><span class="line"><span class="css">			<span class="attribute">overflow</span>:hidden;</span></span><br><span class="line"><span class="css">			<span class="attribute">text-overflow</span>:ellipsis;</span></span><br><span class="line"><span class="css">			<span class="attribute">list-style-position</span>: inside;</span></span><br><span class="line"><span class="css">		&#125;</span></span><br><span class="line"><span class="css">	</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>這是一個超出範圍的很長很長很長很長很長的範例文字<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>這是一個超出範圍的很長很長很長很長很長的範例文字<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>這是一個超出範圍的很長很長很長很長很長的範例文字<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul style="width:200px;height:100px;background:salmon;">
    <li style="width:200px; white-space:nowrap; overflow:hidden; text-overflow:ellipsis; list-style-position:inside;">這是一個超出範圍的很長很長很長很長很長的範例文字</li>
    <li style="width:200px; white-space:nowrap; overflow:hidden; text-overflow:ellipsis; list-style-position:inside;">這是一個超出範圍的很長很長很長很長很長的範例文字</li>
    <li style="width:200px; white-space:nowrap; overflow:hidden; text-overflow:ellipsis; list-style-position:inside;">這是一個超出範圍的很長很長很長很長很長的範例文字</li>
</ul>]]></content>
      <categories>
        <category>Frontend</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>[CSS] padding &amp; margin</title>
    <url>/CSS-padding-margin/</url>
    <content><![CDATA[<h2 id="Padding">Padding</h2>
<p>設定定義元素邊框與元素內容間的距離。</p>
<span id="more"></span>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* style.css */</span></span><br><span class="line"><span class="selector-id">#box1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: palegreen;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">30px</span>;　<span class="comment">/* 或填百分比 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以發現 box1 元素的字距離邊框有 30px 的邊距<br>
<img src="https://imgur.com/ZvShxcR.png" alt=""></p>
<h3 id="其他寫法">其他寫法</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">padding: 30px;</span><br></pre></td></tr></table></figure>
<ul>
<li>padding 四個邊都是 30px。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">padding: 25px 50px 75px 100px; </span><br></pre></td></tr></table></figure>
<ul>
<li>上填充為25px</li>
<li>右填充為50px</li>
<li>下填充為75px</li>
<li>左填充為100px</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">padding:25px 50px 75px; </span><br></pre></td></tr></table></figure>
<ul>
<li>上填充為25px</li>
<li>左右填充為50px</li>
<li>下填充為75px</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">padding:25px 50px; </span><br></pre></td></tr></table></figure>
<ul>
<li>上下填充為25px</li>
<li>左右填充為50px</li>
</ul>
<p>另外有針對四個邊的獨立寫法：</p>
<ul>
<li>padding-top：上方的內距</li>
<li>padding-right：右方的內距</li>
<li>padding-bottom：下方的內距</li>
<li>padding-left：左方的內距<br>
四個屬性可以單獨使用也可以混搭使用。</li>
</ul>
<h2 id="Margin">Margin</h2>
<p>設定元素邊框與外面的距離。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* style.css */</span></span><br><span class="line"><span class="selector-id">#box2</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: cadetblue;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span>;　<span class="comment">/* 或填 auto 自動調整 或 百分比 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/d168nEq.png" alt=""></p>
<h3 id="其他寫法-2">其他寫法</h3>
<p>margin 的其他寫法與 padding 完全相同。</p>
<ul>
<li>margin-top：設置元素的上外邊距。</li>
<li>margin-right：設置元素的右外邊距。</li>
<li>margin-left：設置元素的左外邊距。</li>
<li>margin-bottom：設置元素的下外邊距。<br>
針對單一的 <code>margin</code> 屬性也可以設 <code>一個到四個</code> 的值。</li>
</ul>
<h3 id="瀏覽器自動建的-margin">瀏覽器自動建的 margin</h3>
<p>瀏覽器會自動幫我們內建 body 的 margin，如下圖所標示<br>
<img src="https://imgur.com/MibFlen.png" alt=""><br>
此時只要在 css 中加入 body 的 selector，並把 <code>margin</code> 設成零就可以把邊框消除了。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* style.css */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/6S4pUl0.png" alt=""></p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>[CSS] transition + :hover 做一個有質感的 button</title>
    <url>/CSS-transition/</url>
    <content><![CDATA[<h2 id="transition">transition</h2>
<p>加上漸變效果，可以放慢某一個元素轉換效果的時間，增加質感。語法如下：<br>
<code>transition: [property] [duration] [timing-function] [delay];</code></p>
<span id="more"></span>
<ul>
<li>
<p>property：指定 css 屬性的名稱，all 代表全部，並非所有的 css 屬性都可以使用，可動畫屬性<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties">清單</a>。</p>
</li>
<li>
<p>duration：transition 效果的持續時間。</p>
</li>
<li>
<p>timing-function：指定效果的轉速曲線，可使用數值如下：</p>
<ul>
<li>ease</li>
<li>linear</li>
<li>ease-in</li>
<li>ease-out</li>
<li>ease-in-out</li>
<li>step-start</li>
<li>step-end</li>
<li>steps()</li>
<li>cubic-bezier()<br>
可以透過開發人員工具查看並拖曳曲線<br>
<img src="https://imgur.com/5MLqxUV.gif" alt=""></li>
</ul>
</li>
<li>
<p>delay：定義多久之後開始發生 transition。</p>
</li>
</ul>
<hr>
<p>以下是沒有加上 transition 的畫面</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#box1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: lightgrey;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#box1</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: darkcyan;</span><br><span class="line">  <span class="attribute">color</span>: white</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<head>
  <style>
    #box1 {
      background: lightgrey;
      width: 200px;
      height: 100px;
    }
    #box1:hover {
      background: darkcyan;
      color: white
    }
  </style>
</head>
<body>
  <div id="box1">
    box1
  </div>
</body>
<hr>
<p>接著來看加上 transition 的變化：<br>
<code>transition: all 1s;</code> 第一個屬性值 all 代表對所有屬性作用，第二個值代表欲轉換的秒數。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#box1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: lightgrey;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#box1</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: darkcyan;</span><br><span class="line">  <span class="attribute">color</span>: white</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<head>
  <style>
    #box2 {
      background: lightgrey;
      width: 200px;
      height: 100px;
      transition: all 1s;
    }
    #box2:hover {
      background: darkcyan;
      color: white
    }
  </style>
</head>
<body>
  <div id="box2">
    box1
  </div>
</body>
<hr>
<p>做一個有質感的 button</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    <span class="selector-id">#box1</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">text-align</span>: center;</span><br><span class="line">      <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">30px</span>;</span><br><span class="line">      <span class="attribute">transition</span>: all <span class="number">0.5s</span>;</span><br><span class="line">      <span class="attribute">color</span>: black;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">3px</span> solid darkcyan;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-id">#box1</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">      <span class="attribute">background</span>: darkcyan;</span><br><span class="line">      <span class="attribute">color</span>: white;</span><br><span class="line">      <span class="attribute">cursor</span>: point;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">div</span> id=&quot;box1&quot;&gt;</span><br><span class="line">    box1</span><br><span class="line">  &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure>
<head>
  <style>
    #box3 {
      width: 200px;
      height: 100px;
      text-align: center;
      line-height: 100px;
      border-radius: 30px;
      transition: all 0.5s;
      color: black;
      border: 3px solid darkcyan;
    }
    #box3:hover {
      background: darkcyan;
      color: white;
      cursor: point;
    }
  </style>
</head>
<body>
  <div id="box3">
    box1
  </div>
</body>
<h6 id="Reference">Reference</h6>
<p>[1] <a href="https://lidemy.com/courses/390445">https://lidemy.com/courses/390445</a><br>
[2] <a href="https://eyesofkids.gitbooks.io/css3/content/contents/transitions.html">https://eyesofkids.gitbooks.io/css3/content/contents/transitions.html</a><br>
[3] <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function">https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function</a></p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>transition</tag>
      </tags>
  </entry>
  <entry>
    <title>[CSS] 將重複邊框重疊</title>
    <url>/CSS-%E9%87%8D%E7%96%8A%E9%82%8A%E6%A1%86/</url>
    <content><![CDATA[<p>當兩個 inline-block 元素或是 具有 float 屬性的元素放在同一行時，<strong>左邊元素的右邊邊框與右邊元素的左邊邊框會貼在一起</strong>，導致原本想設計成 4px 的邊框變成 8px，如下範例；</p>
<span id="more"></span>
<ul style="height: 96px; width: 136px; margin: 10px auto; padding:0px;">
	<li style="width: 60px; height: 40px; float: left; list-style: none; border: 4px pink solid; padding: 0px;"></li>
	<li style="width: 60px; height: 40px; float: left; list-style: none; border: 4px lightblue solid; padding: 0px;"></li>
	<li style="width: 60px; height: 40px; float: left; list-style: none; border: 4px pink solid; padding: 0px;"></li>
	<li style="width: 60px; height: 40px; float: left; list-style: none; border: 4px lightblue solid; padding: 0px;"></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">	<span class="selector-class">.outter</span>&#123;</span></span><br><span class="line"><span class="css">		<span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">		<span class="attribute">width</span>: <span class="number">180px</span>;</span></span><br><span class="line"><span class="css">		<span class="attribute">background</span>: white;</span></span><br><span class="line"><span class="css">		<span class="attribute">margin</span>: <span class="number">20px</span> auto;</span></span><br><span class="line"><span class="css">		<span class="attribute">border</span>: <span class="number">1px</span> black solid;</span></span><br><span class="line"><span class="css">	&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">	<span class="selector-class">.inner</span>&#123;</span></span><br><span class="line"><span class="css">		<span class="attribute">width</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="css">		<span class="attribute">height</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="css">		<span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">		<span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="css">		<span class="attribute">border</span>: <span class="number">4px</span> black solid;</span></span><br><span class="line"><span class="css">	&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outter&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="解決方法">解決方法</h2>
<p>設定 margin 屬性為邊框值的相反數，就可以把重疊的部分邊框隱藏起來（被覆蓋），讓邊框以單線的形式顯示，比如重複的地方是右邊跟下邊，那就把 margin-right &amp; margin-bottom 位移 -4px。。</p>
<ul style="height: 92px; width: 132px; margin: 10px auto; padding:0px;">
	<li style="width: 60px; height: 40px; float: left; list-style: none; border: 4px pink solid; padding: 0px; margin: 0px -4px -4px 0px;"></li>
	<li style="width: 60px; height: 40px; float: left; list-style: none; border: 4px lightblue solid; padding: 0px; margin: 0px -4px -4px 0px;"></li>
	<li style="width: 60px; height: 40px; float: left; list-style: none; border: 4px pink solid; padding: 0px; margin: 0px -4px -4px 0px;"></li>
	<li style="width: 60px; height: 40px; float: left; list-style: none; border: 4px lightblue solid; padding: 0px; margin: 0px -4px -4px 0px;"></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">	<span class="selector-class">.outter</span>&#123;</span></span><br><span class="line"><span class="css">		<span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">		<span class="attribute">width</span>: <span class="number">180px</span>;</span></span><br><span class="line"><span class="css">		<span class="attribute">background</span>: white;</span></span><br><span class="line"><span class="css">		<span class="attribute">margin</span>: <span class="number">20px</span> auto;</span></span><br><span class="line"><span class="css">		<span class="attribute">border</span>: <span class="number">1px</span> black solid;</span></span><br><span class="line"><span class="css">	&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">	<span class="selector-class">.inner</span>&#123;</span></span><br><span class="line"><span class="css">		<span class="attribute">width</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="css">		<span class="attribute">height</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="css">		<span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">		<span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="css">		<span class="attribute">border</span>: <span class="number">4px</span> black solid;</span></span><br><span class="line"><span class="css">		<span class="comment">/* 邊框處理 */</span></span></span><br><span class="line"><span class="css">		<span class="attribute">margin</span>: <span class="number">0px</span> -<span class="number">4px</span> -<span class="number">4px</span> <span class="number">0px</span>;</span></span><br><span class="line"><span class="css">	&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outter&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Frontend</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>[CSS] 垂直置中問題</title>
    <url>/CSS-%E5%9E%82%E7%9B%B4%E7%BD%AE%E4%B8%AD%E5%95%8F%E9%A1%8C/</url>
    <content><![CDATA[<p>一般在盒內文字想達成垂直置中的效果我們使用 <code>line-height</code> 將高度設置與父元素一樣即可</p>
<span id="more"></span>
<div style="width:50px; height:50px; background: lightpink; line-height: 50px; text-align:center;">hello</div>
<br>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width:50px; height:50px; background: lightpink; line-height: 50px; text-align:center;&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>但如果遇到多行文字、圖片或其他元素，我們就需要使用 padding 或是 margin 來調整；</p>
<div style="width:100px; height:100px; background: lightpink;overflow:hidden;">
  <div style="width:40px; height:40px; background: lightblue; margin: 30px;"></div>
</div>
<br>
<div style="width:40px; height:40px; background: lightpink;padding:30px;">
  <div style="width:40px; height:40px; background: lightblue;"></div>
</div>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- margin --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width:100px; height:100px; background: lightpink;overflow:hidden;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width:40px; height:40px; background: lightblue; margin: 30px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- padding --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width:40px; height:40px; background: lightpink;padding:30px;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width:40px; height:40px; background: lightblue;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
不過此時會遇到的問題是 --- 當頁面中的父級元素改變高度時，其先前設的子元素垂直置中的效果就必須重設。
<h3 id="解決方式-使用-vertical-align">解決方式 - 使用 vertical-align</h3>
<p>首先 vertical-align 的使用概念是針對兩個擁有 inline 或是 inline-block 的元素保持垂直置中，舉例如下:</p>
<img src="https://imgur.com/EgdquWK.png" style="height: 150px;">
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image.jpg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height:150px; vertical-align:middle;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;vertical-align:middle;&quot;</span>&gt;</span>I&#x27;m a fun guy.<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我們會利用這個概念來解決上面問題</p>
<p>在欲垂直置中的子元素旁我們要建一個沒有寬度、高度與父元素同等的標籤，就能以此為對齊基準在父元素中垂直置中了。</p>
<p><img src="https://imgur.com/0Xijpi0.png" alt=""></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>:<span class="number">400px</span>; </span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>:<span class="number">300px</span>; </span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>:lightyellow; </span></span><br><span class="line"><span class="css">      <span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">div</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">display</span>:inline-block;</span></span><br><span class="line"><span class="css">      <span class="attribute">vertical-align</span>:middle;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>:<span class="number">100%</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">div</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">vertical-align</span>:middle; </span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image.jpg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="常見範例">常見範例</h3>
<p>排列式商品頁面中的商品圖片不見得一致，此時這個方法就派上用場了，範例以及代碼如下；</p>
<p><img src="https://imgur.com/wTXfaf9.png" alt=""></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            *&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">margin</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">padding</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">608px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">506px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.box</span> <span class="selector-tag">dl</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">                <span class="attribute">border</span>: <span class="number">2px</span> grey dotted;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">margin</span>: <span class="number">0px</span> -<span class="number">2px</span> -<span class="number">2px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            </span></span><br><span class="line"><span class="css">            <span class="selector-class">.box</span> <span class="selector-tag">dl</span> <span class="selector-tag">dt</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">180px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.box</span> <span class="selector-tag">dl</span> <span class="selector-tag">dt</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="css">                <span class="attribute">vertical-align</span>: middle;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.box</span> <span class="selector-tag">dl</span> <span class="selector-tag">dt</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="css">                <span class="attribute">vertical-align</span>: middle;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.box</span> <span class="selector-tag">dl</span> <span class="selector-tag">dd</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.item</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.price</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">color</span>: darkred;</span></span><br><span class="line"><span class="css">                <span class="attribute">font-family</span>: Arial, Helvetica, sans-serif;</span></span><br><span class="line"><span class="css">                <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            </span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dt</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;bread1.PNG&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dd</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>溫莎麵包<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;price&quot;</span>&gt;</span>NTD$ 50<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dt</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;bread2.PNG&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dd</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>法國香頌<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;price&quot;</span>&gt;</span>NTD$ 55<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dt</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;bread3.PNG&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dd</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>大菠蘿<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;price&quot;</span>&gt;</span>NTD$ 45<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dt</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;bread4.PNG&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dd</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>巧克粒圈<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;price&quot;</span>&gt;</span>NTD$ 45<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dt</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;bread5.PNG&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dd</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>花生什麼事<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;price&quot;</span>&gt;</span>NTD$ 40<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dt</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;bread6.PNG&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dd</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>桂圓三兄弟<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;price&quot;</span>&gt;</span>NTD$ 55<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Frontend</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>[CentOS] Crash Analysis (kexec &amp; kdump)</title>
    <url>/CentOS-Crash-Analysis-kexec-kdump/</url>
    <content><![CDATA[<h2 id="原理">原理</h2>
<p><code>kexec</code>（kernel execution）是 Linux 核心的一種機制，允許從當前執行的核心啟動新核心。kexec 會繞過系統韌體 (BIOS or UEFI) 的初始化，並直接將新核心載入到主記憶體執行，可以實現系統的快速重啟。</p>
<span id="more"></span>
<p><code>kdump</code> 是一種基於 kexec 實現的<strong>核心崩潰轉儲技術</strong>。當系統崩潰時，kdump 使用 kexec 啟動另一個核心並獲得記憶體轉儲，並使用它來匯出和儲存記憶體轉儲來保持系統一致性，最終會匯出一個記憶體映像（也稱為 vmcore），該映像可用於除錯和確定崩潰的原因。</p>
<p><img src="https://imgur.com/qVB7Gv4.png" alt=""></p>
<p><code>crash</code> 是一個被廣泛應用的核心崩潰轉儲檔案分析工具，可以通過 crash 分析 vmcore 檔案以分析出核心崩潰的原因。</p>
<h2 id="安裝">安裝</h2>
<h3 id="1-檢視系統核心">1. 檢視系統核心</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm2 ~]<span class="comment"># uname  -r</span></span><br><span class="line">3.10.0-1127.el7.x86_64</span><br></pre></td></tr></table></figure>
<p>另外說明一下目前使用的 CentOS 版本為 7.9</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm2 ~]<span class="comment"># cat /etc/centos-release</span></span><br><span class="line">CentOS Linux release 7.9.2009 (Core)</span><br></pre></td></tr></table></figure>
<h3 id="2-安裝-kexec-crash">2. 安裝 kexec &amp; crash</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install crash kexec-tools -y</span><br></pre></td></tr></table></figure>
<p>kdump 通常在安裝 CentOS 時就會預設開啟了</p>
<p><img src="https://imgur.com/3tNR6NA.png" alt=""></p>
<div class="info">
<ul>
<li>網路上有些教學會寫需要修改 grub 的 crashkernel 預留記憶體大小、以及更新 kdump.conf 配置，但也可以不配置、不更新；皆保持預設。</li>
<li>在 Linux 4.15 中預設使用 <code>crashkernel=auto</code>，kernel 將通過 memblock_find_in_range 自動計算核心的記憶體大小和起始位置，但是有些核心可能不支持，需要手動指定。</li>
<li>如果要自己手動設定，可參考<a href="https://www.linuxtechi.com/how-to-enable-kdump-on-rhel-7-and-centos-7/">這篇教學</a></li>
</ul>
</div>
<h3 id="3-安裝-kernel-debuginfo">3. 安裝 kernel-debuginfo</h3>
<p>使用 crash 除錯核心轉儲檔案，需要安裝 crash 工具和核心除錯工具 kernel-debuginfo。下載連結 <a href="http://debuginfo.centos.org/7/x86_64/">http://debuginfo.centos.org/7/x86_64/</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://debuginfo.centos.org/7/x86_64/kernel-debuginfo-common-x86_64-3.10.0-1127.el7.x86_64.rpm</span><br><span class="line">wget http://debuginfo.centos.org/7/x86_64/kernel-debuginfo-3.10.0-1127.el7.x86_64.rpm</span><br><span class="line">rpm -ivh kernel-debuginfo-3.10.0-1160.15.2.el7.x86_64.rpm kernel-debuginfo-common-x86_64-3.10.0-1160.15.2.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>
<h2 id="測試並使用-crash-分析-vmcore-報告">測試並使用 crash 分析 vmcore 報告</h2>
<h3 id="1-測試-kdump-是否有安裝成功">1.  測試 kdump 是否有安裝成功</h3>
<p>要測試 kdump 是否設定成功，最準確的方法就是產生一個 kernel crash，看看 kdump 是不是會捕捉到錯誤並產生 dump 檔。執行下面的指令，讓 kernel 立刻產生一個 crash：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;c&quot;</span> &gt; /proc/sysrq-trigger</span><br></pre></td></tr></table></figure>
<h3 id="2-系統重啟後，查看-vmcore-檔案">2. 系統重啟後，查看 vmcore 檔案</h3>
<p>進入 /var/crash 目錄，如果有看到接近現在時間的目錄，就代表剛剛刻意製造的 crash 有成功產生 kernel dump 了，目錄裡面的 vmcore 就是 kernel dump 檔：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm2 crash]<span class="comment"># cd /var/crash</span></span><br><span class="line">[root@kvm2 crash]<span class="comment"># ll</span></span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x.  4 root root  80 Feb  7 16:29 .</span><br><span class="line">drwxr-xr-x. 19 root root 267 Nov 16  2020 ..</span><br><span class="line">drwxr-xr-x.  2 root root  44 Feb  7 16:18 127.0.0.1-2021-04-14-03:24:39</span><br><span class="line">drwxr-xr-x.  2 root root  44 Feb  7 16:29 127.0.0.1-2022-02-07-16:29:37</span><br><span class="line">[root@kvm2 crash]<span class="comment"># cd 127.0.0.1-2022-02-07-16\:29\:37/</span></span><br><span class="line">[root@kvm2 127.0.0.1-2022-02-07-16:29:37]<span class="comment"># ll</span></span><br><span class="line">total 1116400</span><br><span class="line">drwxr-xr-x. 2 root root         44 Feb  7 16:29 .</span><br><span class="line">drwxr-xr-x. 4 root root         80 Feb  7 16:29 ..</span><br><span class="line">-rw-------. 1 root root 1143071638 Feb  7 16:29 vmcore</span><br><span class="line">-rw-r--r--. 1 root root     118713 Feb  7 16:29 vmcore-dmesg.txt</span><br></pre></td></tr></table></figure>
<h3 id="3-使用-crash-命令載入-vmcore-檔案">3.  使用 crash 命令載入 vmcore 檔案</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm2 127.0.0.1-2022-02-07-16:29:37]<span class="comment"># crash /usr/lib/debug/lib/modules/3.10.0-1127.el7.x86_64/vmlinux vmcore</span></span><br><span class="line"></span><br><span class="line">crash 7.2.3-11.el7_9.1</span><br><span class="line">Copyright (C) 2002-2017  Red Hat, Inc.</span><br><span class="line">Copyright (C) 2004, 2005, 2006, 2010  IBM Corporation</span><br><span class="line">Copyright (C) 1999-2006  Hewlett-Packard Co</span><br><span class="line">Copyright (C) 2005, 2006, 2011, 2012  Fujitsu Limited</span><br><span class="line">Copyright (C) 2006, 2007  VA Linux Systems Japan K.K.</span><br><span class="line">Copyright (C) 2005, 2011  NEC Corporation</span><br><span class="line">Copyright (C) 1999, 2002, 2007  Silicon Graphics, Inc.</span><br><span class="line">Copyright (C) 1999, 2000, 2001, 2002  Mission Critical Linux, Inc.</span><br><span class="line">This program is free software, covered by the GNU General Public License,</span><br><span class="line">and you are welcome to change it and/or distribute copies of it under</span><br><span class="line">certain conditions.  Enter <span class="string">&quot;help copying&quot;</span> to see the conditions.</span><br><span class="line">This program has absolutely no warranty.  Enter <span class="string">&quot;help warranty&quot;</span> <span class="keyword">for</span> details.</span><br><span class="line"></span><br><span class="line">GNU gdb (GDB) 7.6</span><br><span class="line">Copyright (C) 2013 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.  Type <span class="string">&quot;show copying&quot;</span></span><br><span class="line">and <span class="string">&quot;show warranty&quot;</span> <span class="keyword">for</span> details.</span><br><span class="line">This GDB was configured as <span class="string">&quot;x86_64-unknown-linux-gnu&quot;</span>...</span><br><span class="line"></span><br><span class="line">WARNING: kernel relocated [394MB]: patching 87167 gdb minimal_symbol values</span><br><span class="line"></span><br><span class="line">      KERNEL: /usr/lib/debug/lib/modules/3.10.0-1127.el7.x86_64/vmlinux</span><br><span class="line">    DUMPFILE: vmcore  [PARTIAL DUMP]</span><br><span class="line">        CPUS: 48</span><br><span class="line">        DATE: Mon Feb  7 16:29:31 2022</span><br><span class="line">      UPTIME: 01:43:46</span><br><span class="line">LOAD AVERAGE: 1.04, 1.28, 1.42</span><br><span class="line">       TASKS: 657</span><br><span class="line">    NODENAME: kvm2</span><br><span class="line">     RELEASE: 3.10.0-1127.el7.x86_64</span><br><span class="line">     VERSION: <span class="comment">#1 SMP Tue Mar 31 23:36:51 UTC 2020</span></span><br><span class="line">     MACHINE: x86_64  (2199 Mhz)</span><br><span class="line">      MEMORY: 255.9 GB</span><br><span class="line">       PANIC: <span class="string">&quot;SysRq : Trigger a crash&quot;</span></span><br><span class="line">         PID: 16442</span><br><span class="line">     COMMAND: <span class="string">&quot;bash&quot;</span></span><br><span class="line">        TASK: ffff926f7c1bd230  [THREAD_INFO: ffff926ca58b0000]</span><br><span class="line">         CPU: 10</span><br><span class="line">       STATE: TASK_RUNNING (SYSRQ)</span><br><span class="line"></span><br><span class="line">crash&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>解釋：</p>
<ul>
<li>KERNEL：系統崩潰時執行的 kernel 檔案</li>
<li>DUMPFILE： 核心轉儲檔案</li>
<li>CPUS： 所在機器的 CPU 數量</li>
<li>DATE：系統崩潰的時間</li>
<li>TASKS：系統崩潰時記憶體中的任務數</li>
<li>NODENAME：崩潰的系統主機名</li>
<li>RELEASE: 和 VERSION：核心版本號</li>
<li>MACHINE：CPU 架構</li>
<li>MEMORY：崩潰主機的實體記憶體</li>
<li>PANIC：崩潰型別，常見的崩潰型別包括：</li>
<li>SysRq (System Request)：通過魔法組合鍵導致的系統崩潰，通常是測試使用。通過 echo c &gt; /proc/sysrq-trigger，就可以觸發系統崩潰。</li>
<li>oops：可以看成是核心級的 Segmentation Fault。應用程式如果進行了非法記憶體訪問或執行了非法指令，會得到 Segfault 訊號，一般行為是 coredump，應用程式也可以自己截獲 Segfault 訊號，自行處理。如果核心自己犯了這樣的錯誤，則會彈出 oops 資訊。</li>
</ul>
<h2 id="Reference">Reference</h2>
<ul>
<li><a href="https://iter01.com/588761.html">https://iter01.com/588761.html</a></li>
<li><a href="https://winddoing.github.io/post/8229.html">https://winddoing.github.io/post/8229.html</a></li>
<li><a href="https://zh.wikipedia.org/">https://zh.wikipedia.org/</a></li>
<li><a href="https://www.if-not-true-then-false.com/">https://www.if-not-true-then-false.com/</a></li>
</ul>
]]></content>
      <categories>
        <category>OS</category>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>kdump</tag>
        <tag>kexec</tag>
      </tags>
  </entry>
  <entry>
    <title>Containerd (crictl) 配置私有鏡像倉庫</title>
    <url>/Containerd-crictl-configure-private-image-registry/</url>
    <content><![CDATA[<p>前幾天將 k8s 升級到 1.23 版，使用 containerd 當 CRI，立馬就遇到要拉取私有 image registry 的狀況，本文紀錄配置過程。</p>
<span id="more"></span>
<h3 id="配置-containerd-config-toml">配置 containerd config.toml</h3>
<p>依據遠端私有倉庫是否加密，有不同配置：</p>
<h4 id="私有倉庫帶有-tls-加密-https">- 私有倉庫帶有 tls 加密 (https)</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/containerd/config.toml</span><br></pre></td></tr></table></figure>
<p>在 <code>[plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirror]</code> 下加上私有倉庫位址/URL</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors.&quot;harbor.nexmasa.com&quot;]</span><br><span class="line">   endpoint = [&quot;https://harbor.nexmasa.com&quot;]</span><br></pre></td></tr></table></figure>
<p>另外再接著加上 <code>[plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.configs]</code> 的項目</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.configs]</span><br><span class="line">   [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.configs.&quot;harbor.nexmasa.com&quot;.tls]</span><br><span class="line">      ca_file   = &quot;/etc/containerd/harbor.nexmasa.com/ca.pem&quot;</span><br><span class="line">      cert_file = &quot;/etc/containerd/harbor.nexmasa.com/cert.pem&quot;</span><br><span class="line">      key_file  = &quot;/etc/containerd/harbor.nexmasa.com/key.pem&quot;</span><br><span class="line">   [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.configs.&quot;harbor.nexmasa.com&quot;.auth]</span><br><span class="line">      username = &quot;xxxxxx&quot;</span><br><span class="line">      password = &#x27;xxxxxx&#x27;</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/86AZK4p.png" alt=""></p>
<h4 id="私有倉庫無加密-http-或是想略過憑證檢查">- 私有倉庫無加密 (http) 或是想略過憑證檢查</h4>
<p>在 tls 配置項下，以 <code>insecure_skip_verify = true</code> 參數取代上面配置的金鑰及憑證。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.configs]</span><br><span class="line">   [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.configs.&quot;harbor.nexmasa.com&quot;.tls]</span><br><span class="line">      insecure_skip_verify = true</span><br></pre></td></tr></table></figure>
<h3 id="重啟-containerd">重啟 containerd</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart containerd</span><br></pre></td></tr></table></figure>
<p>查看配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">[<span class="string">root@node</span> <span class="string">~</span>]<span class="comment"># crictl info</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;status&quot;:</span> &#123;</span><br><span class="line">    <span class="attr">&quot;conditions&quot;:</span> [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;:</span> <span class="string">&quot;RuntimeReady&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;:</span> <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;reason&quot;:</span> <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;message&quot;:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;:</span> <span class="string">&quot;NetworkReady&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;:</span> <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;reason&quot;:</span> <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;message&quot;:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="attr">&quot;config&quot;:</span> &#123;</span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">.</span></span><br><span class="line">    <span class="attr">&quot;registry&quot;:</span> &#123;</span><br><span class="line">      <span class="attr">&quot;mirrors&quot;:</span> &#123;</span><br><span class="line">        <span class="attr">&quot;docker.io&quot;:</span> &#123;</span><br><span class="line">          <span class="attr">&quot;endpoint&quot;:</span> [</span><br><span class="line">            <span class="string">&quot;https://registry-1.docker.io&quot;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;harbor.nexmasa.com&quot;:</span> &#123;</span><br><span class="line">          <span class="attr">&quot;endpoint&quot;:</span> [</span><br><span class="line">            <span class="string">&quot;https://harbor.nexmasa.com&quot;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;configs&quot;:</span> &#123;</span><br><span class="line">        <span class="attr">&quot;harbor.nexmasa.com&quot;:</span> &#123;</span><br><span class="line">          <span class="attr">&quot;auth&quot;:</span> &#123;</span><br><span class="line">            <span class="attr">&quot;username&quot;:</span> <span class="string">&quot;xxxxx&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;password&quot;:</span> <span class="string">&quot;xxxxx&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;auth&quot;:</span> <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;identitytoken&quot;:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;tls&quot;:</span> &#123;</span><br><span class="line">            <span class="attr">&quot;insecure_skip_verify&quot;:</span> <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;caFile&quot;:</span> <span class="string">&quot;/etc/containerd/harbor.nexmasa.com/ca.pem&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;certFile&quot;:</span> <span class="string">&quot;/etc/containerd/harbor.nexmasa.com/cert.pem&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;keyFile&quot;:</span> <span class="string">&quot;/etc/containerd/harbor.nexmasa.com/key.pem&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;auths&quot;:</span> <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">&quot;headers&quot;:</span> <span class="literal">null</span></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>
<h3 id="測試">測試</h3>
<p>拉取鏡像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crictl pull harbor.nexmasa.com/test/hello-world@sha256:90659bf80b44ce6be8234e6ff90a1ac34acbeb826903b02cfa0da11c82cbc042</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/CPIvAP8.png" alt=""></p>
<h3 id="Reference">Reference</h3>
<ul>
<li><a href="https://github.com/containerd/containerd/blob/main/docs/cri/registry.md">https://github.com/containerd/containerd/blob/main/docs/cri/registry.md</a></li>
</ul>
]]></content>
      <categories>
        <category>DevOps</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Data Pipeline 意義、要解決什麼、應具備的功能</title>
    <url>/Data-Pipeline/</url>
    <content><![CDATA[<h2 id="意義">意義</h2>
<ul>
<li>數據管道（Data Pipeline）是一種允許數據通過數據分析過程<span style="background-color:#FCF3CF">從一個位置高效流向另一個位置的軟體，是處理資料流的系統。</span>這就好比一條傳送帶，它能高效、準確地將數據傳送到流程的每一步。</li>
</ul>
<span id="more"></span>
<ul>
<li><span style="background-color:#FCF3CF">數據管道是提取、轉換、合併、驗證、進一步分析數據和數據可視化的過程自動化。</span>通過消除錯誤並避免瓶頸和延遲，數據管道可提供端到端效率。</li>
<li>數據管道將所有數據視為流式數據，因此它們考慮了靈活的架構。無論數據來自靜態源還是實時源，<span style="background-color:#FCF3CF">數據管道都可以將數據流分割成更小的片段，以便並行處理，從而提升了計算能力。</span></li>
<li>ETL 是 Data Pipeline 的一部分，一條 Data Pipeline 可以是好幾段 ETL 的組合。 ETL 通常指資料的取、用、存這三個動作而已；而 Data Pipeline 除了 ETL 之外，也可包含執行 ETL 的系統。</li>
</ul>
<h2 id="要解決什麼">要解決什麼</h2>
<p>傳統使用 ETL tools 可能會遇到的痛點：</p>
<p><strong>問題1 ：</strong></p>
<p>使用的 RDS 類型多種多樣，有 ORALCE、SQL SERVER、MYSQL，甚至有 MONGODB。現在要進行大數據分析，如何整合這些數據庫的數據，到一個大數據平台進行數據分析？如何解決多個數據源數據獲取不及時造成數據獲取延遲？</p>
<p><strong>問題2：</strong></p>
<p>數據設計之初，沒有考慮ETL數據抽取的問題，所以數據沒有時間字段，如何在上百G的數據中抽取增量數據？</p>
<p><strong>問題3：</strong></p>
<p>面對業務部門多種需求，要求在業務獲得數據的1個小時內，將更新的業務數據傳遞到數據部門進行處理，並獲得 DATAVIEW。</p>
<p><strong>問題4：</strong></p>
<p>數據分析人員有的精通 T-SQL、有的擅長 PL/SQL，還有的只會JAVA ，你如何滿足這樣多種多樣的數據目的地需求？</p>
<p><strong>問題5：</strong></p>
<p>目前由於數據庫更新，將 ORACLE 數據庫替代，使用 PostgresQL 來代替 ORACLE。目前需要進行灰度發布(金絲雀發布)，ORACLE 和 POSTGRESQL 數據之間進行實時同步，當程序跑通，上線兩個禮拜後沒有問題，將 ORACLE 清除，如何做到？</p>
<p><strong>問題6：</strong></p>
<p>數據流是否能及時且一致的傳導到各種目的地，以進行分佈式的運算，同時數據必須在管道進行加工處理且須保證事件只能被處理一次，另外還要保留 raw data 對計算的數據進行驗證。也就是單點多傳、數據清洗、數據整理的要求，數據獲取不准確、數據提供的格式不對、數據提取對系統的負擔…，都可能是箇中問題。</p>
<h2 id="應具備的功能">應具備的功能</h2>
<ol>
<li>實時的數據流，將業務數據像水一樣的方式，通過水管順暢的流向各個目的端。</li>
<li>支持多種數據庫之間、數據庫與大數據產品之間的任意往來</li>
<li>方便快捷部署，能不在數據源端做任何安裝的數據獲取軟件</li>
<li>可參數化的數據管道，例如可指定提取、轉換和加載數據的開始日期。</li>
<li>針對不同的業務場景使用對應優化的數據結構。寫入場景要用到寫入優化的數據結構，而讀取場景要用到讀取優化的數據結構。</li>
<li>從數據庫底層而不是去用 SQL 來去提取數據，因為在數據生產的時候做處理，性能一定遠遠好過在用戶讀取的時候做處理。 ORACLE REDO、ARCHIVE、SQL SERVER CDC、MYSQL BINLOG、 POSTGRESQL WAL、MONGODB OPLOG 等就是由底層提取數據的方法。</li>
<li>存儲數據的中間狀態，以便可以重試上一次失敗的任務。在工作流中實現結果緩存的方法有很多，例如將中間數據存儲在Redis或某些臨時暫存區表中。如果使用諸如 <a href="https://docs.prefect.io/core/concepts/results.html#choose-a-result-type">Prefect</a> 之類的工作流工具，可以將任務結果以pickle、JSON或其他序列化形式，緩存到存儲系統中。</li>
<li>確保足夠小的單一組件大小，如果數據管道是一個工作流而不是一個腳本，則可以直接查看管道中的哪個任務失敗，然後只專注於修復單個損壞的任務即可。工作流中的組是小型且相互獨立的任務集合，這些任務按照特定順序且在特定時間運行，任務之間存在依存關係。</li>
<li>數據清洗，能在數據交換的過程中，還能做點數據的小變動，將不必要的數據，截止在數據的源端的工具。</li>
<li>元數據管理，用來管理整個用戶要用到的所有數據的數據的定義。於這個數據字典，實現一些可複用的數據邏輯。確保在各個系統裡都可以得到清晰一致的數據定義，減少溝通成本。</li>
<li>監控和通知，在數據管道出現故障時發送通知。有人使用 Pagerduty、Slack、Teams 或電子郵件。不管選擇什麼工具，建立一個便於檢查並糾正錯誤的系統至關重要。</li>
<li>統一的可視化管理頁面，提供平台級別的數據管理功能，包括產品權限、數據時效管理和安全管控等方面功能，為數據工程師、運維人員提供直觀的數據任務地圖，隨時可以洞悉數據的最新動態，極大提升運維工作效率和效益。</li>
<li>日誌、日誌、日誌！ last but not least，有了詳盡的日誌，才可容易找出問題在哪。</li>
</ol>
<h6 id="Reference">Reference</h6>
<ul>
<li><a href="https://medium.com/bryanyang0528/data-data-pipeline-101-%E4%B8%80-22654343e028">https://medium.com/bryanyang0528/data-data-pipeline-101-一-22654343e028</a></li>
<li><a href="https://baijiahao.baidu.com/s?id=1678064530655201694&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1678064530655201694&amp;wfr=spider&amp;for=pc</a></li>
<li><a href="https://read01.com/AzeKMAL.html">https://read01.com/AzeKMAL.html</a></li>
<li><a href="https://blog.csdn.net/YMPzUELX3AIAp7Q/article/details/103017422">https://blog.csdn.net/YMPzUELX3AIAp7Q/article/details/103017422</a></li>
<li><a href="https://blog.csdn.net/YMPzUELX3AIAp7Q/article/details/103017431">https://blog.csdn.net/YMPzUELX3AIAp7Q/article/details/103017431</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/72510621">https://zhuanlan.zhihu.com/p/72510621</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/337003493">https://zhuanlan.zhihu.com/p/337003493</a></li>
<li><a href="https://towardsdatascience.com/15-essential-steps-to-build-reliable-data-pipelines-58847cb5d92f">https://towardsdatascience.com/15-essential-steps-to-build-reliable-data-pipelines-58847cb5d92f</a></li>
</ul>
]]></content>
      <categories>
        <category>Big Data</category>
      </categories>
      <tags>
        <tag>datapipeline</tag>
        <tag>data pipeline</tag>
      </tags>
  </entry>
  <entry>
    <title>[Docker] Install Docker &amp; Docker Compose on Ubuntu18.04</title>
    <url>/Docker-Install-Docker-Docker-Compose-on-Ubuntu18-04/</url>
    <content><![CDATA[<p>官方 Ubuntu repository 中提供的 Docker 可能不是最新版本。 為確保獲得最新版本，本篇將從官方 Docker 存儲庫安裝。 為此，我們將添加一個新的 package source，從 Docker 中添加 GPG 密鑰以確保下載有效，然後安裝該程序包。</p>
<span id="more"></span>
<h2 id="安裝-Docker">安裝 Docker</h2>
<h3 id="更新-package-並匯入-docker-repo">更新 package 並匯入 docker repo</h3>
<p>先更新現有的 packages</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo apt update</span><br></pre></td></tr></table></figure>
<p>安裝需要用到的套件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo apt install apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure>
<p>將官方 docker repo 的 gpg 密鑰匯入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>
<p>將 docker 穩定版 repo 加到 apt source</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable&quot;</span><br></pre></td></tr></table></figure>
<p>再次更新 packages</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo apt update</span><br></pre></td></tr></table></figure>
<h3 id="安裝最新版或是指定版本">安裝最新版或是指定版本</h3>
<ul>
<li>安裝最新版</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>
<ul>
<li>安裝指定版本<br>
a. 列出 repo 中所有可用版本</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ apt-cache madison docker-ce</span><br><span class="line">docker-ce | 5:19.03.13~1.2.beta2-0~ubuntu-bionic | https://download.docker.com/linux/ubuntu bionic/test amd64 Packages</span><br><span class="line"> docker-ce | 5:19.03.12~3-0~ubuntu-bionic | https://download.docker.com/linux/ubuntu bionic/test amd64 Packages</span><br><span class="line"> docker-ce | 5:19.03.11~3-0~ubuntu-bionic | https://download.docker.com/linux/ubuntu bionic/test amd64 Packages </span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$  apt-cache madison docker-ce-cli</span><br><span class="line">docker-ce-cli | 5:19.03.13~1.2.beta2-0~ubuntu-bionic | https://download.docker.com/linux/ubuntu bionic/test amd64 Packages</span><br><span class="line">docker-ce-cli | 5:19.03.12~3-0~ubuntu-bionic | https://download.docker.com/linux/ubuntu bionic/test amd64 Packages</span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<p>b. 選擇指定版本安裝，例如 5:19.03.12<sub>3-0</sub>ubuntu-bionic</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install docker-ce=&lt;VERSION_STRING&gt; docker-ce-cli=&lt;VERSION_STRING&gt; containerd.io</span><br></pre></td></tr></table></figure>
<h3 id="完成安裝">完成安裝</h3>
<p>安裝成功後 daemon 會自動啟用，並且會加到開機自動啟動的程序中。可以使用下列命令確認安裝以及程序狀態：<br>
確認版本資訊</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker version</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/lUWfH3W.png" alt=""><br>
確認狀態</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl status docker</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/speYw5F.png" alt=""></p>
<h3 id="將當下使用者加入-docker-group">將當下使用者加入 docker group</h3>
<p>默認情況下，只能以 root 或由 docker group 中的用戶執行 docker 命令。否則會得到下列警示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker: Cannot connect to the Docker daemon. Is the docker daemon running on this host?.</span><br><span class="line">See &#x27;docker run --help&#x27;.</span><br></pre></td></tr></table></figure>
<p>如果要避免在每次運行 docker 命令時都加 sudo，請將用戶添加到 docker group：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo usermod -aG docker $&#123;USER&#125;</span><br><span class="line">$ su - $&#123;USER&#125;</span><br></pre></td></tr></table></figure>
<p>確認用戶目前所屬的 group</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ id -nG</span><br></pre></td></tr></table></figure>
<hr>
<p>上面演示了如何手動安裝 docker，有點麻煩，所以官方提供了<a href="https://get.docker.com/">腳本</a>可以一鍵安裝。</p>
<h2 id="使用官方安装腳本自動安裝">使用官方安装腳本自動安裝</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | sudo sh</span><br></pre></td></tr></table></figure>
<p>完成！超簡潔。</p>
<hr>
<h2 id="安裝-docker-compose">安裝 docker-compose</h2>
<h3 id="下載最新版">下載最新版</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>
<p>若要安裝其他版本，請將 URL 中的 <code>1.26.2</code> 取代成其他<a href="https://docs.docker.com/compose/release-notes/">版本</a>。</p>
<h3 id="把-docker-compose-加入執行檔">把 docker-compose 加入執行檔</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>
<h3 id="測試安裝">測試安裝</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker-compose --version</span><br><span class="line">docker-compose version 1.26.2, build 1110ad01</span><br></pre></td></tr></table></figure>
<h6 id="reference">reference</h6>
<ul>
<li><a href="https://docs.docker.com/engine/install/ubuntu/">https://docs.docker.com/engine/install/ubuntu/</a></li>
<li><a href="https://docs.docker.com/compose/install/">https://docs.docker.com/compose/install/</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-18-04">https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-18-04</a></li>
</ul>
]]></content>
      <categories>
        <category>DevOps</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Docker Compose</tag>
      </tags>
  </entry>
  <entry>
    <title>Debezium 1.5 snapshot.mode schema_only not work</title>
    <url>/Debezium-1.5-snapshot-mode-schema-only-not-work/</url>
    <content><![CDATA[<p>使用 Debezium 1.5 連上 connector 後，發現資料會從資料表的最舊資料一筆資料開始送，查官網後發現有 <code>snapshot.mode</code> 的參數可以設置，但設置完畢後卻發現有 error，本篇記錄解法。</p>
<span id="more"></span>
<h3 id="snapshot-mode">snapshot.mode</h3>
<p>Debezium 1.5 版本的 Oracle connector 的配置中，用 snapshot.mode 配置項表示快照模式。默認為 <code>initial</code> 模式，當連接器啟動的時候，會執行一次數據庫初始的一致性快照任務。<br>
第二種快照模式是 <code>schema_only</code>。在這種情況下，connector 仍會捕獲相關表的結構，但它不會在啟動時產生 READ 事件創建完整數據集。故如果只對從現在開始的數據更改感興趣，而不對所有記錄的完整當前狀態感興趣，須將模式改為 <code>schema_only</code>。</p>
<h3 id="錯誤">錯誤</h3>
<p>在 connector 的設定項加上 <code>&quot;snapshot.mode&quot;: &quot;schema_only&quot;</code> 後，發現 connector 會報以下錯誤：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2022-03-22 05:06:45,029 ERROR  ||  WorkerSourceTask&#123;id=oracle2-0&#125; Task threw an uncaught and unrecoverable exception. Task i                              s being killed and will not recover until manually restarted   [org.apache.kafka.connect.runtime.WorkerTask]</span><br><span class="line">org.apache.kafka.connect.errors.ConnectException: An exception occurred in the change event producer. This connector will be                               stopped.</span><br><span class="line">        at io.debezium.pipeline.ErrorHandler.setProducerThrowable(ErrorHandler.java:42)</span><br><span class="line">        at io.debezium.connector.oracle.logminer.LogMinerStreamingChangeEventSource.execute(LogMinerStreamingChangeEventSour                              ce.java:208)</span><br><span class="line">        at io.debezium.pipeline.ChangeEventSourceCoordinator.streamEvents(ChangeEventSourceCoordinator.java:152)</span><br><span class="line">        at io.debezium.pipeline.ChangeEventSourceCoordinator.lambda$start$0(ChangeEventSourceCoordinator.java:119)</span><br><span class="line">        at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)</span><br><span class="line">        at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)</span><br><span class="line">        at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)</span><br><span class="line">        at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)</span><br><span class="line">        at java.base/java.lang.Thread.run(Thread.java:834)</span><br><span class="line">Caused by: io.debezium.DebeziumException: Supplemental logging not configured for table EMESHY.EMESP.tp_sn_log.  Use command                              : ALTER TABLE EMESP.tp_sn_log ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS</span><br><span class="line">        at io.debezium.connector.oracle.logminer.LogMinerHelper.checkSupplementalLogging(LogMinerHelper.java:407)</span><br><span class="line">        at io.debezium.connector.oracle.logminer.LogMinerStreamingChangeEventSource.execute(LogMinerStreamingChangeEventSour                              ce.java:132)</span><br><span class="line">        ... 7 more</span><br></pre></td></tr></table></figure>
<h3 id="錯誤排查">錯誤排查</h3>
<p>按照錯誤原因是指定的表沒有設置 Supplemental Log，但理應不可能，因為在預設的 snapshot mode initial 時是可連接成功的，還是按照指示進入資料庫設置，<br>
<img src="https://imgur.com/2UEJK3g.png" alt=""><br>
然結果不出所料的回報已經設置了，使用網路上的另一個 command 查看 <code>ALL_LOG_GROUP</code> 的配置：<br>
<img src="https://imgur.com/KWFKB7v.png" alt=""><br>
一樣是顯示在我指定的 TP_SN_LOG 表有設置補充日誌。<br>
無意間在 community 發現也有人遇到一樣的錯誤(<a href="https://gitter.im/debezium/user?at=6034b854e634904e60ba19a4">gitter thread</a>)，發現可能是 bug，其實可以看到錯誤訊息的內容把原本應該大寫的表名 TP_SN_LOG 轉成小寫 tp_sn_log。查看 <a href="https://issues.redhat.com/browse/DBZ-3190">jira issue</a> 提到，照理來說 oracle 標識符在查詢中不區分大小寫，除非它們在字符串謂詞中顯式使用，即 “WHERE TABLE_NAME = ‘table’”，或者標識符是用雙引號創建的。但我在送 config 時就是使用大寫押~~~怪!</p>
<h3 id="解決方式">解決方式</h3>
<p>暫時在 connector 設定項加上 <code>database.tablename.case.insensitive</code> 參數，值設為 <code>false</code>，即可順利解決。超怪 =___=，<strong>非</strong>大小寫不敏感不就是指敏感的意思嘛!!! 只能當作是 1.5 的 bug 了。</p>
<p>附上最終的 config</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;oracle2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;connector.class&quot;</span>:<span class="string">&quot;io.debezium.connector.oracle.OracleConnector&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;tasks.max&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;database.hostname&quot;</span>:<span class="string">&quot;10.90.1.207&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;database.port&quot;</span>:<span class="string">&quot;1521&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;database.user&quot;</span>:<span class="string">&quot;logminer&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;database.password&quot;</span>:<span class="string">&quot;logminer&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;database.dbname&quot;</span>:<span class="string">&quot;EMESHY&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;database.server.name&quot;</span>:<span class="string">&quot;oracle&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;database.history.kafka.bootstrap.servers&quot;</span>:<span class="string">&quot;kafka:9092&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;database.history.kafka.topic&quot;</span>:<span class="string">&quot;tpsn2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;database.connection.adapter&quot;</span>:<span class="string">&quot;logminer&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;table.include.list&quot;</span>:<span class="string">&quot;EMESP.TP_SN_LOG&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;log.mining.strategy&quot;</span>:<span class="string">&quot;online_catalog&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;snapshot.mode&quot;</span>: <span class="string">&quot;schema_only&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;database.tablename.case.insensitive&quot;</span>: <span class="string">&quot;false&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Reference">Reference</h3>
<ul>
<li><a href="https://debezium.io/documentation/reference/1.5/connectors/oracle.html#oracle-snapshots">https://debezium.io/documentation/reference/1.5/connectors/oracle.html#oracle-snapshots</a></li>
<li><a href="https://gitter.im/debezium/user?at=6034b854e634904e60ba19a4">https://gitter.im/debezium/user?at=6034b854e634904e60ba19a4</a></li>
</ul>
]]></content>
      <categories>
        <category>Database</category>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Kafka</tag>
        <tag>Debezium</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>[Frontend] DOM</title>
    <url>/Frontend-DOM/</url>
    <content><![CDATA[<p>DOM (Document Object Model) 定義了標準 API，使 JavaScript 可以控制瀏覽器的行為與網頁的內容。</p>
<span id="more"></span>
<p>DOM 將一份 HTML 文件看作是一個樹狀結構的物件，裡面的標籤皆為節點 (node)，可以改變其結構、樣式 (CSS) 或內容等：<br>
<img src="https://imgur.com/Mkx74z0.png" alt=""></p>
<h3 id="節點類型">節點類型</h3>
<p>DOM 物件模型把 HTML 的元素 (element) 當作是 JavaScript 物件 (object) 來操作，常見的節點類型—</p>
<ul>
<li>document：DOM tree 的根節點，所以當要存取 HTML 時，都從 document 物件開始。</li>
<li>element</li>
<li>event</li>
<li>window</li>
</ul>
<p>參考: <a href="https://pydoing.blogspot.com/2011/08/javascript-htmldom-overview.html">https://pydoing.blogspot.com/2011/08/javascript-htmldom-overview.html</a></p>
<h3 id="DOM-API-的使用範例">DOM API 的使用範例</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 取得頁面上所有的 &lt;p&gt; 元素</span></span><br><span class="line"><span class="keyword">var</span> paragraphs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 將所有的 &lt;p&gt; 元素的文字顏色都改成綠色</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;paragraphs.length; ++i) &#123;</span><br><span class="line">    paragraphs[i].style.color = <span class="string">&#x27;green&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="Reference">Reference</h6>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/%E6%96%87%E6%A1%A3%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B">https://zh.wikipedia.org/wiki/文档对象模型</a></li>
<li><a href="https://www.fooish.com/javascript/dom/">https://www.fooish.com/javascript/dom/</a></li>
</ul>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>DOM</tag>
      </tags>
  </entry>
  <entry>
    <title>[Docker] 建立 golang 中使用到 oracle instant client 的 image</title>
    <url>/Docker-golang-oracle-instant-client-image/</url>
    <content><![CDATA[<p>紀錄一下建立的過程中總共遇到兩個問題：</p>
<span id="more"></span>
<h2 id="standard-init-linux-go-xxx-exec-user-process-caused-“no-such-file-or-directory”">standard_init_linux.go:xxx: exec user process caused “no such file or directory”</h2>
<p>之前在 build golang 的時候沒有用到 C library，所以在編譯的時候 CGO 都是關閉的。但目前要 build 的這隻程式有使用到 oracle 第三方套件 <a href="https://github.com/godror/godror"><code>godror</code></a>  需要用到 C library，所以在使用原生 alpine image 時，跑 container 起來會遇到 <code>standard_init_linux.go:228: exec user process caused &quot;no such file or directory&quot;</code> 的錯誤。</p>
<h3 id="概念">概念</h3>
<h4 id="靜態編譯-動態編譯">靜態編譯 &amp; 動態編譯</h4>
<p>靜態編譯指的是，在編譯可執行文件的時候，將可執行文件需要調用的對應庫都集成到可執行文件內部，使得可執行文件不需要其他任何依賴就能運行。</p>
<p>默認情況下，golang 的編譯是動態編譯，通過環境變量 CGO_ENABLED 控制，默認開啟，允許在 Go 代碼中調用 C 代碼。</p>
<h4 id="Alpine-鏡像">Alpine 鏡像</h4>
<p>Alpine 是眾多 Linux 發行版中的一員，和 CentOS、Ubuntu 一樣，只是一個發行版的名字，號稱小巧安全，有自己的包管理工具 apk，開發者可以使用 apk 在基於 alpine 的鏡像中添加需要的包或工具。</p>
<p>相比於其他 Docker 鏡像，它的容量非常小，僅僅只有 5 MB 左右（對比 Ubuntu 系列鏡像接近 200 MB）</p>
<h3 id="錯誤原因">錯誤原因</h3>
<p>然而動態編譯完成後的二進制文件，放在同是使用動態庫的 Alpine 基礎鏡像中運行會報錯：<code>standard_init_linux.go:211: exec user process caused &quot;no such file or directory&quot;</code></p>
<p>但是放在 ubuntu 基礎鏡像中可以運行。原因是因為兩者使用的 C library 不一樣，在製作 Alpine 的時候，是基於<code>musl libc</code> 和 busybox 構建的，與基於標準 C 執行庫 GNU C library (glibc) 上編譯出來的應用程序不兼容，導致動態依賴的二進制文件在運行時找不到依賴的文件。</p>
<h3 id="解決方式">解決方式</h3>
<ol>
<li>使用動態編譯後運行在大基礎鏡像中，即包含動態調用的 C 庫的基礎鏡像</li>
<li>手動安裝 C Library，使用動態編譯後運行在小基礎鏡像，將鏡像分為 <code>build</code> 和 <code>run</code> 兩個階段。</li>
</ol>
<p>為了追求更小的 docker image，這裡使用第二個方法。</p>
<p><img src="https://imgur.com/aODpLcK.png" alt=""></p>
<p>範例一：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//Dockerfile</span><br><span class="line"></span><br><span class="line"># build stage</span><br><span class="line">FROM golang:alpine as builder</span><br><span class="line">WORKDIR /go/src</span><br><span class="line">COPY httpserver.go .</span><br><span class="line">RUN go build -o httpd ./httpserver.go</span><br><span class="line"></span><br><span class="line"># run stage</span><br><span class="line">From alpine:latest</span><br><span class="line">WORKDIR /root/</span><br><span class="line">COPY --from=builder /go/src/httpd .</span><br><span class="line">RUN chmod +x /root/httpd</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;/root/httpd&quot;]</span><br></pre></td></tr></table></figure>
<p>範例二：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM alpine:edge AS build</span><br><span class="line">RUN apk update</span><br><span class="line">RUN apk upgrade</span><br><span class="line">RUN apk add --no-cache go gcc g++</span><br><span class="line">WORKDIR /</span><br><span class="line">COPY . .</span><br><span class="line">RUN CGO_ENABLED=1 go build /</span><br><span class="line"></span><br><span class="line">FROM alpine:edge</span><br><span class="line">WORKDIR /</span><br><span class="line">COPY --from=build /reverseapi /reverseapi</span><br><span class="line">ENTRYPOINT [ &quot;/reverseapi&quot; ]</span><br></pre></td></tr></table></figure>
<h3 id="補充">補充</h3>
<h4 id="Alpine-鏡像的限製或者前提條件">Alpine 鏡像的限製或者前提條件</h4>
<p>是否可以使用 Alpine，大部分項目均可無視 musl libc 和 gnu libc 的區別，但是如果有相關的依賴gnu libc，則需要慎重考慮是否一定需要使用 Alpine 鏡像，因為 Alpine 鏡像的小巧正是建立在busybox 和 musl libc 基礎之上的，雖然在 Alpine 上也可以安裝 gnu libc，但是這種對應給人一種強烈的違和感，而且後續碰到的各種問題的概率較大。所以整體來說，如果沒有一定要使用 gnu libc 的項目可以考慮使用 Alpine 鏡像，否者還是不要使用較為穩妥。</p>
<h4 id="版本支持">版本支持</h4>
<p>需要注意的是不同的 Alpine 的版本當前所支持的gcc/g++的版本有所不同，如果不是從源碼編譯的安裝的情況下，需要注意此方面的限制，具體的查詢請參考<a href="https://pkgs.alpinelinux.org">這裡</a></p>
<h6 id="Reference">Reference</h6>
<ul>
<li>
<p><a href="https://www.ardanlabs.com/blog/2020/02/docker-images-part2-details-specific-to-different-languages.html">https://www.ardanlabs.com/blog/2020/02/docker-images-part2-details-specific-to-different-languages.html</a></p>
</li>
<li>
<p><a href="https://promacanthus.netlify.app/experience/golang/01-%E7%BC%96%E8%AF%91%E7%9A%84%E5%9D%91/">https://promacanthus.netlify.app/experience/golang/01-编译的坑/</a></p>
</li>
<li>
<p><a href="https://tonybai.com/2017/12/21/the-concise-history-of-docker-image-building/">https://tonybai.com/2017/12/21/the-concise-history-of-docker-image-building/</a></p>
</li>
<li>
<p>關於 alpine 鏡像使用 gcc &amp; g++ 要注意的問題<br>
<a href="https://blog.csdn.net/liumiaocn/article/details/100903476">https://blog.csdn.net/liumiaocn/article/details/100903476</a></p>
</li>
</ul>
<hr>
<h2 id="ORA-00000-DPI-1047-Cannot-locate-a-64-bit-Oracle-Client-library-“Error-loading-shared-library-libnsl-so-1-No-such-file-or-directory-needed-by-instantclient-18-5-libclntsh-so-”">ORA-00000: DPI-1047: Cannot locate a 64-bit Oracle Client library: “Error loading shared library libnsl.so.1: No such file or directory (needed by /instantclient_18_5/libclntsh.so)”.</h2>
<p>在 image 中裝完 Oracle 的 instantclinet 後，直接跑起來會遇到找不到參考的 library 的錯誤</p>
<p><img src="https://imgur.com/NU8XcVr.png" alt=""></p>
<p>官網雖然有<a href="https://docs.oracle.com/en/database/oracle/oracle-database/18/lnoci/instant-client.html#GUID-7D65474A-8790-4E81-B535-409010791C2F">參考文檔</a>，但是因為我用的 base image 是 alpine，有些功能跟 library 放的地方跟其他 Linux 如 ubuntu 或 centos 不一樣，所以決定安裝該有的 Library 後，再自己手動建 symbol link。</p>
<p>最後的 Dockerfile 長這樣：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM alpine:edge AS build</span><br><span class="line">RUN apk update</span><br><span class="line">RUN apk upgrade</span><br><span class="line">RUN apk add --no-cache go gcc g++</span><br><span class="line">WORKDIR /</span><br><span class="line">COPY . .</span><br><span class="line">RUN CGO_ENABLED=1 go build /</span><br><span class="line"></span><br><span class="line">FROM alpine:edge</span><br><span class="line">WORKDIR /</span><br><span class="line"><span class="comment"># COPY ./config /config</span></span><br><span class="line">RUN wget https://download.oracle.com/otn_software/linux/instantclient/185000/instantclient-basic-linux.x64-18.5.0.0.0dbru.zip &amp;&amp; \</span><br><span class="line">    unzip instantclient-basic-linux.x64-18.5.0.0.0dbru.zip &amp;&amp; \</span><br><span class="line">    apk add --no-cache libaio libnsl libc6-compat gcc &amp;&amp; ln -s /usr/lib/* /instantclient_18_5 &amp;&amp; \</span><br><span class="line">    <span class="built_in">cd</span> /instantclient_18_5 &amp;&amp; \</span><br><span class="line">    ln -s libnsl.so.2 /usr/lib/libnsl.so.1 &amp;&amp; \</span><br><span class="line">    ln -s /lib/libc.so.6 /usr/lib/libresolv.so.2 &amp;&amp; \</span><br><span class="line">    ln -s /lib/libc.musl-x86_64.so.1 /usr/lib/ld-linux-x86-64.so.2</span><br><span class="line">ENV LD_LIBRARY_PATH=/instantclient_18_5</span><br><span class="line">COPY --from=build /reverseapi /reverseapi</span><br><span class="line">ENTRYPOINT [ <span class="string">&quot;/reverseapi&quot;</span> ]</span><br></pre></td></tr></table></figure>
<div class="info">
<p>在測試的時候是安裝完整的 instantclinet，但應該可以裝 lite 版本的，以減少不必要的 image 大小。</p>
</div>
<div class="info">
<p>在 debug 的時候可以直接進去 container 裡面找錯誤訊息中找不到的 library 放哪，然後在自己手動建 link</p>
</div>
<h6 id="Reference-2">Reference</h6>
<ul>
<li>
<p><a href="https://stackoverflow.com/questions/53263972/oracle-on-alpine-linux">https://stackoverflow.com/questions/53263972/oracle-on-alpine-linux</a></p>
</li>
<li>
<p>19 版的可以參考下面大大分享的<br>
<a href="https://github.com/Shrinidhikulkarni7/OracleClient_Alpine">https://github.com/Shrinidhikulkarni7/OracleClient_Alpine</a></p>
</li>
<li>
<p>關於 alpine 中下 ldconfig 的錯誤<br>
<a href="https://stackoverflow.com/questions/36990951/ldconfig-seems-no-functional-under-alpine-3-3">https://stackoverflow.com/questions/36990951/ldconfig-seems-no-functional-under-alpine-3-3</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>DevOps</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>alpine</tag>
        <tag>oracle instant clinet</tag>
      </tags>
  </entry>
  <entry>
    <title>[Git] Basic Git (3) 一些狀況劇</title>
    <url>/Git-Basic-Git-3/</url>
    <content><![CDATA[<h3 id="想改最後一次的-commit-message">想改最後一次的 commit message</h3>
<p>在本地端 git commit 後發現 commit message 打錯了，只要下 <code>$ git commit --amend</code>即可進入 vim 編輯器做修改。</p>
<p><img src="https://imgur.com/7uZHzPo.png" alt=""></p>
<table><tr><td bgcolor=#FDEDEC>
請注意，如果已經 commit 而且又 push to remote 了，那就乖乖認命吧，這種情形下你在 local 端改的話可能會造成其他人的困擾。最好的方法還是 push 之前先檢查一下，避免錯的東西被放到遠端。
</td></tr></table>
<h3 id="commit-後但後悔了">commit 後但後悔了</h3>
<p>使用 <code>$ git reset HEAD^ (--soft / --hard / --mixed)</code></p>
<table>
<thead>
<tr>
<th style="text-align:center">名詞</th>
<th style="text-align:center">解釋</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">head</td>
<td style="text-align:center">所在位置</td>
</tr>
<tr>
<td style="text-align:center">^</td>
<td style="text-align:center">上一個</td>
</tr>
<tr>
<td style="text-align:center">index</td>
<td style="text-align:center">變更狀態紀錄 (git status)</td>
</tr>
<tr>
<td style="text-align:center">working directory</td>
<td style="text-align:center">工作目錄</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">mode</th>
<th style="text-align:center">head</th>
<th style="text-align:center">index</th>
<th style="text-align:center">working directory</th>
<th style="text-align:left">說明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">soft</td>
<td style="text-align:center">changed</td>
<td style="text-align:center">unchanged</td>
<td style="text-align:center">unchanged</td>
<td style="text-align:left">僅移除 commit 變成新版未 commit，內容仍是新版的。</td>
</tr>
<tr>
<td style="text-align:center">mixed(default)</td>
<td style="text-align:center">changed</td>
<td style="text-align:center">changed</td>
<td style="text-align:center">unchanged</td>
<td style="text-align:left">index 移除 staged 標記，變成 Modifiedor Untracked，內容是新版的。</td>
</tr>
<tr>
<td style="text-align:center">hard</td>
<td style="text-align:center">changed</td>
<td style="text-align:center">changed</td>
<td style="text-align:center">changed</td>
<td style="text-align:left">回到上一版版本，完全移除，內容及狀態皆是上一版。</td>
</tr>
<tr>
<td style="text-align:center">[1]</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<h3 id="改了檔案還沒-commit-但想復原">改了檔案還沒 commit 但想復原</h3>
<p>用 <code>$ git restore &lt;file&gt;</code> 回復，或是 <code>$ git restore .</code>回復所有檔案<br>
或是舊 command <code>$ git checkout -- &lt;file&gt;</code></p>
<p><img src="https://imgur.com/3yBqfnp.png" alt=""></p>
<h3 id="想改-branch-名稱">想改 branch 名稱</h3>
<p><code>$ git branch -m &lt;新名稱&gt;</code></p>
<p><img src="https://imgur.com/GxP9UtR.png" alt=""></p>
<h3 id="想把遠端的-branch-抓下來">想把遠端的 branch 抓下來</h3>
<p>設目前本地端無任何 branch，可以直接下 <code>$ git checkout &lt;remote-branch-name&gt;</code>。</p>
<p><img src="https://imgur.com/drkR4Vc.png" alt=""></p>
<h3 id="想在-commit-前做一些判斷-git-hooks">想在 commit 前做一些判斷 (git hooks)</h3>
<p>在 <code>.git</code> 資料夾下有 <code>hooks</code> 資料夾，裡面存放了一些 shell script，可以讓使用在在針對某些狀況下設置一些判斷，然後 git 做一些反應，比如說在 commit 或是 push 前檢查是否有放帳號密碼等資訊，然後停止或允許動作。</p>
<p><img src="https://imgur.com/noHMLbm.png" alt=""></p>
<h6 id="Source">Source</h6>
<p>[1] <a href="https://ithelp.ithome.com.tw/articles/10187303">https://ithelp.ithome.com.tw/articles/10187303</a><br>
[All] 大部分的內容皆來自 <a href="https://lidemy.com/">Lidemy</a> [GIT101] 的課堂筆記</p>
]]></content>
      <categories>
        <category>DevOps</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>[Git] Basic Git (1) - Intro &amp; Init, add, commit, status... </title>
    <url>/Git-Basic1/</url>
    <content><![CDATA[<h3 id="前言">前言</h3>
<p>在沒有版本控制系統前，如果有一個常常在修改的檔案，又想保留每個版本狀態時，我們常會在編輯檔案前複製一個備份，時間久了就會變得非常不便且難以維護，有可能造成命名混亂，也很難比較各版本間的差異，尤其是在多人協作的狀況下時還可能會發生衝突。</p>
<!--- more --->
<h3 id="版本控制概念－用一般資料夾闡述">版本控制概念－用一般資料夾闡述</h3>
<p>如果是以資料夾去做版控的概念會是如下</p>
<table><tr><td bgcolor=AliceBlue>
  1. 需要新版本：開一個新的資料夾</br>
  2. 不想加入版控：不要加入資料夾</br> 
  3. 避免版本號衝突：用看似亂數的東西當作資料夾名稱</br>
  4. 知道資料夾順序：用一個檔案來紀錄</br>
  5. 知道最新版本：用一個檔案來存</br>
</td></tr></table>
<h3 id="GIT-是什麼">GIT 是什麼</h3>
<p>git 就是個幫你做版控的程式，不用像上面那樣做很多動作！</p>
<h3 id="開始使用">開始使用</h3>
<h4 id="git-init">git init</h4>
<p>進入要做版控的資料夾/專案，並下 <code>$ git init</code> 做初始化。初始化完成後可以看到目錄下多了一個 <code>.git</code> 的隱藏子資料夾，其中包含 Git 所有必需的倉儲檔案，也就是 Git 倉儲的骨架。<br>
<img src="https://imgur.com/d3kVM31.png" alt=""></p>
<h4 id="git-status">git status</h4>
<p>用於查看目前工作目錄 (working directory) 的檔案狀態，以下是檔案可能會有的四種狀態：<br>
<img src="https://imgur.com/0n6e7EE.png" alt=""></p>
<ul>
<li><strong>未追蹤 (Untracked)</strong>：沒有被 GIT 所追蹤控管的檔案，如新增的檔案。</li>
<li><strong>已更改 (Modified)</strong>：已提交版本後，又再次修改的檔案。</li>
<li><strong>等待提交 (Staged)</strong>：在工作目錄 (WD) 的檔案執行 git add 後，會放在暫存區 (Stage) 等待提交。</li>
<li><strong>已提交 (Committed)</strong>：在暫存區的檔案執行 git commit 後，檔案便置於儲存區 (Repo)，這些放在儲存區的檔案即是已提交的狀態。</li>
</ul>
<p>第一次下 <code>$ git status</code> 可以發現目前目錄下的檔案狀態皆為 <font color=#FF5959>Untracked files</font>，表示這些是全新的檔案，沒有被加入版控。<br>
<img src="https://imgur.com/NssQJIh.png" alt=""></p>
<h4 id="git-add">git add</h4>
<p>輸入 <code>$ git add &lt;filename&gt;</code> 可將檔案指定加入版控 / 暫存區 (Stage)；<br>
輸入　<code>$ git add .</code> 可一次加入 <span class="dotunderletter">所有</span> 檔案<br>
再查看狀態可以看到檔案狀態變為 <font color=green>Changes to be committed</font>。<br>
<img src="https://imgur.com/l10gh8Z.png" alt=""></p>
<h4 id="git-commit">git commit</h4>
<p>輸入<code>$ git commit</code> 將建立新的版控，將放在暫存區的檔案放入 repository<br>
如果單獨輸入<code>$ git commit</code>，則會先進入 vim 編輯器，要求在編輯器輸入 commit 訊息。<br>
或是下<code>$ git commit -m &quot;commit message&quot;</code> 直接在後面帶訊息。如果沒有 commit 訊息的話則會 commit 失敗。<br>
<img src="https://imgur.com/OAxsNhn.png" alt=""></p>
<h4 id="git-rm">git rm</h4>
<p><code>$ git rm --cached &lt;filename&gt;</code> 可以將檔案從 staged 或是 committed 狀態移除版控。<br>
<img src="https://imgur.com/QxmpZZt.png" alt=""></p>
<h4 id="git-log">git log</h4>
<p>輸入 <code>$ git log</code> 可以查看所有提交紀錄。<br>
<img src="https://imgur.com/GJawPx4.png" alt=""><br>
新增參數 --oneline <code>$ git log --oneline</code>，可以顯示較為簡短的 git log。<br>
<img src="https://imgur.com/r7bmS5L.png" alt=""></p>
<h4 id="git-commit-am">git commit -am</h4>
<p>在修改已經 commit 的檔案後，可以發現檔案變成 <font color=#FF5959>Changes not staged for commit</font> 的 <font color=#FF5959>modified</font> 狀態。<br>
<img src="https://imgur.com/UIEt4tF.png" alt=""><br>
此時可以下 <code>$ git add .</code> 並下 <code>$ git commit -m &quot;msg&quot;</code>。或是直接下 <strong><code>$ git commit -am &quot;msg&quot;</code></strong> 將兩個指令合併。 <code>-a</code> 參數表示 <code>--all</code> (git add --all)，會把 <span class="dotunderletter">已修改過</span> 的檔案加入 staged 區。</p>
<div class="warning">
<p>請注意，使用git commit -am 不會包含新增的檔案 newfile，需要先 git add 再 git commit 個別下。</p>
</div>
<p>p.s. git add 後檔案狀態會變成 <font color=green>Changes to be commited (Modified)</font><br>
<img src="https://imgur.com/lCUEpVZ.png" alt=""></p>
<h4 id="git-checkout">git checkout</h4>
<p>使用 <code>$ git check out &lt;版本&gt;</code> 可以回到指定的版本時的狀態。例如下圖回到了 first commit 當下。<br>
<img src="https://imgur.com/T95UVYe.png" alt=""></p>
<h4 id="gitignore">.gitignore</h4>
<p>新增 .gitignore，若有檔案名稱寫入該檔案則會被 git 忽略，專門放與專案沒什麼關係、不須版控也可以的檔案，但 .gitignore 檔案本身會加入版控，要告知其他人什麼檔案不在版控中。<br>
<img src="https://imgur.com/iGu6x8V.png" alt=""></p>
<h4 id="git-diff">git diff</h4>
<p><code>$ git diff</code> 可以查看這次要 commit <strong>前</strong>與上一個版本的差別。<br>
<img src="https://imgur.com/OB2WhIl.png" alt=""></p>
<h6 id="source">source</h6>
<p>[all] 大部分的內容皆來自 <a href="https://lidemy.com/">Lidemy</a> [GIT101] 的課堂筆記</p>
]]></content>
      <categories>
        <category>DevOps</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>版本控制</tag>
      </tags>
  </entry>
  <entry>
    <title>[Git] Basic Git (2) - Branch &amp; GitHub</title>
    <url>/Git-Basic2/</url>
    <content><![CDATA[<h2 id="branch-概念">branch 概念</h2>
<p>一般在線性開發時會是以下這樣：<br>
<img src="https://imgur.com/yxIhSIN.png" alt=""><br>
當在開發新功能時，發現當下開發的版本有舊有的 bug，此時如果一邊開發一邊改 bug 可能會導致產出的東西有衝突。<br>
而如果引入分支 branch，讓開發新功能以及 debug 兩邊各自獨立完成，而後再進行合併，就可以把工作乾淨地切割開來。目的是為了保持主枝幹的穩定，因為在開發新功能的時候不可能隨時保持穩定狀態，所以在確定穩定前都不會影響到主幹。<br>
<img src="https://imgur.com/KGfAOUW.png" alt=""></p>
<span id="more"></span>
<h3 id="git-branch-v">git branch -v</h3>
<p>可以查看目前有哪些 branch，顯示方式為 <code>&lt;branch name&gt; &lt;latest commit version&gt; &lt;commit message&gt;</code>，亮綠燈的代表目前工作目錄所在的分區。<br>
<img src="https://imgur.com/t0qVj6k.png" alt=""></p>
<h3 id="git-branch">git branch</h3>
<p><code>$ git branch &lt;branchname&gt;</code> 可依目前 branch 為基準複製出一個新的分支。<br>
<img src="https://imgur.com/9B0IRri.png" alt=""></p>
<h3 id="git-checkout">git checkout</h3>
<p><code>$ git checkout &lt;branchname&gt;</code> 可以將目前工作目錄切換到指定 branch 下，可以把 checkout 想像成移到該資料夾下的感覺。<br>
<img src="https://imgur.com/Er1RrvV.png" alt=""></p>
<h3 id="git-merge">git merge</h3>
<p><code>$ git merge &lt;branchname&gt;</code> 可以把指定的 branch 合併到當下的工作目錄來。如下圖，在 new-feature branch 下修改了 hello.js 的檔案，回到 master branch，先 cat 確認 hello.js 內容是舊的，再下 merge command 將 new-feature branch 合併到 master 後，就能發現 master 的檔案也更新了！<br>
<img src="https://imgur.com/p80UcmR.png" alt=""></p>
<h3 id="git-branch-d">git branch -d</h3>
<p><code>$ git branch -d &lt;branchname&gt;</code> ，-d 為 --delete，可刪除該 branch。通常在開發完該 branch 並合併進主支線後，就可以刪除分支以保持乾淨的專案內容。<br>
<img src="https://imgur.com/eJETGfT.png" alt=""></p>
<h3 id="處理-merge-後的-conflict">處理 merge 後的 conflict</h3>
<p>如果 branch 在合併的時候有檔案有衝突，意即同個檔案的檔案內容的同一行不一樣，git 不曉得該以哪一個為準，則會在 merge 時出現下面的訊息：<br>
<img src="https://imgur.com/EpEnTVJ.png" alt=""><br>
須先查看發生衝突的檔案<br>
<img src="https://imgur.com/9IryZEM.png" alt=""><br>
Git 把有衝突的段落標記出來了，上半部是 HEAD，也就是目前所在的 master 分支，中間是分隔線，接下是 new-feature 分支的內容。請做修改並儲存檔案，最後再次 <code>$ git commit -am 'reslove the conflict'</code>，結束這回合！</p>
<h2 id="Git-v-s-Github">Git v.s. Github</h2>
<p>Github 就是一個幫你把 git repository 具象化的一個網站，一個有 UI 的 git server。<br>
<img src="https://imgur.com/5q7iRqR.png" alt=""></p>
<h3 id="git-push-from-local">git push (from local)</h3>
<p><img src="https://imgur.com/pl7p1VW.png" alt=""><br>
在 github 新增 repo 後回到本地端，要將本地端的 repo push 上去</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git remote add origin https://github.com/ulahsieh/gitTest.git</span><br><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure>
<p>第一個指令代表加入一個遠端的 repository 代號是 <code>origin</code>；第二行指令是把目前的 branch push 到 origin 的 master branch。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-u 代表 -set-upstream，設定 upstream 可以使分支開始追蹤指定的遠端分支，只要做過一次 git push -u &lt;remote name&gt; &lt;branch name&gt;，並且成功 push 出去；當下本機端的 branch 就會自動與遠端的 &lt;remote name&gt;/&lt;branch name&gt; 分支設定好 upstream 連結，之後要上傳分支時，就只需要透過簡單的 git push 指令就可以了。</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/IfB7ZK0.png" alt=""><br>
就能看到 github 上的 repo 與 local 同步<br>
<img src="https://imgur.com/BLWrMNa.png" alt=""><br>
當在本地端做 git commit 後，再下 git push 就可以在遠端分支更新 (因為前一次 push 有加 -u)。<br>
<img src="https://imgur.com/zUU1ljm.png" alt=""></p>
<h3 id="push-其他分支">push 其他分支</h3>
<p><code>$ git push origin &lt;branch name&gt;</code>，把當下分支 push 上 remote repository。<br>
<img src="https://imgur.com/ZRnBUq1.png" alt=""><br>
可以發現到 github 能切換剛剛 push 的分支<br>
<img src="https://imgur.com/voSzmUU.png" alt=""></p>
<h3 id="git-pull-pull-remote-repo-at-local">git pull (pull remote repo at local)</h3>
<p>github 可以在線上編輯 code，或是共同協做的時候，其他人做過更動想要同步在本地端時，下 <code>$ git pull origin master</code>，從遠端 origin pull master branch 下來。</p>
<div class="warning">
<p>請注意，如果在遠端做更新後，本地端一定要先 git pull 將最新版同步，才能再做 git push!</p>
</div>
<p><img src="https://imgur.com/lBtK1xX.png" alt=""><br>
如果 git pull 後發現遠端的與本地端有檔案的內容有衝突，那在 pull 結束後會顯示 conflict，改掉衝突再 commit &amp; push 即可。</p>
<h3 id="Pull-request">Pull request</h3>
<p>github 上的 <code>Pull Request</code> 用於合併分支，通常在 github 做 merge 方便又可以很快追蹤到兩個 branch 的差異，所以通常在做 merge 的時候都會在 github 做。<br>
首先在本地的 new-feature branch 建一個新的 newfile.js， git add &amp; commit 後再 git push 上遠端的 new-feature repo。<br>
<img src="https://imgur.com/HPm3L42.png" alt=""><br>
到 github 點選 <code>Compare &amp; pull request</code> 進行合併，<br>
<img src="https://imgur.com/umOt0Q1.png" alt=""><br>
接著一步一步做下來即可。完成 merge 後，就可以直接在 github 上刪除該 branch。<br>
<img src="https://imgur.com/OomNCs6.png" alt=""><br>
最後記得回到 local 同步 repo，<code>$ git pull origin master</code> &amp; <code>$ git branch -d new feature</code><br>
<img src="https://imgur.com/pfplGn1.png" alt=""></p>
<h3 id="Pull-request-發生衝突">Pull request 發生衝突</h3>
<p>在 pull request 如果有 <code>can't automatically merge</code> 訊息出現的話代表有 conflict 出現，<br>
<img src="https://imgur.com/6mTgbAd.png" alt=""><br>
改掉衝突後<br>
<img src="https://imgur.com/qSRL0tO.png" alt=""><br>
<img src="https://imgur.com/Lubw3xf.png" alt=""><br>
就可以順利 commit 了<br>
<img src="https://imgur.com/tTtWGjJ.png" alt=""></p>
<h3 id="git-clone">git clone</h3>
<p>除了可以 pull 自己的 github repo 外，也可以下載其他人的 repository 到自己的本地端。按下 <code>clone or download</code> 即可使用 zip 下載，或是複製 git clone 語法到 git bash 裡用 command line 下載。<br>
<img src="https://imgur.com/3Dkr3RS.png" alt=""></p>
<h3 id="Fork">Fork</h3>
<p>但是如果想要修改從別人 github 的 repository 下載下來的 repo 到本地然後又想 git push 到自己的 github 的話是不允許的。必須按右上角的 <code>Fork</code>，先在 github 上將這個 repo fork 到自己的 github，<br>
<img src="https://imgur.com/15OAr1b.png" alt=""><br>
然後從自己的 repo git clone 下來，才可以做修改後再 push 上自己的 github。</p>
<div class="warning">
<p>請注意，用 fork 的情況是因為沒有該原 repo 的權限 (permission deny)，如果自己本身有被 repo 的作者開啟修改的權限的話，就可以直接在本地端 git push 上他的 repo</p>
</div>
<h6 id="source">source</h6>
<p>[all] 大部分的內容皆來自 <a href="https://lidemy.com/">Lidemy</a> [GIT101] 的課堂筆記</p>
]]></content>
      <categories>
        <category>DevOps</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>branch</tag>
      </tags>
  </entry>
  <entry>
    <title>[Git] Build a Git Server on Ubuntu</title>
    <url>/Git-git-server/</url>
    <content><![CDATA[<h3 id="Step-1-電腦-VM-環境設置">Step 1: 電腦/VM 環境設置</h3>
<ul>
<li>作業系統選擇 Ubuntu 或其他 Linux 版本</li>
<li>開啟 SSH port</li>
<li>新增使用者帳號 git</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo adduser --home /home/git --disabled-password git</span><br><span class="line">//--disabled-password 表示取消用密碼登入</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">small tips:</span><br><span class="line">若開發團隊僅有兩三人，那不建立 git 帳號而是建立使用者個別的帳號也行。但考慮到日後可能擴編或是人員交替等等的因素，可能會增加管理的負擔。</span><br></pre></td></tr></table></figure>
<h3 id="Step-2-安裝所需套件">Step 2: 安裝所需套件</h3>
<ul>
<li>安裝 git</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install git</span><br></pre></td></tr></table></figure>
<ul>
<li>安裝 Gitosis</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install python-setuptools</span><br><span class="line">$ cd /tmp</span><br><span class="line">$ git clone https://github.com/tv42/gitosis.git</span><br><span class="line">$ cd gittosis</span><br><span class="line">$ sudo python setup.py install</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">承第一步結尾，為了使用及管理上的方便，Gitosis 便應運而生，Gitosis 是一套用來管理授權金鑰文件和實現簡單連接限制的腳本。可以輕鬆的管理每個使用者，而不需實際在主機上新增/移除帳號，這樣 user 皆可用 git@server:ServerIP.git 這樣的格式來取得或上傳版本庫到Server上。</span><br></pre></td></tr></table></figure>
<ul>
<li>在使用者家目錄 /home/git/ 下新增資料夾 repositories 當作版本庫位置</li>
</ul>
<p>Gitosis 預設會把 /home/git 這個目錄裡面的 repositories 資料夾當成所有 repository 的根目錄，以後所有的專案就都放在裡面。</p>
<h3 id="Step-3-git-client-端的動作">Step 3: git client 端的動作</h3>
<p>每個要使用 git server 的使用者，將會擁護一把自己的金鑰，若同一使用者使用多台電腦，則需將同一把的私鑰複製到同路徑下便可連線。</p>
<ul>
<li>開啟 git bash 產生一對金鑰</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;xxx@email.com&quot;</span><br><span class="line">// -C 參數用於指定這個金鑰的識別碼，預設是「帳號@主機名稱」，但為了好管理，所以建議用使用者的唯一識別值如 email</span><br></pre></td></tr></table></figure>
<ul>
<li>輸入金鑰存放位置<br>
若沒輸入則存在預設位置<br>
<img src="https://imgur.com/0ppmntS.png" alt=""></li>
<li>輸入密碼<br>
這裡不需設定，直接按兩次 enter 即可，這樣日後在 push 上 server 時，就不用輸入密碼了<br>
<img src="https://imgur.com/thA3DK7.png" alt=""></li>
<li>產生金鑰<br>
產生完成後會有兩個檔案，副檔名 .pub 為公鑰，沒有副檔名的是私鑰，公鑰交給(寄給) git server 管理者，私鑰則好好保存在欲使用的電腦中。<br>
<img src="https://imgur.com/28JswVa.png" alt=""></li>
</ul>
<h3 id="Step-4-管理者將使用者們的公鑰傳至-git-server">Step 4: 管理者將使用者們的公鑰傳至 git server</h3>
<ul>
<li>使用 pscp 將檔案傳至 git server</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pscp user1.pub git@ServerIP:/tmp/user1.pub</span><br><span class="line">//將 user1.pub 以 git 帳號丟到 server 上的 /tmp 目錄下，若需重新命名，則直接在 /tmp/xxx.pub 中打上欲命名的檔名</span><br></pre></td></tr></table></figure>
<ul>
<li>輸入密碼以開始上傳<br>
<img src="https://imgur.com/3GywqeJ.png" alt=""></li>
</ul>
<h3 id="Step-5-完成-Gitosis-的設定">Step 5: 完成 Gitosis 的設定</h3>
<p>Gitosis 有個很酷的管理方式，因為它本身就是一個 Git Repository，只要 clone 到管理者的電腦，修改裡面的檔案，再 push 回 Git Server，就會能完成如新增使用者公鑰、更改專案權限等設定。</p>
<ul>
<li>在管理者地端的電腦中 git clone Gitosis</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd /c/Projects</span><br><span class="line">$ git clone git@ServerIP:gitosis-admin.git</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>git clone 後可看到目錄下的資料結構<br>
<img src="https://imgur.com/NFLalCV.png" alt=""></p>
</li>
<li>
<p>新增使用者<br>
keydir目錄裡面存放目前所有Git使用者的公鑰，把新使用者的公鑰丟到 keydir 目錄下<br>
<img src="https://imgur.com/4GM2rl3.png" alt=""></p>
</li>
<li>
<p>編輯 gitosis.conf<br>
gitosis.conf 就是主要的設定檔，我們可以編輯裡面的設定來加入專案或使用者。<br>
這是剛初始化好的內容，裡面指定了 gitosis-admin 管理員的公鑰名稱(只允許一個管理員來管理 gitosis-admin)<br>
<img src="https://imgur.com/NkLcrPE.png" alt=""><br>
編輯gitosis.conf，加入專案名稱和擁有寫入權限的使用者；<br>
　　1. [群組名稱] 可自定<br>
　　2. members 為成員的公鑰識別碼 (建立金鑰時的 -C 參數值) 多個請用空白分隔<br>
　　3. writable 為專案名稱<br>
<img src="https://imgur.com/EYbI7GT.png" alt=""></p>
</li>
<li>
<p>提交更新並同步回 git server</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git add</span><br><span class="line">$ git commit -m &quot;add an user and create a develop group&quot;</span><br><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure>
<p>到這個步驟，git server 就算是建完了!</p>
<h3 id="Step-6-使用者使用">Step 6: 使用者使用</h3>
<ul>
<li>push (在專案下)</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git remote add origin git@ServerIP:project1.git</span><br><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure>
<ul>
<li>pull</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone git@ServerIP:project1.git</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>DevOps</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Git Server</tag>
      </tags>
  </entry>
  <entry>
    <title>GitLab CICD 介紹</title>
    <url>/GitLab-CICD-Introduction/</url>
    <content><![CDATA[<h3 id="CI-CD">CI/CD</h3>
<p><img src="https://imgur.com/g4KAXij.png" alt=""></p>
<span id="more"></span>
<h3 id="Continuous-Integration-持續整合">Continuous Integration 持續整合</h3>
<p><img src="https://imgur.com/rlvl3CZ.png" alt=""><br>
指在源代碼變更後的自動檢測(Lint)、構建(Build)和進行單元測試、集成測試(Test)的過程。目標是針對每個變動，能持續性的進行驗證並整合，以確保程式的品質。</p>
<h3 id="Continuous-Delivery-持續交付">Continuous Delivery 持續交付</h3>
<p><img src="https://imgur.com/1CAGTMQ.png" alt=""><br>
指頻繁地將軟體的新版本，交付給 QA 或使用者，以供評審。如果評審通過，程式碼就進入生產階段。持續交付通常包含了一個手動的步驟，用來讓開發人員確認和部署到生產環境。</p>
<h3 id="Continuous-Deployment-持續佈署">Continuous Deployment 持續佈署</h3>
<p><img src="https://imgur.com/wd8EhpU.png" alt=""><br>
持續部署是指當交付的程式碼通過評審之後，自動部署到生產環境中。持續部署不再需要開發人員手動部署成品到生產環境，只要程式碼提交的 PR 通過了，剩下的整個過程都會自動完成。</p>
<h3 id="Gitlab-CI-CD">Gitlab CI/CD</h3>
<p><img src="https://imgur.com/vLgm5hv.png" alt=""></p>
<h4 id="Pipeline">Pipeline</h4>
<p>代表一次的完整的自動化任務，每次提交都會觸發一次。根據 GitLab 所述</p>
<blockquote>
<p>pipelines are the top-level component of continuous integration, delivery, and deployment<br>
pipeline 使用存在 GitLab 項目的根目錄的 yaml 文件 (.gitlab-ci.yml) 定義。</p>
</blockquote>
<h4 id="Stage">Stage</h4>
<p>代表構建階段，一條 Pipeline 中可定義多個 Stages</p>
<ul>
<li>所有 Stages 會順序執行，即當一個 Stage 完成後，下一個 Stage 才會開始</li>
<li>只有當所有 Stages 完成後，該構建任務才會成功</li>
<li>如果任何一個 Stage 失敗，那麼後面的 Stages 不會執行，該構建任務失敗</li>
</ul>
<h4 id="Job">Job</h4>
<p>代表構建工作，是 GitLab CI 中可以獨立控制並運行的最小單位，一個 Stage 中可以有多的 Jobs。</p>
<ul>
<li>相同 Stage 中的 Jobs 會並行執行</li>
<li>任一 Job 失敗，那麼 Stage 失敗，Pipeline 失敗</li>
<li>相同 Stage 中的 Jobs 都執行成功時，該 Stage 成功</li>
</ul>
<h4 id="Runner">Runner</h4>
<p>Runner 負責運行 job。需要先架好 Runner，並在 Gitlab 上登記，當 pipeline 運行時，Gitlab 會指派 jobs 給可使用的 runner。</p>
<h5 id="分為三種類型">分為三種類型</h5>
<ul>
<li><a href="https://docs.gitlab.com/ee/ci/runners/runners_scope.html#shared-runners">Shared runners</a> are available to all groups and projects in a GitLab instance.</li>
<li><a href="https://docs.gitlab.com/ee/ci/runners/runners_scope.html#group-runners">Group runners</a> are available to all projects and subgroups in a group. It process jobs by using FIFO.</li>
<li><a href="https://docs.gitlab.com/ee/ci/runners/runners_scope.html#specific-runners">Specific runners</a> are associated with specific projects. Typically, specific runners are used for one project at a time. It process jobs by using FIFO.</li>
</ul>
<h3 id="Reference">Reference</h3>
<ul>
<li><a href="https://www.bmc.com/blogs/continuous-delivery-continuous-deployment-continuous-integration-whats-difference/">https://www.bmc.com/blogs/continuous-delivery-continuous-deployment-continuous-integration-whats-difference/</a></li>
<li><a href="https://blog.tienyulin.com/ci-cd-concept/">https://blog.tienyulin.com/ci-cd-concept/</a></li>
<li><a href="http://myblog-maurice.blogspot.com/2021/01/cicd.html">http://myblog-maurice.blogspot.com/2021/01/cicd.html</a></li>
<li><a href="https://docs.gitlab.com/ee/ci/runners/runners_scope.html">https://docs.gitlab.com/ee/ci/runners/runners_scope.html</a></li>
</ul>
]]></content>
      <categories>
        <category>DevOps</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>GitLab</tag>
        <tag>CI/CD</tag>
      </tags>
  </entry>
  <entry>
    <title>創建 GitLab CICD pipeline 完成自動部屬到 Kubernetes</title>
    <url>/GitLab-CICD-pipeline-Kubernetes/</url>
    <content><![CDATA[<h3 id="前言">前言</h3>
<p>在還沒接觸 CI/CD 時，一直有『這東西一定很難』的預設立場，直到開始撰寫第一個 .gitlab-ci.yml 時，心理認知的困難度仍沒消失。不過慶幸的是，網路上的教學真的很多，GitLab 社群也超給力的有著豐富的文檔跟範例。GitLab CI/CD 整體架構 (gitlab server、runner、excutor、pipeline、stage、job) 其實很單純，所以在實做時，可以把自動化需求切分，先從第一段 build 開始做，做成功後，再進階到 test 及 deploy。把困難的任務分段做，感覺就不那麼難以親近了！</p>
<span id="more"></span>
<h3 id="確認-CI-CD-需求">確認 CI/CD 需求</h3>
<p><a href="https://ulahsieh.github.io/Install-GitLab-Runner-on-k8s-using-helm/">前面文章</a>已經建好了一個 runner，現在要實做 CI/CD pipeline。在開始之前要先確定開發者想透過 CICD 完成哪部分的自動化？以本次實做為例，我想要達成：</p>
<ol>
<li>code 推上 GitLab 後，不須測試，因為在推上 repo 前，皆已在本地端測試完畢。</li>
<li>自動依據專案中的 Dockerfile 檔案 build 成 image，並上傳到 registry，如 DockerHub 或私有倉庫</li>
<li>自動依據專案中的 kubernetes.yaml 檔部屬到 kubernetes cluster 中</li>
</ol>
<h3 id="gitlab-ci-yml">.gitlab-ci.yml</h3>
<p>GitLab CI/CD 透過放置在專案根目錄底下的 <code>.gitlab-ci.yml</code> 檔案來驅動，官網提供了許多 <a href="https://docs.gitlab.com/ee/ci/examples/#cicd-templates">Template</a> 給初學者參考。<br>
定義 pipeline 中會有哪些 stages (預計要有的構建階段)，依序設置。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure>
<p>接著在 Stage 中設置一個到多個 Job，來描述該階段所需完成的工作。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&lt;jobName&gt;:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">&lt;stageName&gt;</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;branchName&gt;</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;My first job&quot;</span></span><br></pre></td></tr></table></figure>
<p>其中</p>
<ul>
<li>stage：指定該 Job 屬於哪一個 Stage</li>
<li>only：指定在哪個 Branch 觸發時才會執行</li>
<li>script：需要執行的指令</li>
</ul>
<h3 id="配置-gitlab-ci-yml">配置 .gitlab-ci.yml</h3>
<p>確定需求後就可以開始寫 .gitlab-ci.yml 檔。</p>
<h4 id="先實做-build-階段">先實做 build 階段</h4>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line"></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="attr">IMAGE_NAME:</span> <span class="string">findkpsn</span></span><br><span class="line">  <span class="attr">CI_IMAGE:</span> <span class="string">$CI_REGISTRY/test/$IMAGE_NAME:$&#123;CI_COMMIT_SHORT_SHA&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build-image:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">tags:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">kubernetes</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">docker</span></span><br><span class="line">  <span class="attr">variables:</span></span><br><span class="line">    <span class="attr">DOCKER_DRIVER:</span> <span class="string">overlay2</span></span><br><span class="line">  <span class="attr">services:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker:dind</span></span><br><span class="line">  <span class="attr">before_script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">login</span> <span class="string">-u</span> <span class="string">$CI_REGISTRY_USER</span> <span class="string">-p</span> <span class="string">$CI_REGISTRY_PASSWORD</span> <span class="string">$CI_REGISTRY</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">-t</span> <span class="string">$CI_IMAGE</span> <span class="string">.</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">push</span> <span class="string">$CI_IMAGE</span></span><br></pre></td></tr></table></figure>
<p>其中：</p>
<ul>
<li>$CI_REGISTRY、$CI_REGISTRY_USER、$CI_REGISTRY_PASSWORD 變數紀錄在 gitlab &gt; Admin Area &gt; CI/CD &gt; Variables 中<br>
<img src="https://imgur.com/gPoZtZm.png" alt=""></li>
<li>${CI_COMMIT_SHORT_SHA} 為 GitLab 預設的環境變數，表示 Git Repo 目前所在的 Commit Hash Code 的前 8 字元。</li>
<li>DOCKER_DRIVER：指定運行的 docker driver，使用 <a href="https://docs.docker.com/storage/storagedriver/overlayfs-driver/">overlayfs</a> 以增進 performance。但 docker 預設的 Storage Driver 就是 overlay2，所以這邊可以省略。</li>
</ul>
<h4 id="在跑的過程中遇到以下問題">在跑的過程中遇到以下問題</h4>
<h5 id="ERROR-Job-failed-system-failure-prepare-environment-setting-up-credentials-secrets-is-forbidden-User-“system-serviceaccount-gitlab-runner-default”-cannot-create-resource-“secrets”-in-API-group-“”-in-the-namespace-“gitlab-runner”">ERROR: Job failed (system failure): prepare environment: setting up credentials: secrets is forbidden: User “system:serviceaccount:gitlab-runner:default” cannot create resource “secrets” in API group “” in the namespace “gitlab-runner”.</h5>
<p><img src="https://imgur.com/DfE2rzH.png" alt=""><br>
原因是因為使用 helm chart 建立 Runner 時，在指定的 values.yaml 設定檔中，應該把 rbac: create: 的值設為 true，在建立時便會自動幫該 namespace 設定對應 service account。</p>
<h5 id="ERROR-Job-failed-command-terminated-with-exit-code-1-Error-response-from-daemon-Get-“https-10-1-5-142-4433-v2-”-x509-certificate-signed-by-unknown-authority">ERROR: Job failed: command terminated with exit code 1 (Error response from daemon: Get “<a href="https://10.1.5.142:4433/v2/">https://10.1.5.142:4433/v2/</a>”: x509: certificate signed by unknown authority)</h5>
<p><img src="https://imgur.com/9zCxj1K.png" alt=""><br>
原因是因為在 pod 所在的 worker node 的 docker 沒有設置對應的 registry 的證書資訊。在 worker node 中的 <code>/etc/docker/cert.d/</code> 中，建立針對該倉庫 URL 的資料夾 (如 10.1.5.142:4433)，並將倉庫的證書、金鑰、ca 證書放置其中。<br>
<img src="https://imgur.com/rjxu0Fl.png" alt=""></p>
<h5 id="ERROR-Job-failed-command-terminated-with-exit-code-1-error-obtaining-VCS-status-exec-“git”-executable-file-not-found-in-PATH">ERROR: Job failed: command terminated with exit code 1 (error obtaining VCS status: exec: “git”: executable file not found in $PATH)</h5>
<p><img src="https://imgur.com/lJzTfk9.png" alt=""></p>
<div class="info">
<p>其實執行到這步驟，設定的 Git Lab CI 檔已經可以正常運作了！這個錯誤訊息已經是 docker build image 階段的錯誤了，意即 Dockerfile 沒寫好，不過順便還是在這篇文章記錄一下。</p>
</div>
<p>在 go build 的過程中如果有 import 從 git repo 上的第三方程式包的話，則需要在 go build 環境中有 <code>git</code>。只要在 Dockerfile 中加上 <code>RUN apk add --no-cache git</code> 即可解決。</p>
<h4 id="後實做-deploy-階段">後實做 deploy 階段</h4>
<p>補齊 deploy stage</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="attr">IMAGE_NAME:</span> <span class="string">findkpsn</span></span><br><span class="line">  <span class="attr">CI_IMAGE:</span> <span class="string">$CI_REGISTRY/test/$IMAGE_NAME:$&#123;CI_COMMIT_SHORT_SHA&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build-image:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">tags:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">kubernetes</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">docker</span></span><br><span class="line">  <span class="attr">variables:</span></span><br><span class="line">    <span class="attr">DOCKER_DRIVER:</span> <span class="string">overlay2</span></span><br><span class="line">  <span class="attr">services:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker:dind</span></span><br><span class="line">  <span class="attr">before_script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">login</span> <span class="string">-u</span> <span class="string">$CI_REGISTRY_USER</span> <span class="string">-p</span> <span class="string">$CI_REGISTRY_PASSWORD</span> <span class="string">$CI_REGISTRY</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">-t</span> <span class="string">$CI_IMAGE</span> <span class="string">.</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">push</span> <span class="string">$CI_IMAGE</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy-to-k8s:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">tags:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">kubernetes</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">bitnami/kubectl:1.20.15</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">kubectl</span> <span class="string">version</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sed</span> <span class="string">-i</span> <span class="string">&quot;s/&lt;VERSION&gt;/$&#123;CI_COMMIT_SHORT_SHA&#125;/g&quot;</span> <span class="string">kubernetes.yaml</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">kubectl</span> <span class="string">create</span> <span class="string">ns</span> <span class="string">findkpsn</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="string">kubernetes.yaml</span></span><br></pre></td></tr></table></figure>
<h4 id="kubernetes-yaml-配置">kubernetes.yaml 配置</h4>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">findkpsn</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">findkpsn</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">findkpsn</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">findkpsn</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">findkpsn</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">findkpsn</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">findkpsn</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">findkpsn</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">findkpsn</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">findkpsn</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">findkpsn</span></span><br><span class="line">        <span class="attr">image:</span> <span class="number">10.1</span><span class="number">.5</span><span class="number">.142</span><span class="string">:4433/test/findkpsn:&lt;VERSION&gt;</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br></pre></td></tr></table></figure>
<h4 id="在跑的過程中遇到以下問題-2">在跑的過程中遇到以下問題</h4>
<h5 id="Error-from-server-Forbidden-error-when-retrieving-current-configuration-of-…-services-“xxx”-is-forbidden-User-“system-serviceaccount-gitlab-runner-default”-cannot-get-resource-“services”-in-API-group-“”-in-the-namespace-“xxx”">Error from server (Forbidden): error when retrieving current configuration of: … services “xxx” is forbidden: User “system:serviceaccount:gitlab-runner:default” cannot get resource “services” in API group “” in the namespace “xxx”</h5>
<p>遇到前面 helm 創建 gitlab runner 時的服務帳戶沒有創建 service 資源的功能。直接使用下面 command 賦予 cluster-admin 的權限給該角色。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl create clusterrolebinding default --clusterrole=cluster-admin --group=system:serviceaccounts --namespace=gitlab-runner</span><br><span class="line">	clusterrolebinding.rbac.authorization.k8s.io/default created</span><br></pre></td></tr></table></figure>
<p>或是在創建 runner 時將 rule 設為全部，並開啟 <code>clusterWideAcess</code> 的權限</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">rbac:</span></span><br><span class="line">  <span class="attr">create:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">      <span class="attr">resources:</span> [<span class="string">&quot;*&quot;</span>]</span><br><span class="line">      <span class="attr">verbs:</span> [<span class="string">&quot;*&quot;</span>]</span><br><span class="line">  <span class="attr">clusterWideAccess:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="成功">成功</h3>
<p><img src="https://imgur.com/L4cd5Pu.png" alt=""><br>
<img src="https://imgur.com/fTBS3Ju.png" alt=""><br>
<img src="https://imgur.com/ItXsMzH.png" alt=""><br>
順便觀察 Runner 在工作的過程會有很多 pod 被建立，隨著構建工作結束後 Runner 會自動刪除這些 pod。<br>
<img src="https://imgur.com/wn5Vd3P.png" alt=""></p>
<h3 id="Reference">Reference</h3>
<ul>
<li><a href="https://docs.gitlab.com/runner/install/kubernetes.html">https://docs.gitlab.com/runner/install/kubernetes.html</a></li>
<li>感謝 <a href="https://marsping.gitlab.io/GitLabCICD/section1.html">https://marsping.gitlab.io/GitLabCICD/section1.html</a> 給的勇氣，研發就是不停踩坑再爬起來的過程 XDD</li>
</ul>
]]></content>
      <categories>
        <category>DevOps</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>GitLab</tag>
        <tag>CI/CD</tag>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>[Golang] Array v.s. Slice</title>
    <url>/Golang-Array-VS-Slice/</url>
    <content><![CDATA[<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
<h3 id="Array">Array</h3>
<p>陣列的長度固定，且為陣列類型的一部份。<br>
（<code>[4]int</code> 以及 <code>[5]int</code> 為兩種獨立且不相容的不同type）</p>
<h4 id="宣告及初始化array">宣告及初始化array</h4>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// var [len]Type，無初始化值，則初始值為zero value</span></span><br><span class="line"><span class="keyword">var</span> arr1 [<span class="number">2</span>]<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// var [len]Type，並給初始值</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">2</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// var [...]Type，讓complier自行計算長度</span></span><br><span class="line"><span class="keyword">var</span> arr3 = [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// := [len]Type，在func中使用簡短宣告符號，無給初始值</span></span><br><span class="line">arr4 := [<span class="number">2</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// := [len]Type，並給初始值</span></span><br><span class="line">arr5 := [<span class="number">2</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// := [...]Type，讓complier自行計算長度</span></span><br><span class="line">arr6 := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>當賦值和傳遞array時，是複製整個陣列內容</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	arr1 := [<span class="number">2</span>]<span class="keyword">string</span>&#123;<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>&#125;</span><br><span class="line">	arr2 := [<span class="number">2</span>]<span class="keyword">string</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">	arr2 = arr1</span><br><span class="line"></span><br><span class="line">	fmt.Printf(<span class="string">&quot;arr1: %p, %v \n&quot;</span>, &amp;arr1, arr1)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;arr2: %p, %v \n&quot;</span>, &amp;arr2, arr2)</span><br><span class="line"></span><br><span class="line">	arr3(arr1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">arr3</span><span class="params">(x [2]<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;arr3: %p, %v \n&quot;</span>, &amp;x, x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>執行結果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arr1: 0x40a0e0, [apple banana] </span><br><span class="line">arr2: 0x40a0f0, [apple banana] </span><br><span class="line">arr3: 0x40a120, [apple banana] </span><br></pre></td></tr></table></figure>
<h4 id="Array-缺點">Array 缺點</h4>
<p>上面三個array的位址皆不相同，驗證傳遞時都是複製整個陣列<br>
如此，可發現使用array的兩個弊處</p>
<table><tr><td bgcolor=AliceBlue>
1. array是固定長度, 使用起來很不彈性</p>
2. 傳遞時複製整個組數，array一大時，便會消耗大量記憶體
</td></tr></table>
<div class="danger">
<p>所以在大多數的Go code中，<font color=DarkBlue><strong>slice較常被使用</strong></font></p>
</div>
<h3 id="Slice">Slice</h3>
<p>slice為Go中的一種資料結構，定義在 <code>src/runtime/slice.go</code> 中：<br>
src/runtime/slice.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> slice <span class="keyword">struct</span> &#123;</span><br><span class="line">	array unsafe.Pointer</span><br><span class="line">	<span class="built_in">len</span>   <span class="keyword">int</span></span><br><span class="line">	<span class="built_in">cap</span>   <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/X3yxgmp.png" alt=""></p>
<p>各field代表如下:</p>
<table><tr><td bgcolor=AliceBlue>
1. pointer：指向底層陣列開始的位置 </p>
2. len：lenth, 為slice的實際長度 </p>
3. cap：capacity, 為當前分給slice的容量大小    
</td></tr></table>
<h4 id="宣告slice">宣告slice</h4>
<p>slice宣告方式有兩種，一種是直接像array一樣宣告, 只差不須指定大小：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(a))  <span class="comment">//5</span></span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(b))  <span class="comment">//5</span></span><br></pre></td></tr></table></figure>
<p>另一種是使用內建函數make<br>
<code>func make([]T, len, cap) []T</code><br>
make可以事先指定底層陣列長度以及欲使用的容量大小</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">b := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">5</span>, <span class="number">5</span>) <span class="comment">//b == [0, 0, 0, 0, 0]</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(b))  <span class="comment">//5</span></span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(b))  <span class="comment">//5</span></span><br></pre></td></tr></table></figure>
<p>使用make時，<font color=DarkBlue>capacity參數可以被省略</font>，而此時的cap==len</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">c := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">5</span>)  <span class="comment">//c == [0, 0, 0, 0, 0]</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(c))  <span class="comment">//5</span></span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(c))  <span class="comment">//5</span></span><br></pre></td></tr></table></figure>
<p>由此得知，slice 本身是一個<span class="dotunderletter">引用型別</span>，底層會有個指標指向一個array。上面宣告的三個slice  a , b , c 都可以用下圖表示<br>
<img src="https://imgur.com/vsjGEip.png" alt=""></p>
<h4 id="Slice的各種使用">Slice的各種使用</h4>
<h5 id="re-slicing-重新切片">re-slicing 重新切片</h5>
<p>使用冒號間隔上下兩參數<code>[:]</code> 可以擷取slice特定範圍的值，<br>
<code>[low-index:high-index]</code><br>
表示取出從<code>low-index</code>開始的值到到<code>high-index減1</code>的值，high-index的索引代表<span class="dotunderletter">及於但不包含</span>(up to but not include)<br>
兩個索引值都可以被忽略，忽略時，上邊界默認值為0, 下邊界默認值為len(x)</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">x := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">y := x[:]  <span class="comment">// y == [1 2 3 4 5]</span></span><br><span class="line">y = x[:<span class="number">2</span>]  <span class="comment">// y == [1 2]</span></span><br><span class="line">y = x[<span class="number">2</span>:]  <span class="comment">// y == [3 4 5]</span></span><br><span class="line">y[<span class="number">2</span>] = <span class="number">0</span>   <span class="comment">// y == [3 4 0] ; x == [1 2 3 4 0]</span></span><br></pre></td></tr></table></figure>
<p>須特別留意的是</p>
<div class="danger">
<p>使用<code>[:]</code>重新切片後，底層的陣列不變，意即y.ptr == x.ptr + 8 (位移了兩位)。 當修改了<code>y[2]</code>的值變是修改了<code>x[4]</code></p>
</div>
<p>若是不想要兩個slice共用同一個array，則要使用下一個內建函數copy</p>
<h5 id="copy-拷貝">copy 拷貝</h5>
<p>使用copy可以複製slice中的array到另一個新的slice的新的array<br>
<code>copy(dist-slice, src-slice)</code></p>
<p>若len(src)小於len(dist)，則會覆蓋目的端的前len(src)個數值：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">x := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">y := []<span class="keyword">int</span>&#123;<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;</span><br><span class="line"><span class="built_in">copy</span>(x, y) <span class="comment">// x == [6 7 8 4 5] 把y複製進x</span></span><br><span class="line">y[<span class="number">2</span>] = <span class="number">0</span>  <span class="comment">// y == [6 7 0] ; x == [6 7 8 4 5] 改了y的值，x不受影響，因為底層array不同</span></span><br></pre></td></tr></table></figure>
<p>若len(src)大於len(dist)，則會複製來源端與len(dist)等長的值：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">x := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">y := []<span class="keyword">int</span>&#123;<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;</span><br><span class="line"><span class="built_in">copy</span>(y, x) <span class="comment">// y == [1 2 3] 把x複製進y</span></span><br></pre></td></tr></table></figure>
<p>另外也可以結合<code>:</code>指定要複製的位置：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">x := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">y := []<span class="keyword">int</span>&#123;<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;</span><br><span class="line"><span class="built_in">copy</span>(y, x[<span class="number">2</span>:]) <span class="comment">// y == [3 4 5]，把x從index 2開始的值複製進y</span></span><br></pre></td></tr></table></figure>
<h5 id="Append-擴增">Append 擴增</h5>
<p>append用來在slice中添加資料，以下為用法：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">x := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line">x = <span class="built_in">append</span>(x, <span class="number">6</span>)  <span class="comment">//append一個數給自己</span></span><br><span class="line"></span><br><span class="line">y := <span class="built_in">append</span>(x, <span class="number">7</span>, <span class="number">8</span>)  <span class="comment">//用別的slice append多個數再給自己</span></span><br><span class="line"> </span><br><span class="line">c = <span class="built_in">append</span>(b, a…) <span class="comment">//拿另一個slice append另一個slice再給自己</span></span><br></pre></td></tr></table></figure>
<div class="danger">
<p>問題來了，使用append函數時，底層的array會是一樣的嗎？　<br>
答案是<span class="dotunderletter"><font color=Red size= 5><strong>不一定</strong></font></span></p>
</div>
</p>
<h5 id="append底層array的共用與分裂">append底層array的共用與分裂</h5>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">x := []<span class="keyword">int</span>&#123;&#125;  <span class="comment">//len(x) == cap(x) == 0</span></span><br><span class="line">y := <span class="built_in">append</span>(x, <span class="number">1</span>) <span class="comment">//len(y) == 1, cap(y) == 2</span></span><br><span class="line">x = <span class="built_in">append</span>(x, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>請問此時的<code>y[0]</code>是多少? <code>y[0] == 1</code><br>
這個例子下 x &amp; y 分別會指向不同的array，因為在第二行，len(y) != cap(x) 的當下，y底層的array就已經另發配新的位址給新的array了</p>
<p>如果x換成以下宣告:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">x := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>, <span class="number">3</span>)  <span class="comment">//len(x) == 0, cap(x) == 3</span></span><br><span class="line">y := <span class="built_in">append</span>(x, <span class="number">1</span>) <span class="comment">//len(y) == len(x) == 1 &lt; cap(x) == 3</span></span><br><span class="line">x = <span class="built_in">append</span>(x, <span class="number">2</span>) <span class="comment">//len(y) == len(x) == 2 &lt; cap(x) == 3</span></span><br></pre></td></tr></table></figure>
<p>請問此時的<code>y[0]</code>是多少？ <code>y[0] == 2</code></p>
<p><code>y[0]</code>會改變的原因是在一開始宣告時記憶體就已經分配cap(x) == 3的空間給底層array，此時使用append加入一個數到array，因為len(y) == len(x) == 1 &lt; cap(x) =3，空間足夠，所以 <strong>x及y的指標會指向同一個位址！</strong> 而後再append一個數到array，也會因為空間足夠，所以兩個slices仍在同一個位址。</p>
<p>再衍生另一個問題－<br>
若原先的最後一行 <code>x = append(x, 2)</code> 改成 <code>x = append(x, 2, 3, 4, 5)</code>，<code>y[0]</code>是多少？</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">x := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line">y := <span class="built_in">append</span>(x, <span class="number">1</span>)</span><br><span class="line">x = <span class="built_in">append</span>(x, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<p>此時的 <code>y[0] == 1</code></p>
<p>因為x插入了4個數值，len(x) = 4 &gt; cap(x) = 3，x使用的array便會換一個新的位址，並擴大capacity成len(x)的兩倍，意即cap(x) = 8<br>
而原先的y保持原來的位址以及數值，len(y) = 1 &lt; cap(y) = 3</p>
<p>由此可知，當在使用append時，如果len &gt;= len時，會開另一塊更大記憶體的array，再把原先的array複製進去。<br>
擴大原則：當容量(cap)小於1024時，會擴大兩倍的容量；當大於1024後，擴大 1.25倍。</p>
<h3 id="結論">結論</h3>
<div class="warning">
<ol>
<li>使用slice比起使用固定長度的array來得有彈性</li>
<li>slice本身為一個引用型別，底層有指標指向一個array</li>
<li>重新切片指改變指標位址，底層陣列不變</li>
<li>copy為另外建一個新的底層array</li>
<li>使用slice時建議事先使用make並規劃好容量cap，這樣在使用append時可以避免反覆重新分配記憶體</li>
</ol>
</div>
<h6 id="Reference">Reference</h6>
<p><font color=GREY size= 2><a href="https://blog.golang.org/go-slices-usage-and-internals">https://blog.golang.org/go-slices-usage-and-internals</a><br>
<a href="https://studygolang.com/articles/6557">https://studygolang.com/articles/6557</a><br>
<a href="https://halfrost.com/go_slice/">https://halfrost.com/go_slice/</a><br>
</font></span></p>
<p>2019的最後一篇文章，祝大家新年快樂 ✨ ☺️<br>
希望明年一切都好，都能在想要的道路上開心的努力著！💪</p>
]]></content>
      <categories>
        <category>Programming</category>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>array</tag>
      </tags>
  </entry>
  <entry>
    <title>[Golang] Function</title>
    <url>/Golang-Function/</url>
    <content><![CDATA[<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
<h3 id="Introduction">Introduction</h3>
<p>在Go裡，function是一等公民，它可以作為另一function中的參數傳遞、可以將它指派給一變數、也可以在另一個function中當作return值。</p>
<p>函式可以具名也可以匿名(anonynous function)；</p>
<span id="more"></span>
<p>一般函式<br>
<code>func (r receiverType) identifier(arguments argumentTypes) returnType&#123;&#125;</code></p>
<p>function中的參數以及返回值可以有零個或多個：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">\\傳入零個argument, 無回傳值</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">()</span></span>&#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;hello!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">\\傳入兩個arguments, 回傳兩個<span class="keyword">return</span> values</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f2</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y, x - y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">\\傳入未知個數的多個arguments</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f3</span><span class="params">(x ...<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> x&#123;</span><br><span class="line">    fmt.Println(x)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>匿名函式為沒有名字的函式<br>
<code>func(arguments) returnType&#123;&#125;</code></p>
<p>以下將針對function作為一等公民的實踐做闡述。</p>
<h3 id="Callback-回呼函式">Callback 回呼函式</h3>
<table><tr><td bgcolor=AliceBlue>
<font size= 3><b>定義</b></font></br>
把function A當作參數傳進另一個function B內，故在執行B的時候會callback回去參考A。
</td></tr></table>
<p>以下範例先定義一個用於加總的函式sum，再定義另一個用於計算奇數總和的函式odd_sum，在odd_sum中丟入sum當作參數去計算總合，實現callback。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	i := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;</span><br><span class="line">	oddsum := odd_sum(sum, i...) <span class="comment">//把sum函數當參數傳入</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;The sum of the odd number in the list I is&quot;</span>, oddsum)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(x ...<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	total := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> x &#123;</span><br><span class="line">		total += v</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> total</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用func(x ...int) int 當函式傳入, 函式變數為f</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">odd_sum</span><span class="params">(f <span class="keyword">func</span>(x ...<span class="keyword">int</span>)</span> <span class="title">int</span>, <span class="title">y</span> ...<span class="title">int</span>) <span class="title">int</span></span> &#123; </span><br><span class="line">	oddlist := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> y &#123;</span><br><span class="line">		<span class="keyword">if</span> v%<span class="number">2</span> == <span class="number">1</span> &#123;</span><br><span class="line">			oddlist = <span class="built_in">append</span>(oddlist, v)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> f(oddlist...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Nested-function-內嵌函式">Nested function 內嵌函式</h3>
<table><tr><td bgcolor=AliceBlue>
<font size= 3><b>定義</b></font></br>
在 Go 中，不允許在function A中又宣告另一個function B，但可以把匿名的function B指定給某變數並放在function A中。
</td></tr></table>
<p>在func main宣告變數f為匿名函式：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	x := <span class="number">0</span></span><br><span class="line">	f := <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">int</span></span>&#123;</span><br><span class="line">			x++</span><br><span class="line">			<span class="keyword">return</span> x</span><br><span class="line">		&#125;</span><br><span class="line">	fmt.Println(f())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="closure-閉包">closure 閉包</h3>
<table><tr><td bgcolor=AliceBlue>
<font size= 3><b>定義</b></font></br>
當<b>匿名函數中使用了<span class="dotunderletter">外部變數</span>x</b>，此時這個匿名函式形成一個閉包。所以閉包可以視為匿名函式的特殊案例之一。
</td></tr></table>
<p>乘上範例，當重複呼叫f()時，會發現x的值存留在函式中：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">	fmt.Println(f())</span><br><span class="line"><span class="addition">+	fmt.Println(f())</span></span><br><span class="line"><span class="addition">+	fmt.Println(f())</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>執行結果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure>
<p>為了更實踐閉包<span class="dotunderletter"><font color=DarkBlue><strong>數據隔離</strong></font></span>的優勢，我們將x與匿名函數移出main function外獨立成為一個函式</p>
<p>其中我們<u>使用匿名函式func() int{…}作為function bar的回傳值</u></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	f := foo()</span><br><span class="line">    fmt.Println(f())</span><br><span class="line">	fmt.Println(f())</span><br><span class="line">    fmt.Println(f())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">()</span> <span class="title">func</span><span class="params">()</span> <span class="title">int</span></span>&#123;</span><br><span class="line">	x := <span class="number">0</span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">		x++</span><br><span class="line">		<span class="keyword">return</span> x</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>執行結果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure>
<p>此時即使我們執行完foo()，變數x仍然存在在閉包中，外部無法訪問汙染。</p>
]]></content>
      <categories>
        <category>Programming</category>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>function</tag>
        <tag>匿名函式</tag>
        <tag>callback</tag>
        <tag>closure</tag>
      </tags>
  </entry>
  <entry>
    <title>[Golang] Method</title>
    <url>/Golang-Method/</url>
    <content><![CDATA[<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
<div class="info">
<p>Golang is all about TYPE!</p>
</div>
<h3 id="定義">定義</h3>
<p>method是一個額外帶有receiver(接收器)的fuction，receiver為某type的變量，而type的型態可以是struct或是non-struct</p>
<span id="more"></span>
<p>語法如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func (r receiverType) identifier(parameter) returnTypes &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>範例如下</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> student <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="keyword">string</span> </span><br><span class="line">	school <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s student)</span> <span class="title">greet</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;Hi, I&#x27;m %v from %v.&quot;</span>, s.name, s.school)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="呼叫method">呼叫method</h3>
<p>type的變量則透過 <code>.</code> 呼叫method：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">		s1 := student&#123;<span class="string">&quot;Alice&quot;</span>, <span class="number">112</span>&#125;</span><br><span class="line">		s2 := student&#123;<span class="string">&quot;Bob&quot;</span>, <span class="number">118</span>&#125;    <span class="comment">//s1 &amp; s2為student type 的變數</span></span><br><span class="line">	</span><br><span class="line">		fmt.Println(s1.greet())</span><br><span class="line">		fmt.Println(s2.greet())    <span class="comment">//透過variable.method呼叫</span></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Pointer-v-s-Value-as-a-receiver">Pointer v.s. Value as a receiver</h3>
<p>method中的receiver可以是值，也可以是pointer，若為pointer，則可以直接修改receiver中的內容。<br>
📢 使用pointer傳遞的時機 📢</p>
<div class="warning">
<ol>
<li>用於欲改變receiver變數的值時</li>
<li>struct 本身很大，複製代價高時</li>
<li>當struct的method有一個receiver為pointer時，則其餘的method的receiver也必須使用pointer</li>
</ol>
</div>
<p>以下範例展現傳值(value)及傳址(pointer)的差異，請留意此範例打破了上面的第三點原則，僅是為了要顯示兩者的異同：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> student <span class="keyword">struct</span> &#123;</span><br><span class="line">	name   <span class="keyword">string</span></span><br><span class="line">	school <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s student)</span> <span class="title">transByValue</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	s.school = x</span><br><span class="line">	<span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;Hi, I&#x27;m %v from %v.&quot;</span>, s.name, s.school)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *student)</span> <span class="title">transByInference</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	s.school = x</span><br><span class="line">	<span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;Hi, I&#x27;m %v from %v.&quot;</span>, s.name, s.school)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s1 := student&#123;<span class="string">&quot;Alice&quot;</span>, <span class="number">112</span>&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Println(s1.transByValue(<span class="number">118</span>))</span><br><span class="line">	fmt.Println(s1.school)</span><br><span class="line"></span><br><span class="line">	fmt.Println((&amp;s1).transByValue(<span class="number">117</span>))</span><br><span class="line">	fmt.Println(s1.school)</span><br><span class="line">	</span><br><span class="line">	fmt.Println(s1.transByInference(<span class="number">113</span>))</span><br><span class="line">	fmt.Println(s1.school)</span><br><span class="line">	</span><br><span class="line">	fmt.Println((&amp;s1).transByInference(<span class="number">114</span>))</span><br><span class="line">	fmt.Println(s1.school)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>執行結果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hi, I&#x27;m Alice from 118.</span><br><span class="line">112</span><br><span class="line">Hi, I&#x27;m Alice from 117.</span><br><span class="line">112</span><br><span class="line">Hi, I&#x27;m Alice from 113.</span><br><span class="line">113</span><br><span class="line">Hi, I&#x27;m Alice from 114.</span><br><span class="line">114</span><br></pre></td></tr></table></figure>
<p>由上述範例中，可以發現到：</p>
<div class="warning">
<p>🔎 當使用value作為receiver傳遞時，函數僅copy了值，並無改變到變數本身<br>
🔎 當使用pointer作為receiver傳遞時，是傳遞整個變數，故會改到變數本身</p>
</div>
]]></content>
      <categories>
        <category>Programming</category>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>method</tag>
      </tags>
  </entry>
  <entry>
    <title>[Golang] 查詢 SQL DB 的幾種匯出方式</title>
    <url>/Golang-SQL-Query/</url>
    <content><![CDATA[<p>簡易紀錄一下 sql query 回傳(印出)查詢結果的三種不同方法，三種方式回傳的格式都差不多，只是型態可能不一樣。本文使用的 database 是 Oracle。</p>
<span id="more"></span>
<h3 id="連線">連線</h3>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;database/sql&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">	_ <span class="string">&quot;github.com/godror/godror&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	username = <span class="string">&quot;ula&quot;</span></span><br><span class="line">	password = <span class="string">&quot;123456&quot;</span></span><br><span class="line">	host     = <span class="string">&quot;10.90.1.207&quot;</span></span><br><span class="line">	port     = <span class="number">1521</span></span><br><span class="line">	sid      = <span class="string">&quot;emesHY&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	oralInfo := fmt.Sprintf(<span class="string">&quot;%s/%s@%s:%d/%s&quot;</span>, username, password, host, port, sid)</span><br><span class="line">	db, err := sql.Open(<span class="string">&quot;godror&quot;</span>, oralInfo)</span><br><span class="line"></span><br><span class="line">	err = db.Ping()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;cant connect&quot;</span>)</span><br><span class="line">		db.Close()</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	sqlComand := fmt.Sprintf(<span class="string">&quot;SELECT DISTINCT SERIAL_NUMBER,PRE_KPSN,THIS_KPSN,DATECODE,LOTCODE from EMESC.VP_ASSY_SUMMARY_SMT where serial_number = &#x27;TBCBB2039913&#x27;&quot;</span>)</span><br><span class="line"></span><br><span class="line">	rows, err := db.Query(sqlComand)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;Query Database Failed!&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> rows.Close()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 插入以下其中一種作法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="作法一">作法一</h3>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">columns, err := rows.Columns()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">count := <span class="built_in">len</span>(columns)</span><br><span class="line">tableData := <span class="built_in">make</span>([]<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;, <span class="number">0</span>)</span><br><span class="line">values := <span class="built_in">make</span>([]<span class="keyword">interface</span>&#123;&#125;, count)</span><br><span class="line">valuePtrs := <span class="built_in">make</span>([]<span class="keyword">interface</span>&#123;&#125;, count)</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; count; i++ &#123;</span><br><span class="line">		valuePtrs[i] = &amp;values[i]</span><br><span class="line">	&#125;</span><br><span class="line">	rows.Scan(valuePtrs...)</span><br><span class="line">	entry := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">	<span class="keyword">for</span> i, col := <span class="keyword">range</span> columns &#123;</span><br><span class="line">		<span class="keyword">var</span> v <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">		val := values[i]</span><br><span class="line">		b, ok := val.([]<span class="keyword">byte</span>)</span><br><span class="line">		<span class="keyword">if</span> ok &#123;</span><br><span class="line">			v = <span class="keyword">string</span>(b)</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			v = val</span><br><span class="line">		&#125;</span><br><span class="line">		entry[col] = v</span><br><span class="line">	&#125;</span><br><span class="line">	tableData = <span class="built_in">append</span>(tableData, entry)</span><br><span class="line">&#125;</span><br><span class="line">jsonData, err := json.Marshal(tableData)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// fmt.Println(string(jsonData))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result []<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := json.Unmarshal([]<span class="keyword">byte</span>(jsonData), &amp;result); err != <span class="literal">nil</span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Can&#x27;t parse the json string&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(result)</span><br></pre></td></tr></table></figure>
<h3 id="作法二">作法二</h3>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Kpsn <span class="keyword">struct</span> &#123;</span><br><span class="line">	SN   <span class="keyword">string</span> <span class="string">`json:&quot;Serial_Number&quot;`</span></span><br><span class="line">	Pre  <span class="keyword">string</span> <span class="string">`json:&quot;Pre_KPSN&quot;`</span></span><br><span class="line">	This <span class="keyword">string</span> <span class="string">`json:&quot;This_KPSN&quot;`</span></span><br><span class="line">	DC   <span class="keyword">string</span> <span class="string">`json:&quot;Datecode&quot;`</span></span><br><span class="line">	LC   <span class="keyword">string</span> <span class="string">`json:&quot;Lotcode&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> kpsns []*Kpsn</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">	k := <span class="built_in">new</span>(Kpsn)</span><br><span class="line">	rows.Scan(&amp;k.SN, &amp;k.Pre, &amp;k.This, &amp;k.DC, &amp;k.LC)</span><br><span class="line">	kpsns = <span class="built_in">append</span>(kpsns, k)</span><br><span class="line">&#125;</span><br><span class="line">jsonStr, _ := json.Marshal(&amp;kpsns)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result []<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="comment">// var result []Kpsn</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := json.Unmarshal([]<span class="keyword">byte</span>(jsonStr), &amp;result); err != <span class="literal">nil</span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Can&#x27;t parse the json string&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="作法三">作法三</h3>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sn, pre, this, dc, lc <span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> result []<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">	rows.Scan(&amp;sn, &amp;pre, &amp;this, &amp;dc, &amp;lc)</span><br><span class="line">	<span class="keyword">var</span> tmp <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">	tmp = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">	tmp[<span class="string">&quot;SERIAL_NUMBER&quot;</span>] = sn</span><br><span class="line">	tmp[<span class="string">&quot;PRE_KPSN&quot;</span>] = pre</span><br><span class="line">	tmp[<span class="string">&quot;THIS_KPSN&quot;</span>] = this</span><br><span class="line">	tmp[<span class="string">&quot;DATECODE&quot;</span>] = dc</span><br><span class="line">	tmp[<span class="string">&quot;LOTCODE&quot;</span>] = lc</span><br><span class="line">	result = <span class="built_in">append</span>(result, tmp)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(result)</span><br></pre></td></tr></table></figure>
<h3 id="Reference">Reference</h3>
<ul>
<li><a href="https://stackoverflow.com/a/29164115/13318115">https://stackoverflow.com/a/29164115/13318115</a></li>
</ul>
]]></content>
      <categories>
        <category>Programming</category>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>[HTML] 介紹 &amp; 基礎標籤</title>
    <url>/HTML-Basic1/</url>
    <content><![CDATA[<h2 id="網頁是什麼">網頁是什麼</h2>
<p>網頁背後就是一個有結構的純文字檔 html，靠瀏覽器渲染成我們現在看到的畫面。</p>
<span id="more"></span>
<p><img src="https://imgur.com/nv5JkQo.png" alt=""></p>
<h2 id="HTML">HTML</h2>
<p>全名是 HyperText Markup Language 超文本標記語言，是一種用於建立網頁的標準標記語言，是由一堆成對的標籤組合而成的。</p>
<h2 id="基本架構">基本架構</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="撰寫規則">撰寫規則</h3>
<p><img src="https://imgur.com/UQbNXRe.png" alt=""></p>
<ol>
<li>HTML文件裡的標籤需成對，以<code>&lt;標籤名稱&gt;</code>為開頭；<code>&lt;/標籤名稱&gt;</code>為結尾。</li>
<li>如果標籤沒有值要包裹的話，則可以直接使用 <code>&lt;標籤名稱 /&gt;</code> 視為一組標籤。</li>
<li>標籤內可擁屬性，<code>&lt;標籤名稱 屬性名稱=&quot;屬性值&quot;&gt;標籤內容&lt;?標籤名稱&gt;</code>，屬性可有零個或多個，以空格分開。</li>
<li>註解文字使用 <code>&lt;!--註解--&gt;</code>。</li>
<li>HTML標籤不分大小寫。</li>
</ol>
<hr>
<h4 id="DOCTYPE-HTML"><code>&lt;!DOCTYPE HTML&gt;</code></h4>
<p>告知瀏覽器要使用最新版的 HTML 5 語法解讀文件，規定<strong>必須放在第一行</strong>，否則瀏覽器會認不得。</p>
<h4 id="html-html"><code>&lt;html&gt;&lt;/html&gt;</code></h4>
<p>用來包裹整個 html 內含的程式碼，代表網頁的開始和結束。</p>
<h4 id="head-head"><code>&lt;head&gt;&lt;/head&gt;</code></h4>
<p>用來放網頁的描述。主要用來告訴搜尋引擎這個網頁有什麼樣的內容、控制網頁與外部程式碼的連結 (script)、定義網頁使用的樣式等等 (css)。常用的標籤有：</p>
<ul>
<li><code>&lt;title&gt;</code>: 網頁標題</li>
<li><code>&lt;meta&gt;</code> : 提供搜尋引擎關於網頁內容的簡介</li>
<li><code>&lt;link&gt;</code> : 網頁內與外部資源的關連</li>
<li><code>&lt;base&gt;</code> : 設定網頁內 URL 的預設目標</li>
<li><code>&lt;style&gt;</code> : 導入網頁樣式，如 CSS</li>
<li><code>&lt;script&gt;</code> : 導入 javascript 程式碼</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;網頁關鍵字&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;網頁簡短描述&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>&lt;meta charset=&quot;utf-8&quot;&gt;</code>：告訴瀏覽器這個網頁所用的編碼方式為 utf-8。</li>
<li><code>&lt;meta name=&quot;keywords&quot;</code>：用來放置網頁關鍵字，可增進 SEO(Search Engine Optimization)，讓搜索引擎找到。</li>
<li><code>&lt;meta name=&quot;description&quot;</code>：用來寫網頁的簡短描述，可增進 SEO。</li>
<li><code>&lt;title&gt;Hello!&lt;/title&gt;</code>：網頁的標題，顯示在書籤頁上。</li>
</ul>
<hr>
<h4 id="body-body"><code>&lt;body&gt;&lt;/body&gt;</code></h4>
<p>網頁的內文，真正顯示的頁面內容放在 body 標籤內。<br>
<img src="https://imgur.com/oGXkADV.png" alt=""></p>
<hr>
<h5 id="heading-paragraph"><code>heading &amp; paragraph</code></h5>
<ul>
<li><code>&lt;h?&gt;&lt;/h&gt;</code>：標題，其中 <code>? = 1 ~ 6</code>，由大到小 <code>&lt;h1&gt; 到 &lt;h6&gt;</code>。</li>
<li><code>&lt;p&gt;段落文字&lt;/p&gt;</code><br>
<img src="https://imgur.com/Kj8pDfB.png" alt=""></li>
<li><code>&lt;hr /&gt;</code>：文章分割線。</li>
</ul>
<h5 id="pre-break"><code>pre &amp; break</code></h5>
<p>在段落中<code>&lt;p&gt;</code>使用空行以及多個空白，都僅會被瀏覽器解析成一個空白，如下圖。<br>
<img src="https://imgur.com/VCAO59k.png" alt=""></p>
<ul>
<li><code>&lt;pre&gt;</code>：preformatted text，可將包裹的文字保持原先的格式。</li>
<li><code>&lt;br&gt;</code>：line break，換行，<code>&lt;br&gt;</code> 或是 <code>&lt;br/&gt;</code> 都可以。<br>
<img src="https://imgur.com/Sh4udTP.png" alt=""></li>
</ul>
<h5 id="div-span"><code>div &amp; span</code></h5>
<ul>
<li><code>&lt;div&gt;</code> tag：division，使用 div tag 可以在網頁內創造不同的分組，可以直接使用 div 來加入 CSS 語法做排版。</li>
<li><code>&lt;span&gt;</code> tag：span 與 div 一樣都是用來分組，但不同的是使用 span 不會換行。<br>
<img src="https://imgur.com/dL49EQF.png" alt=""></li>
</ul>
<h5 id="img"><code>img</code></h5>
<p>使用 <code>&lt;img src=&quot;圖片網址&quot; /&gt;</code> 來插入圖片，其中可以加入以下屬性。</p>
<ul>
<li>title：<code>&lt;img title=&quot;圖片敘述&quot; src=&quot;url&quot;&gt;</code>，可在網頁中當游標移到圖片上時顯示描述。</li>
<li>alt：<code>&lt;img alt=&quot;image not found&quot; src=&quot;url&quot;&gt;</code>，當圖片無法顯示時，將以 alt 屬性值的文字取代顯示。</li>
</ul>
<hr>
<h5 id="list"><code>list</code></h5>
<ul>
<li><code>&lt;ul&gt;</code>： unordered list，無序清單</li>
<li><code>&lt;ol&gt;</code>： ordered list，有序清單
<ul>
<li><code>&lt;ol type='?'&gt;</code>：其中 ? 可以是 <code>1 (default)</code>、<code>a</code>、<code>A</code>、<code>i</code>、<code>I</code>，表示序號的類型。</li>
<li><code>&lt;ol start='2'&gt;</code>：指定序號起始位置。</li>
</ul>
</li>
<li><code>&lt;li&gt;</code>： list item，清單項目<br>
<img src="https://imgur.com/4KyfHRC.png" alt=""></li>
</ul>
<h5 id="define-list"><code>define list</code></h5>
<p><code>&lt;dl&gt;</code> 定義了一個定義列表，通常用來描述一些術語定義，比如附錄裡的詞彙表，或用來顯示 key-value 這樣成對的鍵和值。</p>
<ul>
<li><code>&lt;dt&gt;</code>：definition title，定義標題</li>
<li><code>&lt;dd&gt;</code>：definition description，定義描述</li>
</ul>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Firefox<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>A free, open source, cross-platform, graphical web browser</span><br><span class="line">      developed by the Mozilla Corporation and hundreds of volunteers.<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- other terms and definitions --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>
<table><tr><td bgcolor=#FAFAFA>
<dl>
  <dt>Firefox</dt>
  <dd>A free, open source, cross-platform, graphical web browser
      developed by the Mozilla Corporation and hundreds of volunteers.</dd>
  <!-- other terms and definitions -->
</dl>
</td></tr></table>
<hr>
<h5 id="table"><code>table</code></h5>
<ul>
<li>
<p><code>&lt;table&gt;</code>：表格</p>
</li>
<li>
<p><code>&lt;tr&gt;</code>：table row</p>
</li>
<li>
<p><code>&lt;th&gt;</code>：table header</p>
</li>
<li>
<p><code>&lt;td&gt;</code>：table cell<br>
<img src="https://imgur.com/4tiOPPO.png" alt=""><br>
使用以上標籤來製作表格內容，另外框線是 CSS 的工作。<br>
可以直接在 <code>&lt;table&gt;</code> 標籤內加入屬性：</p>
</li>
<li>
<p>width, height：設定整個表格的欄位的寬高。</p>
</li>
<li>
<p>border：設定表格外框。</p>
</li>
<li>
<p>cellspacing：表格欄位間的距離。</p>
</li>
<li>
<p>cellpadding：表格欄位內容與邊框的間距，預設為 1。<br>
<img src="https://imgur.com/pacz1D4.png" alt=""></p>
</li>
<li>
<p>align：屬性值有 center, left, right 的對齊方式，可放在不同標籤內而針對不同的對象。</p>
<ul>
<li>table 標籤：針對整個表格在整個畫面上的對齊</li>
<li>tr 標籤：針對一整個列的表格內容在表格內的對齊</li>
<li>td 標籤：指單一個表格的內容對齊</li>
</ul>
</li>
<li>
<p>valign：<font color="Crimson">只能放在 <code>&lt;tr&gt;</code> 或 <code>&lt;td&gt;</code> 標籤內</font>，屬性值有 top, middle, bottom。</p>
</li>
<li>
<p>colspan：合併行欄位，屬性值為欲合併的欄位數。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span>合併<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<table>
	<tr>
        <td colspan="3">合併</td>
    </tr>
    <tr>
    	<td>1</td>
        <td>2</td>
        <td>3</td>
    </tr>
</table>
- rowspan：合併列欄位，屬性值為欲合併的列位數。
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>合併<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<table>
	<tr>
        <td rowspan="2">合併</td>
        <td>2</td>
        <td>3</td>
    </tr>
    <tr>
        <td>2</td>
        <td>3</td>
    </tr>
</table>
<hr>
<h5 id="anchor"><code>anchor</code></h5>
<p><code>&lt;a&gt;</code> 錨點，有兩個用途，連結到外面的位址或是連結到網頁本身內部位置。</p>
<ul>
<li>href：hypertext reference，<code>&lt;a href=&quot;https://google.com&quot;&gt;請點我連結到 google&lt;/a&gt;</code>。</li>
<li>target：<code>&lt;a href=&quot;https://google.com&quot; target=&quot;_self&quot;&gt;請點我連結到 google&lt;/a&gt;</code>，屬性值如果是<code>_self</code>，則會在當下頁面跳轉，屬性值如果是<code>_blank</code>，則會在另外的分頁開啟。<br>
連結到網頁本身則需要在標題標籤內加上 id 的屬性，如下圖：<br>
<img src="https://imgur.com/bCz7kKF.gif" alt=""></li>
</ul>
<hr>
<h5 id="語意化元素"><code>語意化元素</code></h5>
<p><img src="https://imgur.com/RSjKkL0.png" alt=""><br>
語意化元素 Semantic Elements，雖然在網頁上看起來不會有什麼變化，但是卻有他的意義，讓機器或開發人員更直覺的區別該區塊的作用。</p>
<ul>
<li><code>&lt;main&gt;</code>：指網頁最主要的部份，可用 main 標籤包起來。</li>
<li><code>&lt;nav&gt;</code>：navigation 導覽列，至於網頁上方的選單。<br>
<img src="https://imgur.com/CQ5xNz2.png" alt=""></li>
<li><code>&lt;footer&gt;</code>：通常放在網站最下方，例如版權宣告…。<br>
<img src="https://imgur.com/3pwe9cZ.png" alt=""><br>
更多的語意化標籤可以在 <a href="https://www.w3schools.com/html/html5_semantic_elements.asp">w3schools</a> 上查到。</li>
</ul>
<hr>
<h5 id="iframe"><code>iframe</code></h5>
<p>用來嵌入其他網頁，但很多大網站都會加入 <code>X-Frame-Option</code> 去禁止被嵌入。<br>
下圖示範將部落格嵌入到網頁中，並設定寬為 100%，高為 250 像素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://ulahsieh.github.io/&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;250px&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/leC1UGj.png" alt=""></p>
<hr>
<h5 id="form"><code>form</code></h5>
<p><code>&lt;form&gt;</code> 用於創建 HTML 表單，屬性值有下列幾種：</p>
<table width="90%" border="0" cellspacing="0" cellpadding="10">
    <tr valign="top"> 
      <td width="32%">action = <i>url</i></td>
      <td width="68%">指定表單處理程式的 url。若不指定，則表單不會被處理。</td>
    </tr>
    <tr valign="top"> 
      <td width="32%">method = get | post </td>
      <td width="68%">指定何種送出表單資料的 HTTP 方式。可能值為 get（預設值）或 post。</td>
    </tr>
    <tr valign="top"> 
      <td width="32%">name = <i>string</i></td>
      <td width="68%">指定表單的名稱。客戶端程式（如 JavaScript）或伺服端程式（如 ASP 或 PHP）可以用這個名稱來存取表單的內容，因此，你應該用這一個屬性替每一個表單取名，以便利撰寫處理表單的程式。</td>
    </tr>
    <tr valign="top"> 
      <td width="32%">enctype = <i>content-type</i> </td>
      <td width="68%">當 method 屬性設成 post 時，這個屬性指定資料送出的格式。預設值為 application/x-www-form-urlencoded。一般而言，使用預設值即可，但是製作上傳檔案的表單時，這個屬性應該改為 
        multipart/form-data。 </td>
    </tr>
    <tr valign="top"> 
      <td width="32%">accept-charset =<i> charset-list</i></td>
      <td width="68%">指定表單資料的字元編碼格式。若不只一種格式的話，格式名稱之間必須用空白或逗號分開。預設值為 UNKNOWN。一般而言，使用預設值即可。</td>
    </tr>
    <tr valign="top"> 
      <td width="32%">accept = <i>content-type-list </i></td>
      <td width="68%">指定表單內容的格式。若不只一種格式的話，格式名稱之間必須用逗號分開。這個屬性常配合上傳檔案的功能，讓瀏覽器用其所指定的格式來篩選檔案。 
      </td>
    </tr>
</table>
<h6 id="input"><code>&lt;input&gt;</code></h6>
<p>需要搭配屬性 <code>type</code> 使用，常見的屬性值有：</p>
<ul>
<li>text，一般文字輸入框。
<ul>
<li>placeholder：輸入提示</li>
</ul>
</li>
<li>password，可自動將輸入的文字轉不可讀的點點。</li>
<li>email，會自動驗證是否符合 email 格式（包含 ＠）。<br>
<img src="https://imgur.com/W3ODwqT.png" alt=""></li>
<li>date，可以自動產生出日期選擇器。</li>
<li>radio，單選框，<code>&lt;input type=&quot;radio&quot; name=&quot;gender&quot; id=&quot;male&quot;/&gt;&lt;label for=&quot;male&quot;&gt;男&lt;/label&gt;</code>
<ul>
<li>name：將選項<strong>群組化</strong>，使答案只能單選。</li>
<li>checked：默認選項</li>
<li>id &amp; lable for：使得點選選項的文字也能作用，可提升使用者體驗。</li>
</ul>
</li>
<li>checkbox，複選框，用法同上，差別在選項可複選。</li>
<li>submit，提交的按鈕，加上 value 屬性可以修改按鈕文字，點擊後會跳轉(執行) form 標籤中的 action 的 api。</li>
<li>reset，重置表單域中的欄位內容。</li>
</ul>
<h6 id="select"><code>&lt;select&gt;</code></h6>
<p>是下拉式選單的最外層元件，具有的屬性如下：</p>
<ul>
<li>name = string，指定元件的名稱。</li>
<li>size = number，指定同時顯示出的選項個數，預設值為 1。</li>
<li>multiple，允許複選。</li>
</ul>
<h6 id="option"><code>&lt;option&gt;</code></h6>
<p>這個元件用來建立選單中的選項，必須擺在 <code>&lt;SELECT&gt;</code> 元件之中。它的屬性如下：</p>
<ul>
<li>selected：預選這一個選項。</li>
<li>value = string：指定選項的代表值。</li>
<li>label = string：指定選項的替代標籤文字。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--使用 div 隔開換行--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;請輸入姓名&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    密碼：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    Email：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    生日：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    性別：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;male&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">id</span>=<span class="string">&quot;female&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;female&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">id</span>=<span class="string">&quot;other&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;other&quot;</span>&gt;</span>其他<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    興趣：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sport&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;sport&quot;</span>&gt;</span>運動<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;read&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;read&quot;</span>&gt;</span>看書<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;music&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;music&quot;</span>&gt;</span>聽音樂<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;drama&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;drama&quot;</span>&gt;</span>追劇<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">　<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;送出表單&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<table><tr><td bgcolor=#FAFAFA>
<form>
  <div>
    姓名：<input type="text" placeholder="請輸入姓名" />
  </div>
  <div>
    密碼：<input type="password" />
  </div>
  <div>
    Email：<input type="email" />
  </div>
  <div>
    生日：<input type="date" />
  </div>
  <div>
    性別：<input type="radio" name="gender" id="male" checked="checked"/><label for="male">男</label>
    <input type="radio" name="gender" id="female"/><label for="female">女</label>
    <input type="radio" name="gender" id="other"/><label for="other">其他</label>
  </div>
  <div>居住地：
  	<select name="city" size="1">
  		<option value="taipei">台北市</option>
  		<option value="taichung">台中市</option>
  		<option value="Kao">高雄市</option>
  	</select>
  </div>
  <div>
    興趣：<input type="checkbox" id="sport"/><label for="sport">運動</label>
    <input type="checkbox" id="read"/><label for="read">看書</label>
    <input type="checkbox" id="music"/><label for="music">聽音樂</label>
    <input type="checkbox" id="drama"/><label for="drama">追劇</label>
　</div>
  <div>
    <input type="submit" value="送出表單"/>
    <input type="reset" value="清除"/>
  </div>
</form>
</td></tr></table>
<h3 id="在網頁中顯示標籤">在網頁中顯示標籤</h3>
<p>使用跳脫字元（escape）</p>
<ul>
<li><code>&lt;</code> 由 <code>&amp;lt;</code> 取代</li>
<li><code>&gt;</code> 由 <code>&amp;gt;</code> 取代</li>
<li><code>&amp;</code> 由 <code>&amp;amp;</code> 取代</li>
<li><code> </code> (空格) 由 <code>&amp;nbsp;</code> 取代</li>
</ul>
<h6 id="Reference">Reference</h6>
<ul>
<li><a href="http://notepad.yehyeh.net/Content/WebDesign/HTML/01/1.php">http://notepad.yehyeh.net/Content/WebDesign/HTML/01/1.php</a></li>
<li><a href="https://www.w3schools.com/html/html5_semantic_elements.asp">https://www.w3schools.com/html/html5_semantic_elements.asp</a></li>
<li><a href="http://know.webhek.com/html5/html-dl-dt-dd.html">http://know.webhek.com/html5/html-dl-dt-dd.html</a></li>
<li><a href="https://www.cs.pu.edu.tw/~tsay/course/webprog/notes/form">https://www.cs.pu.edu.tw/~tsay/course/webprog/notes/form</a></li>
<li>此篇為觀看 Lidemy FE101 的筆記，部分內容取自上課影片</li>
</ul>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>[HTTP] content-type</title>
    <url>/HTTP-content-type/</url>
    <content><![CDATA[<h2 id="定義">定義</h2>
<p>網際網路媒體類型（Internet media type，也稱為 MIME 類型（MIME type）或內容類型（content type））是給網際網路上傳輸的內容賦予的分類類型。HTTP 透過 <code>content-type</code> 的header 來表示 request 或 response message 的 body 是用何種方式編碼，伺服器會根據編碼類型使用特定的解析方式，獲取數據流中的數據。</p>
<span id="more"></span>
<p>其格式為</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">類型名/子類型名; 可選参数</span><br></pre></td></tr></table></figure>
<p>比如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">text/html; charset = UTF-8</span><br></pre></td></tr></table></figure>
<h2 id="常見類型">常見類型</h2>
<h3 id="application-x-www-form-urlencoded">application/x-www-form-urlencoded</h3>
<ul>
<li>最常見的POST提交數據方式，數據以鍵值 key1=val1&amp;key2=val2 的方式編碼（urlencoded），編碼主要用來轉換易混淆的字串如 <code>&amp;</code>、<code>=</code>。</li>
<li>瀏覽器原生表單 <code>&lt;form&gt;</code> 默認的提交方式（沒有特別設 enctype 屬性的話）。</li>
<li>jquery 默認 post 請求提交的方式。<br>
<img src="https://imgur.com/g5ZON7t.png" alt=""></li>
</ul>
<h3 id="multipart-form-data">multipart/form-data</h3>
<p>不會對字元編碼，在使用包含檔案上傳控制元件的表單時，則必須使用該值<code>&lt;form enctype=&quot;multipart/form-data&quot;&gt;</code>。</p>
<p>會生成一個複雜的 boundary 字串來分割不同的字段。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST http://www.example.com HTTP/1.1</span><br><span class="line">Content-Type:multipart/form-data; boundary=----WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class="line">Content-Disposition: form-data; name=&quot;text&quot;</span><br><span class="line">title</span><br><span class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;chrome.png&quot;</span><br><span class="line">Content-Type: image/png</span><br><span class="line">PNG ... content of chrome.png ...</span><br><span class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA--</span><br></pre></td></tr></table></figure>
<p>Body 中按照字段個數可分為多個相同結構的部分，每部分都是以 <code>--boundary</code> 開始，接著內容描述信息，換行，最後是字段具體內容（文本或二進制）。Body 最後以 <code>--boundary--</code> 標示結束。</p>
<h3 id="text-plain">text/plain</h3>
<p>數據以純文本形式(text/json/xml/html)進行編碼，其中不含任何控制項或格式字符。</p>
<div class="warning">
<p>以上三種 content type，是 HTML5 規範中 form 的 enctype 的可能值。</p>
</div>
<h3 id="application-json">application/json</h3>
<p>用 json 來傳遞參數資料，可以方便的提交複雜的結構化數據，特別適合 RESTful 的接口。</p>
<div class="warning">
<p>application/json 已經被 W3C 遺棄，建議不要在<code>&lt;form enctype=&quot;...&quot;&gt;</code>中使用，即使用了如果瀏覽器不支持，也會替換成 application/x-www-form-urlencoded。<br>
同理，其余的 MIME 類型，也不支持，均會替換成默認編碼 application/x-www-form-urlencoded。</p>
</div>
<h6 id="Reference">Reference</h6>
<p>[1]<a href="https://imququ.com/post/four-ways-to-post-data-in-http.html">https://imququ.com/post/four-ways-to-post-data-in-http.html</a><br>
[2] <a href="https://zh.wikipedia.org/wiki/%E4%BA%92%E8%81%94%E7%BD%91%E5%AA%92%E4%BD%93%E7%B1%BB%E5%9E%8B">https://zh.wikipedia.org/wiki/互联网媒体类型</a><br>
[3] <a href="https://www.itread01.com/content/1516643918.html">https://www.itread01.com/content/1516643918.html</a></p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>[HTML] 設置 html 標籤達成 SEO</title>
    <url>/HTML-SEO/</url>
    <content><![CDATA[<h2 id="SEO">SEO</h2>
<p>Search Engine Optimization 搜尋引擎優化，是一種透過了解搜尋引擎的運作規則來調整網站，以及提高目的網站在有關搜尋引擎內排名的方式。[1]</p>
<span id="more"></span>
<p>SEO 優化的是指不須付費的原生流量。<br>
<img src="https://imgur.com/2EAfGvU.png" alt=""><br>
以下提供幾種簡單的方式來達成</p>
<h3 id="meta-tag"><code>&lt;meta&gt;</code> tag</h3>
<p>HTML meta 標籤可以用來提供網頁內容的資訊給瀏覽器或是搜尋引擎。</p>
<ul>
<li><code>&lt;title&gt;頁面標題&lt;/title&gt;</code>：頁面標題是爬蟲第一個檢索到的要素。</li>
<li><code>&lt;meta name=&quot;description&quot; content=&quot;網頁說明&quot; /&gt;</code>：是在搜尋結果頁中呈現的網頁說明。<br>
<img src="https://imgur.com/3zYVPix.png" alt=""><br>
針對不同社群網站的 meta tag，</li>
<li>facebook<br>
例如下面這四行是寫給 facebook 看的，分享到 facebook 上會呈現指定畫面：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:title&quot;</span> <span class="attr">content</span>=<span class="string">&quot;網站名稱或標題&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:url&quot;</span> <span class="attr">content</span>=<span class="string">&quot;網址&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:image&quot;</span> <span class="attr">content</span>=<span class="string">&quot;要顯示的縮圖網址&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;網頁描述&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>app link<br>
在手機瀏覽網頁時，會自動偵測是否有安裝 app，以下以 iOS 舉例：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 當使用者未安裝 App，會跳出的建議下載文字 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;al:ios:app_name&quot;</span> <span class="attr">content</span>=<span class="string">&quot;TripAdvisor&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 這可以讓使用者在未安裝 App 時，連結至安裝位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;al:ios:app_store_id&quot;</span> <span class="attr">content</span>=<span class="string">&quot;284876795&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="JSON-ld">JSON-ld</h3>
<p>JavaScript Object Notation for Linked Data，JSON 格式的結構化資料，簡單來說就是在描述這個網頁的型態及內容，Google 會較傾向去讀取網頁中這樣的結構化資料，並顯示在搜尋結果上。</p>
<h4 id="JSON-ld用法">JSON-ld用法</h4>
<p>由 @context  定義 JSON-LD 使用的各種類別，@type 宣告應用的屬性，再選擇<a href="https://schema.org/docs/full.html">schema.org</a>中有提到的種類，例如: WebSite, Organization, Product等，後續再根據後續屬性，如：“name”,“url” 對應填入描述的格式即可。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;application/ld+json&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">[&#123;</span></span><br><span class="line"><span class="javascript">	<span class="string">&quot;@context&quot;</span>: <span class="string">&quot;http://schema.org&quot;</span>,</span></span><br><span class="line"><span class="javascript">	<span class="string">&quot;@type&quot;</span>: <span class="string">&quot;NewsArticle&quot;</span>,</span></span><br><span class="line"><span class="javascript">	<span class="string">&quot;thumbnailUrl&quot;</span>: <span class="string">&quot;https://uc.udn.com.tw/photo/2020/07/12/91/8174102.jpg&quot;</span>,</span></span><br><span class="line"><span class="javascript">	<span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://udn.com/news/story/6813/4695186&quot;</span>,</span></span><br><span class="line"><span class="javascript">	<span class="string">&quot;mainEntityOfPage&quot;</span>: <span class="string">&quot;https://udn.com/news/story/6813/4695186&quot;</span>,</span></span><br><span class="line"><span class="javascript">	<span class="string">&quot;headline&quot;</span>: <span class="string">&quot;川普終於戴口罩了 首次公開亮相！&quot;</span>,</span></span><br><span class="line"><span class="javascript">	<span class="string">&quot;articleSection&quot;</span>: <span class="string">&quot;全球&quot;</span>,</span></span><br><span class="line"><span class="javascript">	<span class="string">&quot;datePublished&quot;</span>: <span class="string">&quot;2020-07-12T07:19:07+08:00&quot;</span>,</span></span><br><span class="line"><span class="javascript">	<span class="string">&quot;dateModified&quot;</span>: <span class="string">&quot;2020-07-12T21:06:13+08:00&quot;</span>,</span></span><br><span class="line"><span class="javascript">	<span class="string">&quot;keywords&quot;</span>: <span class="string">&quot;口罩,疫情,川普,福特&quot;</span>,	</span></span><br><span class="line"><span class="javascript">	<span class="string">&quot;image&quot;</span>: &#123;</span></span><br><span class="line"><span class="javascript">		<span class="string">&quot;@type&quot;</span>: <span class="string">&quot;ImageObject&quot;</span>,</span></span><br><span class="line"><span class="javascript">		<span class="string">&quot;contentUrl&quot;</span>: <span class="string">&quot;https://uc.udn.com.tw/photo/2020/07/12/91/8174102.jpg&quot;</span>,</span></span><br><span class="line"><span class="javascript">		<span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://pgw.udn.com.tw/gw/photo.php?u=https://uc.udn.com.tw/photo/2020/07/12/91/8174102.jpg&amp;s=Y&amp;x=0&amp;y=0&amp;sw=652&amp;sh=435&amp;exp=3600&quot;</span>,</span></span><br><span class="line"><span class="javascript">		<span class="string">&quot;name&quot;</span>: <span class="string">&quot;在疫情期間一直抗拒戴口罩的川普總統，11日訪問華特里德軍醫院時，難得地戴上口罩；這是他自新冠疫情爆發以來，首度戴著口罩公開亮相。美聯社&quot;</span>,</span></span><br><span class="line"><span class="javascript">		<span class="string">&quot;height&quot;</span>: <span class="string">&quot;1000&quot;</span>,</span></span><br><span class="line"><span class="javascript">		<span class="string">&quot;width&quot;</span>: <span class="string">&quot;800&quot;</span></span></span><br><span class="line"><span class="javascript">	&#125;,</span></span><br><span class="line"><span class="javascript">	<span class="string">&quot;author&quot;</span>: &#123;</span></span><br><span class="line"><span class="javascript">		<span class="string">&quot;@type&quot;</span>: <span class="string">&quot;Person&quot;</span>,</span></span><br><span class="line"><span class="javascript">		<span class="string">&quot;name&quot;</span>: <span class="string">&quot;世界新聞網／即時報導&quot;</span></span></span><br><span class="line"><span class="javascript">	&#125;,</span></span><br><span class="line"><span class="javascript">	<span class="string">&quot;publisher&quot;</span>: &#123;</span></span><br><span class="line"><span class="javascript">		<span class="string">&quot;@type&quot;</span>: <span class="string">&quot;Organization&quot;</span>,</span></span><br><span class="line"><span class="javascript">		<span class="string">&quot;name&quot;</span>: <span class="string">&quot;聯合新聞網 | 聯合新聞網&quot;</span>,</span></span><br><span class="line"><span class="javascript">		<span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://udn.com&quot;</span>,</span></span><br><span class="line"><span class="javascript">		<span class="string">&quot;sameAs&quot;</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript">		<span class="string">&quot;logo&quot;</span>: &#123;</span></span><br><span class="line"><span class="javascript">			<span class="string">&quot;@type&quot;</span>: <span class="string">&quot;ImageObject&quot;</span>,</span></span><br><span class="line"><span class="javascript">			<span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://udn.com/static/img/UDN_BABY.png&quot;</span>,</span></span><br><span class="line"><span class="javascript">			<span class="string">&quot;height&quot;</span>: <span class="string">&quot;1000&quot;</span>,</span></span><br><span class="line"><span class="javascript">			<span class="string">&quot;width&quot;</span>: <span class="string">&quot;800&quot;</span></span></span><br><span class="line"><span class="javascript">		&#125;</span></span><br><span class="line"><span class="javascript">	&#125;</span></span><br><span class="line"><span class="javascript">&#125;]</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>[3]<br>
呈現在 Google 搜尋結果則會像下面這樣：<br>
<img src="https://imgur.com/slB8jwM.png" alt=""></p>
<h4 id="JSON-ld-相關資源">JSON-ld 相關資源</h4>
<p>在 <a href="https://developers.google.com/search/docs/data-types/article">Google 開發者文件</a>中有提供了 20 多種的類型可以在搜尋結果有不一樣的呈現，其中都有範例以及欄位說明，而 JSON-LD 標準的欄位其實多到數不完，詳細可以參考<a href="https://schema.org/">schema.org</a>。</p>
<h4 id="JSON-ld-測試工具">JSON-ld 測試工具</h4>
<p>另外 Google 也提供了<a href="https://search.google.com/structured-data/testing-tool">結構化資料測試工具</a>可以讓開發者快速的檢查是否有欄位缺漏。</p>
<hr>
<h3 id="robot-txt">robot.txt</h3>
<p>給網頁爬蟲看的檔案，可以標記出那些是要爬的哪些不是。如果你有特定頁面（例如未完成或測試用的頁面）會傷害使用者體驗（UX），則可以透過 robot.txt 去阻止該頁面出現在搜尋結果中。以下是標示在檔案內的資訊</p>
<ul>
<li>User-agent：填入搜尋引擎爬蟲（* 號代表全部）</li>
<li>Disallow：填入你希望搜尋引擎<strong>別</strong>檢索的頁面路徑</li>
<li>Allow：若你禁止檢索的頁面路徑裡面又有特定路徑你希望搜尋引擎檢索，則填入。<br>
[5]</li>
</ul>
<hr>
<h3 id="sitemap-xml">sitemap.xml</h3>
<p>網站地圖 sitemap.xml 包含了網站內所有網頁的目錄檔案，提供給搜尋引擎的爬蟲閱讀，讓搜尋引擎可以知道網站內到底有哪些網頁。另外當你在網站中新增了一篇文章，從新增到被搜爬蜘蛛搜爬可能已經過了好幾天。只要更新 sitemap 並重新提交，就可以讓爬蟲知道你的網站有進行更新，進而重新檢索網頁。<br>
sitemap 會上傳到網站的根目錄，輸入網址 <code>http://www.example.com/sitemap.xml</code>，就可以看到。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">urlset</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.sitemaps.org/schemas/sitemap/0.9&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">loc</span>&gt;</span>https://www.example.com.tw<span class="tag">&lt;/<span class="name">loc</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">loc</span>&gt;</span>https://www.example.com.tw/a.html<span class="tag">&lt;/<span class="name">loc</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">loc</span>&gt;</span>https://www.example.com.tw/b.html<span class="tag">&lt;/<span class="name">loc</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">urlset</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h6 id="Reference">Reference</h6>
<p>[1]<a href="https://zh.wikipedia.org/wiki/%E6%90%9C%E5%B0%8B%E5%BC%95%E6%93%8E%E6%9C%80%E4%BD%B3%E5%8C%96">https://zh.wikipedia.org/wiki/搜尋引擎最佳化</a><br>
[2]<a href="https://www.webdesigns.com.tw/structured-data-JSON-LD.asp">https://www.webdesigns.com.tw/structured-data-JSON-LD.asp</a><br>
[3]view-source:<a href="https://udn.com/news/story/6813/4695186">https://udn.com/news/story/6813/4695186</a><br>
[4]<a href="https://medium.com/@z3388638/%E4%BD%BF%E7%94%A8-json-ld-%E8%99%95%E7%90%86-seo-%E4%B8%A6%E8%AE%93-google-%E9%87%9D%E5%B0%8D%E4%B8%8D%E5%90%8C%E5%BD%A2%E5%BC%8F%E7%B6%B2%E7%AB%99%E5%81%9A%E7%8D%A8%E7%89%B9%E7%9A%84%E6%90%9C%E5%B0%8B%E7%B5%90%E6%9E%9C%E5%91%88%E7%8F%BE-9c74783c017a">https://medium.com/@z3388638/使用-json-ld-處理-seo-並讓-google-針對不同形式網站做獨特的搜尋結果呈現-9c74783c017a</a><br>
[5]<a href="https://www.yesharris.com/meta-robots-and-robots-txt/">https://www.yesharris.com/meta-robots-and-robots-txt/</a><br>
[all] 此篇為觀看 Lidemy FE101 的筆記，部分內容取自上課影片</p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>SEO</tag>
      </tags>
  </entry>
  <entry>
    <title>[Hexo] 設定可切換的 Dark Mode</title>
    <url>/Hexo-Dark-Mode/</url>
    <content><![CDATA[<p>在 NexT 主題中引入 Darkmode.js 以支持網頁的 Dark Mode。</p>
<span id="more"></span>
<p>打開 <code>.\themes\next\layout\_scripts</code> 文件夾內的 <code>vendors.njk</code> 文件，在末尾添加以下代碼：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/darkmode-js@1.5.7/lib/darkmode-js.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/darkmode-js@1.5.7/lib/darkmode-js.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  function addDarkmodeWidget() &#123;</span><br><span class="line">    const options = &#123;</span><br><span class="line">      bottom: &#x27;64px&#x27;, // default: &#x27;32px&#x27;</span><br><span class="line">      right: &#x27;unset&#x27;, // default: &#x27;32px&#x27;</span><br><span class="line">      left: &#x27;32px&#x27;, // default: &#x27;unset&#x27;</span><br><span class="line">      time: &#x27;1s&#x27;, // default: &#x27;0.3s&#x27;</span><br><span class="line">      mixColor: &#x27;#fff&#x27;, // default: &#x27;#fff&#x27;</span><br><span class="line">      backgroundColor: &#x27;#fff&#x27;,  // default: &#x27;#fff&#x27;</span><br><span class="line">      buttonColorDark: &#x27;#100f2c&#x27;,  // default: &#x27;#100f2c&#x27;</span><br><span class="line">      buttonColorLight: &#x27;#fff&#x27;, // default: &#x27;#fff&#x27;</span><br><span class="line">      saveInCookies: true, // default: true,</span><br><span class="line">      label: &#x27;🌓&#x27;, // default: &#x27;&#x27;</span><br><span class="line">      autoMatchOsTheme: true // default: true</span><br><span class="line">    &#125;</span><br><span class="line">    const darkmode = new Darkmode(options);</span><br><span class="line">    darkmode.showWidget();</span><br><span class="line">  &#125;</span><br><span class="line">  window.addEventListener(&#x27;load&#x27;, addDarkmodeWidget);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>p.s. 用此方式設定時，此代碼和在 Next 中插入背景圖片以及透明化會有衝突，但剛好目前都沒有該設定，就直接套用了。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>[Hexo] Add Search Function under NexT8 Theme</title>
    <url>/Hexo-Add-Search-Function-NexT8/</url>
    <content><![CDATA[<p>文章愈來愈多啦，只用目錄跟標籤找有如大海撈針，所以來幫部落格添加本站搜索的功能！在這邊記錄一下。</p>
<span id="more"></span>
<h2 id="npm-安裝套件">npm 安裝套件</h2>
<p>Hexo 沒有本地搜尋的功能，但 NexT 主題已經內建搜尋功能的選項，不過需額外安裝套件。建議直接安裝 NexT 釋出的 hexo-generator-searchdb 套件會比較穩定。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb</span><br></pre></td></tr></table></figure>
<h2 id="修改-config-檔">修改 config 檔</h2>
<p>可以直接在 <code>themes/_config.yml</code> 找到 search 的相關設置，將 <code>enable: false</code> 改成 <code>true</code>。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h2 id="重新啟動-hexo-server">重新啟動 hexo server</h2>
<p>就簡簡單單的大功告成了，讚嘆 NexT!<br>
<img src="https://imgur.com/Vr1z0AW.gif" alt=""></p>
<h2 id="Reference">Reference</h2>
<ul>
<li><a href="https://home.gamer.com.tw/artwork.php?sn=5273365">https://home.gamer.com.tw/artwork.php?sn=5273365</a></li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>[Hadoop] HDFS、MapReduce、Yarn 介紹</title>
    <url>/Hadoop-introduction/</url>
    <content><![CDATA[<p>Hadoop 是一個能夠儲存並管理大量資料的分散式大數據處理平臺，其包含三大模組：</p>
<ul>
<li>HDFS</li>
<li>MapReduce</li>
<li>Yarn</li>
</ul>
<span id="more"></span>
<h2 id="HDFS">HDFS</h2>
<p>HDFS為 Hadoop Distributed File System 的縮寫，分散式檔案系統。由 NameNode 與 DataNode 組成。</p>
<h3 id="NameNode-DataNode">NameNode &amp; DataNode</h3>
<p>NameNode：儲存檔案的 block 清單，稱之為 metadata。<br>
DataNode：負責儲存實體檔案的 block。</p>
<h3 id="HDFS-Architecture">HDFS Architecture</h3>
<p>儲存檔案到 HDFS 前，檔案會被切成數等分小區塊 (block)，並且會將同一個 block 複製成數等分(replication, 預設值是 3 份) 再分散儲存到各個 DataNode，且相同的 block 不會同時存在於同一個 DataNode 上。<br>
同時由 NameNode 管理記載 block 的儲存位置，當某個 Hadoop client 需要讀取這個檔案時，會先跟 NameNode 發出請求，NameNode 會根據這份清單回覆檔案的 block 位於哪幾台 DataNode，Hadoop client 再根據這份清單將各個 block 讀取出來，還原成一個完整個檔案。<br>
<img src="https://imgur.com/R3nEcsJ.png" alt=""></p>
<h3 id="特性">特性</h3>
<p>擴充性：Hadoop 可以通過增加節點輕易的擴展儲存能力或處理效能。<br>
可靠性：由 block 的複本機制達成，當一個 Data Node 失效、毀損造成資料遺失，可以從其他台 Data Node 可以取得該檔案的複本資料。</p>
<hr>
<h2 id="MapReduce">MapReduce</h2>
<p>MapReduce是一種程式模型，用於大數據的並行運算。<br>
HDFS 處理好的檔案資料，搭配 Map &amp; Reduce 函數，將資料片段傳送到計算節點（Mapping），由各個節點計算處理之後再做整合（Reducimg），達到分散式計算。</p>
<h3 id="模型流程">模型流程</h3>
<p><img src="https://imgur.com/6cmcxE2.png" alt=""></p>
<ol>
<li>fork：將要執行的 MapReduce 程式複製到 Master 與每一個 Worker 機器中。Master 與 Worker 在Hadoop 中即為 JobTracker(NameNode) 與 TaskTracker(DataNode)。</li>
<li>assign map：Master 決定 Map 程式與 Reduce 程式，分別由哪些 Worker 機器執行。</li>
<li>read：將所有的資料區塊，分配到執行 Map 程式的 Worker 機器中進行 Map。在 Hadoop 中 input files 會存放在 HDFS 上，要執行 Map 程式的 Worker node，就會照著 Master 分配的資料 link，到 HDFS 上去找到他要執行的資料區塊</li>
<li>local write：將 Map 後的結果存入 Worker 機器的本地磁碟。</li>
<li>remote read：執行 Reduce 程式的 Worker 機器，遠端讀取每一份 Map 結果，進行彙整與排序，同時執行 Reduce 程式。</li>
<li>write：將使用者需要的運算結果輸出</li>
</ol>
<p>由於 MapReduce 所有運算的過程都會讀寫檔案，運算效能相較之下就比較慢。運算的功能慢慢的被 Apache Spark 所取代。</p>
<hr>
<h2 id="Yarn">Yarn</h2>
<p>Yarn 是一個資源管理系統，用來管理分散式運算應用程式所使用的資源。所以在 Hadoop 平台上執行 MapReduce 的應用程式，就需藉由 Yarn 監控和分配資源來確保工作正常運作。由一個 ResourceManager，與至少一台的 NodeManager 組成，數量預設會與 DataNode 相同。</p>
<h3 id="ResourceManagrt-NodeManager-ApplicationMaster">ResourceManagrt &amp; NodeManager &amp; ApplicationMaster</h3>
<p>ResourceManager(RM)：用來管理與裁決 Hadoop 叢集內資源的使用，擁有絕對的控制權和對資源的分配權。<br>
NodeManager(NM)：負責監控 Hadoop 叢集內每台機器的資源使用情況，例如memory, cpu, disk, network等，並且將資訊回報給 ResourceManager。<br>
ApplicationMaster(AM)：負責每一個 application 的調度和協調。</p>
<h3 id="Yarn-Architecture">Yarn Architecture</h3>
<p><img src="https://imgur.com/ihpVFgK.png" alt=""><br>
YARN 的具體工作流程為：</p>
<ol>
<li>client 提交 application</li>
<li>RM 為該應用分配 Container 與對應 NM 通信，要求 NM 在Container 中啟動 AM</li>
<li>AM 啟動後向 RM 註冊</li>
<li>AM 通過輪詢向 RM 申請領用 Container 資源</li>
<li>AM 申請到資源後與 NM 通信，要求啟動任務</li>
<li>運行中的程序會向 AM 通過協議通信同步運行狀態與進度</li>
<li>在應用執行期間，client 與 AM 通信同步任務狀態訊息</li>
<li>應用運行結束後，AM 向 RM 註銷並關閉自己， Container 資源釋放</li>
</ol>
<h6 id="Reference">Reference</h6>
<ul>
<li><a href="https://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-hdfs/HdfsDesign.html">https://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-hdfs/HdfsDesign.html</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10190756">https://ithelp.ithome.com.tw/articles/10190756</a></li>
<li><a href="https://chenhh.gitbooks.io/parallel_processing/content/apache_spark/mapreduce.html">https://chenhh.gitbooks.io/parallel_processing/content/apache_spark/mapreduce.html</a></li>
<li><a href="https://hadoop.apache.org/docs/current/hadoop-yarn/hadoop-yarn-site/YARN.html">https://hadoop.apache.org/docs/current/hadoop-yarn/hadoop-yarn-site/YARN.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Big Data</category>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
        <tag>Yarn</tag>
        <tag>MapReduce</tag>
        <tag>HDFS</tag>
      </tags>
  </entry>
  <entry>
    <title>[Hexo] NexT 更改字體</title>
    <url>/Hexo-NEXT-CHANGE-FONT/</url>
    <content><![CDATA[<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
<p>Blog最重要的組成為文章，所以第一篇就決定來記錄我怎麼改網站的文字字體。</p>
<p>使用的方法是載入Google Font API -<br>
<a href="https://fonts.google.com/">Google Font</a> 是一個包含近千種開源字體的字型庫，使用者除了可以免費下載外，還能在網站上自動產生程式碼，將字體內嵌到自己的網站上使用。</p>
<span id="more"></span>
<p>目前網站上僅提供兩種繁體中文，思源黑體以及思源宋體：</p>
<p><img src="https://imgur.com/1FqzQ9b.png" alt="goole-font"></p>
<p>以下為步驟：</p>
<h3 id="選定字型"><strong>選定字型</strong></h3>
<p>進入官網選擇喜歡的字型，依照網站樣式需求可以選擇多個，如文章內文中文欲使用思源宋體、英文欲使用Lato…<br>
請在字體右上角點選  <code>+</code>  加入選擇清單(底部提示框)<br>
<img src="https://imgur.com/1ZrVFvc.png" alt="google-font2"></p>
<p>在已選擇清單中，切換分頁至 <code>CUSTOMIZE</code> ，勾選font-weight(regular400, bold700…)以及下方的語言(Latin &amp; Chinese Traditional)</p>
<p><img src="https://imgur.com/epwyaFs.png" alt=""></p>
<p>切回 <code>EMBED</code> 分頁，並複製網站自動編好的HTML code</p>
<p><img src="https://imgur.com/BXchlhN.png" alt=""></p>
<h3 id="編輯本地端文件"><strong>編輯本地端文件</strong></h3>
<h4 id="config-yml">_config.yml</h4>
<p>綠底及紅底分別代表code的增減。需特別注意的是 <code>global</code> 的 <code>family</code> 參數建議輸入英文字體，因為中文字型庫通常會包含英文字，故如若設為中文字體，則網站全域的預設文字包含英文皆會使用指定的中文字體。<br>
另外下方還有 <code>title</code> 網站標題、 <code>headings</code> 標頭、 <code>posts</code> 文章、 <code>codes</code> 程式碼，可以特別指定字體。</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># 文件位置：~/blog/themes/next/_config.yml</span><br><span class="line"></span><br><span class="line">font:</span><br><span class="line"><span class="deletion">- enable: false</span></span><br><span class="line"><span class="addition">+ enable: true</span></span><br><span class="line"></span><br><span class="line">  # Uri of fonts host, e.g. //fonts.googleapis.com (Default).</span><br><span class="line">  host:</span><br><span class="line"></span><br><span class="line">  # Font options:</span><br><span class="line">  # `external: true` will load this font family from `host` above.</span><br><span class="line">  # `family: Times New Roman`. Without any quotes.</span><br><span class="line">  # `size: x.x`. Use `em` as unit. Default: 1 (16px)</span><br><span class="line"></span><br><span class="line">  # Global font settings used for all elements inside &lt;body&gt;.</span><br><span class="line">  global:</span><br><span class="line">    external: true</span><br><span class="line">    family: Lato</span><br><span class="line">    size:</span><br><span class="line"></span><br><span class="line">  # Font settings for site title (.site-title).</span><br><span class="line">  title:</span><br><span class="line">    external: true</span><br><span class="line">    family: Amatic SC</span><br><span class="line">    size:</span><br><span class="line"></span><br><span class="line">  # Font settings for headlines (&lt;h1&gt; to &lt;h6&gt;).</span><br><span class="line">  headings:</span><br><span class="line">    external: true</span><br><span class="line">    family: Lato</span><br><span class="line">    size:</span><br><span class="line"></span><br><span class="line">  # Font settings for posts (.post-body).</span><br><span class="line">  posts:</span><br><span class="line">    external: true</span><br><span class="line">    family:</span><br><span class="line"></span><br><span class="line">  # Font settings for &lt;code&gt; and code blocks.</span><br><span class="line">  codes:</span><br><span class="line">    external: true</span><br><span class="line">    family:</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>而中文字體則到下方文件設置：</p>
<h4 id="base-styl">base.styl</h4>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># 文件位置: ~/blog/themes/next/source/css/_variables/base.styl</span><br><span class="line"></span><br><span class="line">// Font families.</span><br><span class="line"></span><br><span class="line"><span class="deletion">- $font-family-chinese      = &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;;</span></span><br><span class="line"><span class="addition">+ $font-family-chinese      = &quot;Noto Serif TC&quot;;</span></span><br></pre></td></tr></table></figure>
<h4 id="head-swig">head.swig</h4>
<p>接著將步驟一Google Font所複製的 <code>EMBED</code> 代碼貼上到 <code>head.swig</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文件位置: ~/blog/themes/next/layout/_partials/head/head.swig</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">&lt;link</span> <span class="string">href=&quot;https://fonts.googleapis.com/css?family=Noto+Serif+TC:400,500,700&amp;display=swap&amp;subset=chinese-traditional&quot;</span> <span class="string">rel=&quot;stylesheet&quot;&gt;</span></span><br></pre></td></tr></table></figure>
<p>最後重新佈署便完成了! 😆</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>[Docker] Install Docker &amp; Docker Compose on CentOS7</title>
    <url>/Install-Docker-Docker-Compose-on-CentOS7/</url>
    <content><![CDATA[<h3 id="移除舊版">移除舊版</h3>
<span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure>
<h3 id="透過-repository-安裝-Docker">透過 repository 安裝 Docker</h3>
<h4 id="設定-repo">設定 repo</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils</span><br><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>
<h4 id="安裝-Docker-engine">安裝 Docker engine</h4>
<p>安裝最新版</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>
<p>第一次安裝 Docker 的時候，會匯入 GPG 的金鑰，Docker CE 版的金鑰指紋是 <code>060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35</code>，確認無誤就選擇 y 匯入。</p>
<h4 id="啟動-Docker">啟動 Docker</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure>
<p>查看是否成功跑起來</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@test ~]# docker version</span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           20.10.0</span><br><span class="line"> API version:       1.41</span><br><span class="line"> Go version:        go1.13.15</span><br><span class="line"> Git commit:        7287ab3</span><br><span class="line"> Built:             Tue Dec  8 18:57:35 2020</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Context:           default</span><br><span class="line"> Experimental:      true</span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          20.10.0</span><br><span class="line">  API version:      1.41 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.13.15</span><br><span class="line">  Git commit:       eeddea2</span><br><span class="line">  Built:            Tue Dec  8 18:56:55 2020</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     false</span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.4.3</span><br><span class="line">  GitCommit:        269548fa27e0089a8b8278fc4fc781d7f65a939b</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.0.0-rc92</span><br><span class="line">  GitCommit:        ff819c7e9184c13b7c2607fe6c30ae19403a7aff</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.19.0</span><br><span class="line">  GitCommit:        de40ad0</span><br></pre></td></tr></table></figure>
<h4 id="以非-root-使用者執行-docker">以非 root 使用者執行 docker</h4>
<p>如果想要使用一般使用者帳號來執行 Docker，要先將該帳號加入 docker 群組：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo usermod -aG docker &lt;USERNAME&gt;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="安裝-docker-compose">安裝 docker compose</h3>
<h4 id="使用-curl">使用 curl</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ curl -L &quot;https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br><span class="line">$ chmod +x /usr/local/bin/docker-compose</span><br><span class="line">$ docker-compose -v</span><br></pre></td></tr></table></figure>
<h4 id="使用-pytion-pip">使用 pytion-pip</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ yum -y install -y epel-release    # 安裝pip需要先安裝epel-release包</span><br><span class="line">$ yum install -y python-pip         # 安裝pip</span><br><span class="line">$ pip install --upgrade pip         # 升級pip</span><br><span class="line">$ pip install docker-compose        # 安裝docker-compose</span><br><span class="line">$ docker-compose -v                 # 查看docker-compose的版本</span><br><span class="line">$ pip install --upgrade backports.ssl_match_hostname  # 如果安裝時報錯則下</span><br></pre></td></tr></table></figure>
<h3 id="Reference">Reference</h3>
<ul>
<li><a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></li>
<li><a href="https://www.itread01.com/content/1555398180.html">https://www.itread01.com/content/1555398180.html</a></li>
</ul>
]]></content>
      <categories>
        <category>DevOps</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>docker-compose</tag>
      </tags>
  </entry>
  <entry>
    <title>[TCP/IP] 網路層 - IP</title>
    <url>/IP/</url>
    <content><![CDATA[<h2 id="網路層-Network-Layer">網路層 Network Layer</h2>
<h3 id="IP">IP</h3>
<p>Internet Protocol，網絡上每一個節點都有一個獨立的 IP Address，當裝置連接網路時會被分配 IP，用以標識。通過 IP 位址，裝置間可以互相知道對方並通訊。<br>
有 IPv4 及 IPv6 兩個版本，IPv6 是為了要解決 IPv4 不足的問題。</p>
<span id="more"></span>
<h4 id="固定-IP-v-s-浮動-IP">固定 IP　v.s. 浮動 IP</h4>
<p>固定 IP 指使用的 IP 都是同一個，不會因為斷線再重新連線而改變，適合給線上服務的伺服器使用．便於提供一些固定連線的服務(Web Server, Domain Name Server, Mail Server…)；<br>
浮動 IP 指每次連接時 IP 都會不同，通常給對 IP 位址不要求的一般用戶使用。且因為 IP 每次變動，比較不容易被駭客鎖定，相較於固定 IP 安全。</p>
<h4 id="實體-IP-v-s-虛擬-IP">實體 IP v.s. 虛擬 IP</h4>
<p>實體 IP 又稱 Public IP，指的是可以在網路上溝通的 IP。在網路的世界裡，用實體IP 辨識每一部電腦的位置。<br>
虛擬 IP 又稱 Private IP，被設計用來解決實體 IP 不足的問題。透過 IP 分享器，讓多台電腦各自擁有虛擬 IP，並對外共用一個實體 IP。<br>
預留的三個虛擬 IP 網段：</p>
<ul>
<li>A Class：10.0.0.0 - 10.255.255.255</li>
<li>B Class：172.16.0.0 - 172.31.255.255</li>
<li>C Class：192.168.0.0 - 192.168.255.255<br>
<img src="https://imgur.com/gRSIi6a.png" alt=""> [all]</li>
</ul>
<h4 id="NAT">NAT</h4>
<p>擁有私有 IP 的內部使用者到要到網際網路需經過網路位址轉換(Network address translation, NAT)的機制，這個機制會把網路封包內容的虛擬IP變成真實IP。<br>
<img src="https://imgur.com/NvK2KsN.png" alt=""> [1]</p>
<h4 id="DNS">DNS</h4>
<p>Domain Name Server，處理 Domain Name 與實際 IP 的轉換。<br>
<img src="https://imgur.com/X9ulQwP.png" alt=""><br>
[2]</p>
<h6 id="Reference">Reference</h6>
<p>[1]<a href="https://support.huawei.com/enterprise/en/doc/EDOC1100027155?section=j00e&amp;topicName=configuring-a-nat-device-when-external-users-want-to-access-an-internal-server">https://support.huawei.com/enterprise/en/doc/EDOC1100027155?section=j00e&amp;topicName=configuring-a-nat-device-when-external-users-want-to-access-an-internal-server</a><br>
[2]<a href="https://techthatmatter.com/best-fastest-bsnl-dns-servers/">https://techthatmatter.com/best-fastest-bsnl-dns-servers/</a><br>
[all] 記此篇為觀看 Lidemy NET101 的筆記，圖片來源以及部分內容取自上課影片</p>
]]></content>
      <categories>
        <category>程式初心者</category>
        <category>TCP/IP</category>
      </categories>
      <tags>
        <tag>TCP/IP</tag>
      </tags>
  </entry>
  <entry>
    <title>[Kubernetes] Ingress does not contain a valid IngressClass</title>
    <url>/Ingress-does-not-contain-a-valid-IngressClass/</url>
    <content><![CDATA[<h2 id="問題描述">問題描述</h2>
<p>nginx ingress 從原本 deprecated 的 stable/nginx-ingress helm chart 改為 ingress-nginx/ingress-nginx chart 後，發現 ingress resource 的 nginx 網頁 404 not found，查看 ingress nginx controller log 發現有 <code>ingress does not contain a valid IngressClass</code> 的錯誤。</p>
<span id="more"></span>
<p><img src="https://imgur.com/lPUFtBq.png" alt=""></p>
<p>完整 log 如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@testm terraform]# kubectl logs -f -n ingress-nginx ingress-nginx-controller-5c5bf8c854-7pcf7</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">NGINX Ingress controller</span><br><span class="line">  Release:       v1.1.1</span><br><span class="line">  Build:         a17181e43ec85534a6fea968d95d019c5a4bc8cf</span><br><span class="line">  Repository:    https://github.com/kubernetes/ingress-nginx</span><br><span class="line">  nginx version: nginx/1.19.9</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">W0209 05:43:07.359176       7 client_config.go:615] Neither --kubeconfig nor --master was specified.  Using thesterConfig.  This might not work.</span><br><span class="line">I0209 05:43:07.359883       7 main.go:223] &quot;Creating API client&quot; host=&quot;https://10.96.0.1:443&quot;</span><br><span class="line">I0209 05:43:07.379993       7 main.go:267] &quot;Running in Kubernetes cluster&quot; major=&quot;1&quot; minor=&quot;20&quot; git=&quot;v1.20.15&quot; &quot;clean&quot; commit=&quot;8f1e5bf0b9729a899b8df86249b56e2c74aebc55&quot; platform=&quot;linux/amd64&quot;</span><br><span class="line">I0209 05:43:07.644539       7 main.go:104] &quot;SSL fake certificate created&quot; file=&quot;/etc/ingress-controller/ssl/defake-certificate.pem&quot;</span><br><span class="line">I0209 05:43:07.675915       7 ssl.go:531] &quot;loading tls certificate&quot; path=&quot;/usr/local/certificates/cert&quot; key=&quot;/ual/certificates/key&quot;</span><br><span class="line">I0209 05:43:07.727278       7 nginx.go:255] &quot;Starting NGINX Ingress controller&quot;</span><br><span class="line">I0209 05:43:07.828276       7 event.go:282] Event(v1.ObjectReference&#123;Kind:&quot;ConfigMap&quot;, Namespace:&quot;ingress-nginxe:&quot;ingress-nginx-controller&quot;, UID:&quot;c6943575-18fe-471a-aa44-5f251af7a277&quot;, APIVersion:&quot;v1&quot;, ResourceVersion:&quot;104FieldPath:&quot;&quot;&#125;): type: &#x27;Normal&#x27; reason: &#x27;CREATE&#x27; ConfigMap ingress-nginx/ingress-nginx-controller</span><br><span class="line">I0209 05:43:08.929877       7 nginx.go:297] &quot;Starting NGINX process&quot;</span><br><span class="line">I0209 05:43:08.930002       7 leaderelection.go:248] attempting to acquire leader lease ingress-nginx/ingress-cler-leader...</span><br><span class="line">I0209 05:43:08.930504       7 nginx.go:317] &quot;Starting validation webhook&quot; address=&quot;:8443&quot; certPath=&quot;/usr/local/icates/cert&quot; keyPath=&quot;/usr/local/certificates/key&quot;</span><br><span class="line">I0209 05:43:08.930926       7 controller.go:155] &quot;Configuration changes detected, backend reload required&quot;</span><br><span class="line">I0209 05:43:08.945063       7 leaderelection.go:258] successfully acquired lease ingress-nginx/ingress-controllder</span><br><span class="line">I0209 05:43:08.945130       7 status.go:84] &quot;New leader elected&quot; identity=&quot;ingress-nginx-controller-5c5bf8c854-</span><br><span class="line">I0209 05:43:09.015595       7 controller.go:172] &quot;Backend successfully reloaded&quot;</span><br><span class="line">I0209 05:43:09.015708       7 controller.go:183] &quot;Initial sync, sleeping for 1 second&quot;</span><br><span class="line">I0209 05:43:09.015766       7 event.go:282] Event(v1.ObjectReference&#123;Kind:&quot;Pod&quot;, Namespace:&quot;ingress-nginx&quot;, Namress-nginx-controller-5c5bf8c854-7pcf7&quot;, UID:&quot;f84b09e4-7d7d-40bf-ae66-f2eb72ab7a59&quot;, APIVersion:&quot;v1&quot;, ResourceV:&quot;104846&quot;, FieldPath:&quot;&quot;&#125;): type: &#x27;Normal&#x27; reason: &#x27;RELOAD&#x27; NGINX reload triggered due to a change in configurat</span><br><span class="line">W0209 05:43:26.721706       7 controller.go:988] Error obtaining Endpoints for Service &quot;monitoring/prometheus-or-prometheus&quot;: no object matching key &quot;monitoring/prometheus-operator-prometheus&quot; in local store</span><br><span class="line">W0209 05:43:26.721831       7 controller.go:1083] Service &quot;monitoring/prometheus-operator-grafana&quot; does not havactive Endpoint.</span><br><span class="line">W0209 05:43:26.722981       7 controller.go:988] Error obtaining Endpoints for Service &quot;monitoring/prometheus-or-alertmanager&quot;: no object matching key &quot;monitoring/prometheus-operator-alertmanager&quot; in local store</span><br><span class="line">I0209 05:43:26.781310       7 admission.go:149] processed ingress via admission controller &#123;testedIngressLengthtedIngressTime:0.06s renderingIngressLength:1 renderingIngressTime:0.001s admissionTime:18.0kBs testedConfiguraze:0.061&#125;</span><br><span class="line">I0209 05:43:26.781370       7 main.go:101] &quot;successfully validated configuration, accepting&quot; ingress=&quot;monitorinetheus-ingress&quot;</span><br><span class="line">I0209 05:43:26.784116       7 admission.go:149] processed ingress via admission controller &#123;testedIngressLengthtedIngressTime:0.063s renderingIngressLength:1 renderingIngressTime:0s admissionTime:18.0kBs testedConfiguratio0.063&#125;</span><br><span class="line">I0209 05:43:26.784155       7 main.go:101] &quot;successfully validated configuration, accepting&quot; ingress=&quot;monitorinana-ingress&quot;</span><br><span class="line">I0209 05:43:26.785125       7 admission.go:149] processed ingress via admission controller &#123;testedIngressLengthtedIngressTime:0.063s renderingIngressLength:1 renderingIngressTime:0.002s admissionTime:18.1kBs testedConfigurize:0.065&#125;</span><br><span class="line">I0209 05:43:26.785171       7 main.go:101] &quot;successfully validated configuration, accepting&quot; ingress=&quot;monitorintmanager-ingress&quot;</span><br><span class="line">I0209 05:43:26.785238       7 admission.go:149] processed ingress via admission controller &#123;testedIngressLengthtedIngressTime:0.064s renderingIngressLength:1 renderingIngressTime:0s admissionTime:18.0kBs testedConfiguratio0.064&#125;</span><br><span class="line">I0209 05:43:26.785259       7 main.go:101] &quot;successfully validated configuration, accepting&quot; ingress=&quot;istio-sysali-ingress&quot;</span><br><span class="line">I0209 05:43:26.931088       7 store.go:420] &quot;Ignoring ingress because of error while validating ingress class&quot; s=&quot;monitoring/grafana-ingress&quot; error=&quot;ingress does not contain a valid IngressClass&quot;</span><br><span class="line">I0209 05:43:26.931132       7 store.go:420] &quot;Ignoring ingress because of error while validating ingress class&quot; s=&quot;monitoring/prometheus-ingress&quot; error=&quot;ingress does not contain a valid IngressClass&quot;</span><br><span class="line">I0209 05:43:26.931149       7 store.go:420] &quot;Ignoring ingress because of error while validating ingress class&quot; s=&quot;monitoring/alertmanager-ingress&quot; error=&quot;ingress does not contain a valid IngressClass&quot;</span><br><span class="line">I0209 05:43:26.945691       7 store.go:420] &quot;Ignoring ingress because of error while validating ingress class&quot; s=&quot;istio-system/kiali-ingress&quot; error=&quot;ingress does not contain a valid IngressClass&quot;</span><br></pre></td></tr></table></figure>
<h2 id="原-Ingress-配置">原 Ingress 配置</h2>
<p>以 <code>grafana-ing.tf</code> 為範例 (使用 terraform 自動部署工具安裝)</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">resource <span class="string">&quot;kubernetes_ingress&quot;</span> <span class="string">&quot;grafana_ingress&quot;</span> &#123;</span><br><span class="line">  count = var.package.prometheus == true ? <span class="number">1</span> : <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  metadata &#123;</span><br><span class="line">    name =      <span class="string">&quot;grafana-ingress&quot;</span></span><br><span class="line">    namespace = <span class="string">&quot;monitoring&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  spec &#123;</span><br><span class="line">    rule &#123;</span><br><span class="line">      host = <span class="string">&quot;$&#123;var.prometheus-options.host_grafana&#125;.$&#123;var.domain&#125;&quot;</span></span><br><span class="line">      http &#123;</span><br><span class="line">        path &#123;</span><br><span class="line">          backend &#123;</span><br><span class="line">            service_name = <span class="string">&quot;prometheus-operator-grafana&quot;</span></span><br><span class="line">            service_port = <span class="number">80</span></span><br><span class="line">          &#125;</span><br><span class="line">          path = <span class="string">&quot;/&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  depends_on = [</span><br><span class="line">    helm_release.ingress-nginx,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="發生原因">發生原因</h2>
<p>原因是在 ingress v1.0.0 版之後，ingress 需要加上 ingress class，請參考 github 的 <a href="https://github.com/kubernetes/ingress-nginx/pull/7341">#7341</a> pull request，如果沒有，controller 會丟 <code>Ignoring ingress because of error while validating ingress class&quot; ingress=&quot;k8sNamespace/ingressResourceName&quot; error=&quot;ingress does not contain a valid IngressClass&quot;</code> 的錯誤。</p>
<div class="info">
<p>An Ingress Class is basically a category which specify who needs to serve and manage the Ingress, this is necessary since in a cluster you can have more than one Ingress controller, each one with its rules and configurations.</p>
</div>
<h2 id="解決方法">解決方法</h2>
<p>在 ingress resource 中的 metadata 欄位加上 <code>annotations: kubernetes.io/ingress.class: &quot;nginx&quot;</code> 即可。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">resource <span class="string">&quot;kubernetes_ingress&quot;</span> <span class="string">&quot;grafana_ingress&quot;</span> &#123;</span><br><span class="line">  count = var.package.prometheus == true ? <span class="number">1</span> : <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  metadata &#123;</span><br><span class="line">    name =      <span class="string">&quot;grafana-ingress&quot;</span></span><br><span class="line">    namespace = <span class="string">&quot;monitoring&quot;</span></span><br><span class="line">    annotations = &#123;</span><br><span class="line">      <span class="string">&quot;kubernetes.io/ingress.class&quot;</span> = <span class="string">&quot;nginx&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  spec &#123;</span><br><span class="line">    rule &#123;</span><br><span class="line">      host = <span class="string">&quot;$&#123;var.prometheus-options.host_grafana&#125;.$&#123;var.domain&#125;&quot;</span></span><br><span class="line">      http &#123;</span><br><span class="line">        path &#123;</span><br><span class="line">          backend &#123;</span><br><span class="line">            service_name = <span class="string">&quot;prometheus-operator-grafana&quot;</span></span><br><span class="line">            service_port = <span class="number">80</span></span><br><span class="line">          &#125;</span><br><span class="line">          path = <span class="string">&quot;/&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  depends_on = [</span><br><span class="line">    helm_release.ingress-nginx,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="注意">注意</h2>
<p>上述方法僅適用於 kubernetes 1.22 版以前。k8s 1.22 版以後請使用 <code>ingressClassName</code> 於 spec 區塊下。請參考<a href="https://kubernetes.github.io/ingress-nginx/user-guide/multiple-ingress/">官網</a>說明。</p>
<h2 id="Reference">Reference</h2>
<ul>
<li><a href="https://forum.linuxfoundation.org/discussion/859965/exercise-7-nginx-update-requires-change-to-yaml">https://forum.linuxfoundation.org/discussion/859965/exercise-7-nginx-update-requires-change-to-yaml</a></li>
<li><a href="https://registry.terraform.io/providers/hashicorp/kubernetes/latest/docs/resources/ingress">https://registry.terraform.io/providers/hashicorp/kubernetes/latest/docs/resources/ingress</a></li>
<li><a href="https://stackoverflow.com/questions/65979766/ingress-with-nginx-controller-not-working-address-missing">https://stackoverflow.com/questions/65979766/ingress-with-nginx-controller-not-working-address-missing</a></li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>ingress</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Kubernetes 上使用 helm 建立 GitLab Runner</title>
    <url>/Install-GitLab-Runner-on-k8s-using-helm/</url>
    <content><![CDATA[<p>GitLab Runner 是一個獨立的程序，可以用以下三種方式安裝，請參考<a href="https://docs.gitlab.com/runner/install/">官網教學</a>。</p>
<ul>
<li>GitLab Official Repositories RPM/deb packages</li>
<li>Using Binaries</li>
<li>Using Containers</li>
</ul>
<span id="more"></span>
<p>承前一篇介紹，Runner 有 3 種類型，所有項目共享的 Shared Runner、指定 Group 共享的 Group Runner 和單個項目獨占的 Specific Runner，各有不同的 registration token。</p>
<ul>
<li>Shared Runner：在 Admin Area &gt; Runners 中註冊</li>
<li>Group Runner：在指定的 group 的 Settings &gt; CI/CD &gt; Runners 中註冊</li>
<li>Specific Runner：在各自的 project 下的 Settings &gt; CI/CD &gt; Runners 中註冊</li>
</ul>
<p>本篇記錄使用 helm chart 的方式安裝 Runner 於 Kubernetes 上的過程。</p>
<h4 id="Prerequisite">Prerequisite</h4>
<ul>
<li>GitLab Server (目前使用 14.9.2 版，用官方提供的 docker-compose 腳本安裝，可參考之前的<a href="https://ulahsieh.github.io/docker-compose-GitLab-https/">文章記錄</a>)</li>
<li>Kubernetes 1.4+ (示範環境為 1.20.10)</li>
<li>Helm (2 或 3 皆可，本文使用 helm3)</li>
<li>GitLab server 與 Kubernetes 集群能互通</li>
</ul>
<h4 id="準備-helm-chart">準備 helm chart</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">helm repo add gitlab https://charts.gitlab.io</span><br><span class="line">  helm repo list</span><br><span class="line">  NAME  	URL</span><br><span class="line">  gitlab	https://charts.gitlab.io/</span><br></pre></td></tr></table></figure>
<h4 id="建立自簽憑證的-Kubernetes-Secret">建立自簽憑證的 Kubernetes Secret</h4>
<p>將建立 gitlab 時創建的自簽憑證創建為 secret 資源，該憑證的檔名應採用 <code>&lt;gitlab.hostname&gt;.crt</code> 格式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl create secret generic &lt;SECRET_NAME&gt; \</span><br><span class="line">  --namespace &lt;NAMESPACE&gt; \</span><br><span class="line">  --from-file=&lt;CERTIFICATE_FILENAME&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><NAMESPACE> 為安裝 GitLab Runner 的 Kubernetes 命名空間。</li>
<li>&lt;SECRET_NAME&gt; 是 Kubernetes Secret 資源名稱。(例如：gitlabcert。)</li>
<li>&lt;CERTIFICATE_FILENAME&gt; 是當前目錄中將被導入密鑰的證書的文件名。(例如 <code>10.1.5.142.crt</code>。)</li>
</ul>
<h4 id="建立存取私有倉庫的-Secret">建立存取私有倉庫的 Secret</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl create secret docker-registry &lt;SECRET_NAME&gt; \</span><br><span class="line">  --namespace &lt;NAMESPACE&gt; \</span><br><span class="line">  --docker-server=&quot;https://10.1.5.142:4433/&quot; \</span><br><span class="line">  --docker-username=&quot;admin&quot; \</span><br><span class="line">  --docker-password=&quot;Harbor12345&quot;</span><br></pre></td></tr></table></figure>
<h4 id="準備自訂義配置文件">準備自訂義配置文件</h4>
<p><code>values.yaml</code> 的詳細配置可以在 <a href="https://gitlab.com/gitlab-org/charts/gitlab-runner/-/blob/main/values.yaml">GitLab Runner Helm Chart</a> 查看。<br>
以下是此次演示所用的 <code>values.yaml</code> 內容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">gitlabUrl:</span> <span class="string">&quot;https://10.1.5.142&quot;</span></span><br><span class="line"><span class="attr">runnerRegistrationToken:</span> <span class="string">&quot;xWKuLU_jk_PDvs2k9auF&quot;</span></span><br><span class="line"><span class="attr">certsSecretName:</span> <span class="string">&quot;gitlabcert&quot;</span></span><br><span class="line"><span class="attr">concurrent:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">checkInterval:</span> <span class="number">30</span></span><br><span class="line"><span class="attr">logLevel:</span> <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rbac:</span></span><br><span class="line">  <span class="attr">create:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">metrics:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">runners:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">&quot;kubernetes-runner&quot;</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">&quot;kubernetes,runner&quot;</span></span><br><span class="line">  <span class="attr">executor:</span> <span class="string">&quot;kubernetes&quot;</span></span><br><span class="line">  <span class="attr">config:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    [[runners]] </span></span><br><span class="line"><span class="string">      [runners.kubernetes]</span></span><br><span class="line"><span class="string">        namespace = &quot;&#123;&#123;.Release.Namespace&#125;&#125;&quot;</span></span><br><span class="line"><span class="string">        image = &quot;alpine:latest&quot;</span></span><br><span class="line"><span class="string">        pull_policy = &quot;if-not-present&quot;</span></span><br><span class="line"><span class="string">        image_pull_secrets = [&quot;harbor&quot;]</span></span><br><span class="line"><span class="string">        privileged = true</span></span><br><span class="line"><span class="string">        [[runners.kubernetes.volumes.host_path]]</span></span><br><span class="line"><span class="string">            name = &quot;docker&quot;</span></span><br><span class="line"><span class="string">            mount_path = &quot;/var/run/docker.sock&quot;</span></span><br><span class="line"><span class="string">            host_path = &quot;/var/run/docker.sock&quot;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>
<p>其中：</p>
<ul>
<li>certsSecretName：指定 GitLab 的自簽憑證，以 kubernetes secret 的方式建立</li>
<li>concurrent：並行運行 Job 的最大 pod 數，部署在 Kubernetes 上的單個 GitLab Runner 能夠通過自動啟動額外的 Runner pod 來並行執行多個作業</li>
<li>checkInterval：Gitlab 檢查新構建的時間間隔，以秒為單位，預設為 3。</li>
<li>runner：runner 的配置内容，包括 name，tag 等等，這些内容建立後會以 config.toml 文件的形式包在 kubernetes configmap 之中；</li>
<li>[runners.kubernetes] 表示 Kubernetes executor，會將 job 跑在 kubernetes pod 中。</li>
<li>image：指定預設的 docker image 給 job pod，當 pipeline 沒有指定時便會使用該預設。</li>
<li>因為之後會需要使用 docker-in-docker 方式 (在 pipeline 中構建 docker 鏡像)，所以需要掛載 /var/run/docker.sock 到 gitlab runner pod 中，另外還要設置 privileged 為 true，否則會報無法連接 docker daemon 的錯誤。</li>
</ul>
<div class="warning">
<p>在生產環境中，使用特權模式運行 docker-in-docker 有一些注意事項，可以參考這篇<a href="https://docs.gitlab.com/runner/executors/kubernetes.html#using-docker-in-your-builds">文檔</a></p>
</div>
<h4 id="開始建立">開始建立</h4>
<p>建立 namespace</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl create ns gitlab-runner</span><br></pre></td></tr></table></figure>
<p>安裝</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">helm install --namespace gitlab-runner gitlab-runner -f values.yaml gitlab/gitlab-runner</span><br><span class="line">  NAME: gitlab-runner</span><br><span class="line">  LAST DEPLOYED: Mon Apr 11 14:27:15 2022</span><br><span class="line">  NAMESPACE: gitlab-runner</span><br><span class="line">  STATUS: deployed</span><br><span class="line">  REVISION: 1</span><br><span class="line">  TEST SUITE: None</span><br><span class="line">  NOTES:</span><br><span class="line">  Your GitLab Runner should now be registered against the GitLab instance reachable at: &quot;https://10.1.5.142&quot;</span><br><span class="line"></span><br><span class="line">  Runner namespace &quot;gitlab-runner&quot; was found in runners.config template.</span><br></pre></td></tr></table></figure>
<p>查看資源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl get all -n gitlab-runner</span><br><span class="line">  NAME                                              READY   STATUS    RESTARTS   AGE</span><br><span class="line">  pod/gitlab-runner-gitlab-runner-899597bcb-nzjwc   1/1     Running   0          61m</span><br><span class="line"></span><br><span class="line">  NAME                                          READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">  deployment.apps/gitlab-runner-gitlab-runner   1/1     1            1           61m</span><br><span class="line"></span><br><span class="line">  NAME                                                    DESIRED   CURRENT   READY   AGE</span><br><span class="line">  replicaset.apps/gitlab-runner-gitlab-runner-899597bcb   1         1         1       61m</span><br></pre></td></tr></table></figure>
<p>查看 pod log，可以看到註冊成功的訊息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl logs -f -n gitlab-runner gitlab-runner-gitlab-runner-899597bcb-nzjwc</span><br><span class="line"> Registration attempt 1 of 30</span><br><span class="line"> Runtime platform arch=amd64 os=linux pid=14 revision=d1f69508 version=14.9.0</span><br><span class="line"> WARNING: Running <span class="keyword">in</span> user-mode.</span><br><span class="line"> WARNING: The user-mode requires you to manually start builds processing:</span><br><span class="line"> WARNING: $ gitlab-runner run</span><br><span class="line"> WARNING: Use sudo <span class="keyword">for</span> system-mode:</span><br><span class="line"> WARNING: $ sudo gitlab-runner...</span><br><span class="line"></span><br><span class="line"> Merging configuration from template file <span class="string">&quot;/configmaps/config.template.toml&quot;</span></span><br><span class="line"> Registering runner... succeeded                     runner=xWKuLU_j</span><br><span class="line"> Runner registered successfully. Feel free to start it, but <span class="keyword">if</span> it<span class="string">&#x27;s running already the config should be automatically reloaded!</span></span><br><span class="line"><span class="string"> ......</span></span><br></pre></td></tr></table></figure>
<p>重整 GitLab Runner 頁面，可以看到註冊成功的 runner 列表。<br>
<img src="https://imgur.com/W9Spfwp.png" alt=""></p>
<h3 id="Reference">Reference</h3>
<ul>
<li><a href="https://docs.gitlab.com/runner/install/kubernetes.html">https://docs.gitlab.com/runner/install/kubernetes.html</a></li>
<li><a href="https://docs.gitlab.com/runner/configuration/advanced-configuration.html">https://docs.gitlab.com/runner/configuration/advanced-configuration.html</a></li>
<li><a href="https://docs.gitlab.com/runner/executors/kubernetes.html">https://docs.gitlab.com/runner/executors/kubernetes.html</a></li>
</ul>
]]></content>
      <categories>
        <category>DevOps</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>GitLab</tag>
        <tag>CI/CD</tag>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 docker-compose 建立 Harbor 私有倉庫 (w/ https)</title>
    <url>/Install-Harbor-using-docker-compose-with-https/</url>
    <content><![CDATA[<p>默認情況下，Harbor 不附帶證書，可以直接使用 http 訪問。但在正式上線的環境中，建議配置 https。</p>
<span id="more"></span>
<h3 id="準備-https-所需證書">準備 https 所需證書</h3>
<p>在生產環境中，建議使用由受信任的第三方 CA 簽名的證書。在測試或開發環境中，則可以使用自簽的 CA。以下範例為使用 openssl 生成 CA，分為使用 DNS 或是直接使用 IP。</p>
<h4 id="使用域名-DNS">使用域名(DNS)</h4>
<ol>
<li>準備 x509 v3 服務檔，假設 harbor 伺服器使用的 DNS 為 <code>harbor.ula.com</code>。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &gt; v3.ext &lt;&lt;-<span class="string">EOF</span></span><br><span class="line"><span class="string">authorityKeyIdentifier=keyid,issuer</span></span><br><span class="line"><span class="string">basicConstraints=CA:FALSE</span></span><br><span class="line"><span class="string">keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment</span></span><br><span class="line"><span class="string">extendedKeyUsage = serverAuth</span></span><br><span class="line"><span class="string">subjectAltName = @alt_names</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[alt_names]</span></span><br><span class="line"><span class="string">DNS.1=harbor.ula.com</span></span><br><span class="line"><span class="string">DNS.2=ula.com</span></span><br><span class="line"><span class="string">DNS.3=harbor</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>準備金鑰及證書的 shell script</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim prepare_ssl.sh</span><br></pre></td></tr></table></figure>
<p>貼上以下內容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">CURDIR=<span class="string">&quot;`pwd`&quot;</span>/<span class="string">&quot;`dirname <span class="variable">$0</span>`&quot;</span></span><br><span class="line">HOSTNAME=<span class="variable">$1</span></span><br><span class="line">DOMAIN=<span class="variable">$2</span></span><br><span class="line"></span><br><span class="line">INSTALL_PATH=<span class="string">&quot;/data/certs&quot;</span></span><br><span class="line">mkdir -p <span class="variable">$INSTALL_PATH</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$INSTALL_PATH</span></span><br><span class="line"><span class="comment"># generate CA certificate private key</span></span><br><span class="line">openssl genrsa -out ca.key 4096</span><br><span class="line"></span><br><span class="line"><span class="comment"># generate CA certificate</span></span><br><span class="line">openssl req -x509 -new -nodes -sha512 -days 3650 -subj <span class="string">&quot;/C=TW/ST=Taipei/L=Taipei/O=<span class="variable">$HOSTNAME</span>/OU=Personal/CN=<span class="variable">$HOSTNAME</span>.<span class="variable">$DOMAIN</span>&quot;</span> -key ca.key -out ca.crt</span><br><span class="line"></span><br><span class="line"><span class="comment"># generate server&#x27;s private key</span></span><br><span class="line">openssl genrsa -out <span class="variable">$DOMAIN</span>.key 4096</span><br><span class="line"></span><br><span class="line"><span class="comment"># Generate a certificate signing request (CSR)</span></span><br><span class="line">openssl req -sha512 -new -days 3650 -subj <span class="string">&quot;/C=TW/ST=Taipei/L=Taipei/O=<span class="variable">$HOSTNAME</span>/OU=Personal/CN=<span class="variable">$HOSTNAME</span>.<span class="variable">$DOMAIN</span>&quot;</span> -key <span class="variable">$DOMAIN</span>.key -out <span class="variable">$DOMAIN</span>.csr</span><br><span class="line"></span><br><span class="line"><span class="comment"># use v3.ext to generate certificate for harbor host</span></span><br><span class="line">openssl x509 -req -sha512 -days 3650 -extfile <span class="variable">$CURDIR</span>/v3.ext -CA ca.crt -CAkey ca.key -CAcreateserial -<span class="keyword">in</span> <span class="variable">$DOMAIN</span>.csr -out <span class="variable">$DOMAIN</span>.crt</span><br><span class="line"></span><br><span class="line"><span class="comment"># Convert *.crt to *.cert, for use by Docker.</span></span><br><span class="line">openssl x509 -inform PEM -<span class="keyword">in</span> <span class="variable">$DOMAIN</span>.crt -out <span class="variable">$DOMAIN</span>.cert</span><br><span class="line">chmod 400 <span class="variable">$DOMAIN</span>.key</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>執行腳本創建相關證書及金鑰</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./prepare_ssl.sh harbor ula.com</span><br></pre></td></tr></table></figure>
<h4 id="使用-IP">使用 IP</h4>
<ol>
<li>準備 x509 v3 服務檔</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &gt; v3.ext &lt;&lt;-<span class="string">EOF</span></span><br><span class="line"><span class="string">authorityKeyIdentifier=keyid,issuer</span></span><br><span class="line"><span class="string">basicConstraints=CA:FALSE</span></span><br><span class="line"><span class="string">keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment</span></span><br><span class="line"><span class="string">extendedKeyUsage = serverAuth</span></span><br><span class="line"><span class="string">subjectAltName = IP:10.1.5.142</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>準備金鑰及證書的 shell script</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim prepare_ssl.sh</span><br></pre></td></tr></table></figure>
<p>貼上以下內容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">CURDIR=<span class="string">&quot;`pwd`&quot;</span>/<span class="string">&quot;`dirname <span class="variable">$0</span>`&quot;</span></span><br><span class="line">IP=<span class="variable">$1</span></span><br><span class="line"></span><br><span class="line">INSTALL_PATH=<span class="string">&quot;/data/certs&quot;</span></span><br><span class="line">mkdir -p <span class="variable">$INSTALL_PATH</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$INSTALL_PATH</span></span><br><span class="line"><span class="comment"># generate CA certificate private key</span></span><br><span class="line">openssl genrsa -out ca.key 4096</span><br><span class="line"></span><br><span class="line"><span class="comment"># generate CA certificate</span></span><br><span class="line">openssl req -x509 -new -nodes -sha512 -days 3650 -subj <span class="string">&quot;/C=TW/ST=Taipei/L=Taipei/O=<span class="variable">$IP</span>/OU=Personal/CN=<span class="variable">$IP</span>&quot;</span> -key ca.key -out ca.crt</span><br><span class="line"></span><br><span class="line"><span class="comment"># generate server&#x27;s private key</span></span><br><span class="line">openssl genrsa -out <span class="variable">$IP</span>.key 4096</span><br><span class="line"></span><br><span class="line"><span class="comment"># Generate a certificate signing request (CSR)</span></span><br><span class="line">openssl req -sha512 -new -days 3650 -subj <span class="string">&quot;/C=TW/ST=Taipei/L=Taipei/O=<span class="variable">$IP</span>/OU=Personal/CN=<span class="variable">$IP</span>&quot;</span> -key <span class="variable">$IP</span>.key -out <span class="variable">$IP</span>.csr</span><br><span class="line"></span><br><span class="line"><span class="comment"># use v3.ext to generate certificate for harbor host</span></span><br><span class="line">openssl x509 -req -sha512 -days 3650 -extfile <span class="variable">$CURDIR</span>/v3.ext -CA ca.crt -CAkey ca.key -CAcreateserial -<span class="keyword">in</span> <span class="variable">$IP</span>.csr -out <span class="variable">$IP</span>.crt</span><br><span class="line"></span><br><span class="line"><span class="comment"># Convert *.crt to *.cert, for use by Docker.</span></span><br><span class="line">openssl x509 -inform PEM -<span class="keyword">in</span> <span class="variable">$IP</span>.crt -out <span class="variable">$IP</span>.cert</span><br><span class="line">chmod 400 <span class="variable">$IP</span>.key</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>執行腳本創建相關證書及金鑰</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./prepare_ssl.sh 10.1.5.142</span><br></pre></td></tr></table></figure>
<p>因為本次建立沒有特別新增域名，所以以下範例是使用 IP 位址建立。</p>
<h3 id="開始安裝">開始安裝</h3>
<h4 id="下載安裝檔">下載安裝檔</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">wget https://github.com/goharbor/harbor/releases/download/v2.4.2/harbor-offline-installer-v2.4.2.tgz</span><br><span class="line">tar zxvf harbor-offline-installer-v2.4.2.tgz</span><br></pre></td></tr></table></figure>
<h4 id="修改-harbor-配置檔">修改 harbor 配置檔</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~/harbor</span><br><span class="line">cp harbor.yml.tmpl harbor.yml</span><br><span class="line">vim harbor.yml</span><br></pre></td></tr></table></figure>
<p>針對以下三處修改</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 沒有域名，寫 harbor 所在伺服器 ip</span></span><br><span class="line"><span class="attr">hostname:</span> <span class="number">10.1</span><span class="number">.5</span><span class="number">.142</span></span><br><span class="line"><span class="attr">http:</span></span><br><span class="line"><span class="comment"># 因主機有其他服務已佔用 80 port 所以改成 8080</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">https:</span></span><br><span class="line"><span class="comment"># 因主機有其他服務已佔用 443 port 所以改成 4433</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">4433</span></span><br><span class="line">  <span class="comment"># 設定證書及金鑰路徑</span></span><br><span class="line">  <span class="attr">certificate:</span> <span class="string">/data/certs/10.1.5.142.crt</span></span><br><span class="line">  <span class="attr">private_key:</span> <span class="string">/data/certs/10.1.5.142.key</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># harbor 預設登入密碼</span></span><br><span class="line"><span class="attr">harbor_admin_password:</span> <span class="string">Harbor12345</span></span><br></pre></td></tr></table></figure>
<h4 id="安裝">安裝</h4>
<p>使用安裝包中的 prepare 腳本生成配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~/harbor</span><br><span class="line">./prepare</span><br></pre></td></tr></table></figure>
<p>會產生以下結果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">prepare base dir is set to /root/harbor</span><br><span class="line">Unable to find image &#x27;goharbor/prepare:v2.4.2&#x27; locally</span><br><span class="line">v2.4.2: Pulling from goharbor/prepare</span><br><span class="line">6c964f3b879f: Pull complete</span><br><span class="line">3042f4284e2c: Pull complete</span><br><span class="line">7a91ea24644b: Pull complete</span><br><span class="line">b3c79e094a18: Pull complete</span><br><span class="line">110443f7949d: Pull complete</span><br><span class="line">1fbee02500d7: Pull complete</span><br><span class="line">8675c3a61fe1: Pull complete</span><br><span class="line">d48514bf9c2b: Pull complete</span><br><span class="line">Digest: sha256:b14da6252672c596291f02a5e76fbb065f558aaf0a647f90e1c77aefaa29db74</span><br><span class="line">Status: Downloaded newer image for goharbor/prepare:v2.4.2</span><br><span class="line">Generated configuration file: /config/portal/nginx.conf</span><br><span class="line">Generated configuration file: /config/log/logrotate.conf</span><br><span class="line">Generated configuration file: /config/log/rsyslog_docker.conf</span><br><span class="line">Generated configuration file: /config/nginx/nginx.conf</span><br><span class="line">Generated configuration file: /config/core/env</span><br><span class="line">Generated configuration file: /config/core/app.conf</span><br><span class="line">Generated configuration file: /config/registry/config.yml</span><br><span class="line">Generated configuration file: /config/registryctl/env</span><br><span class="line">Generated configuration file: /config/registryctl/config.yml</span><br><span class="line">Generated configuration file: /config/db/env</span><br><span class="line">Generated configuration file: /config/jobservice/env</span><br><span class="line">Generated configuration file: /config/jobservice/config.yml</span><br><span class="line">Generated and saved secret to file: /data/secret/keys/secretkey</span><br><span class="line">Successfully called func: create_root_cert</span><br><span class="line">Generated configuration file: /compose_location/docker-compose.yml</span><br><span class="line">Clean up the input dir</span><br></pre></td></tr></table></figure>
<p>使用安裝包中的腳本 <a href="http://install.sh">install.sh</a> 開始安裝 harbor</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./install.sh</span><br></pre></td></tr></table></figure>
<p>執行成功的話，會產生以下結果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Step 0]: checking if docker is installed ...</span><br><span class="line">Note: docker version: 20.10.14</span><br><span class="line">[Step 1]: checking docker-compose is installed ...</span><br><span class="line">Note: docker-compose version: 1.26.2</span><br><span class="line">[Step 2]: loading Harbor images ...</span><br><span class="line">[Step 3]: preparing environment ...</span><br><span class="line">[Step 4]: preparing harbor configs ...</span><br><span class="line">[Step 5]: starting Harbor ...</span><br><span class="line">Creating network &quot;harbor_harbor&quot; with the default driver</span><br><span class="line">Creating harbor-log ... done</span><br><span class="line">Creating redis         ... done</span><br><span class="line">Creating registryctl   ... done</span><br><span class="line">Creating registry      ... done</span><br><span class="line">Creating harbor-db     ... done</span><br><span class="line">Creating harbor-portal ... done</span><br><span class="line">Creating harbor-core   ... done</span><br><span class="line">Creating harbor-jobservice ... done</span><br><span class="line">Creating nginx             ... done</span><br><span class="line">✔ ----Harbor has been installed and started successfully.----</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/bg71xDV.png" alt=""></p>
<h3 id="配置-docker-以登入私有倉庫">配置 docker 以登入私有倉庫</h3>
<p>建立 docker 對應倉庫的證書存放目錄</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p /etc/docker/certs.d/10.1.5.142:4433</span><br><span class="line">cp 10.1.5.142.key /etc/docker/certs.d/10.1.5.142:4433/</span><br><span class="line">cp 10.1.5.142.cert /etc/docker/certs.d/10.1.5.142:4433/</span><br><span class="line">cp ca.crt /etc/docker/certs.d/10.1.5.142:4433/</span><br></pre></td></tr></table></figure>
<p>重啟 docker</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>
<p>登入遠端倉庫</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker login 10.1.5.142:4433 -u admin -p Harbor12345</span><br><span class="line">WARNING! Using --password via the CLI is insecure. Use --password-stdin.</span><br><span class="line">WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure>
<p>測試推送 imgage</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull busybox</span><br><span class="line">docker tag busybox:latest 10.1.5.142:4433/test/busybox:latest</span><br><span class="line">docker push 10.1.5.142:4433/test/busybox:latest</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/p2cdmoz.png" alt=""><br>
<img src="https://imgur.com/98IsZit.png" alt=""></p>
<h3 id="Reference">Reference</h3>
<ul>
<li><a href="https://goharbor.io/docs/2.4.0/install-config/">https://goharbor.io/docs/2.4.0/install-config/</a></li>
</ul>
]]></content>
      <categories>
        <category>DevOps</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Harbor</tag>
      </tags>
  </entry>
  <entry>
    <title>[Java] Install Java on Win10</title>
    <url>/Install-Java-on-Win10/</url>
    <content><![CDATA[<h3 id="選擇-Java-版本">選擇 Java 版本</h3>
<p>Java 更新速度之快，截至今天已經出到 Java 14 了！本來是想隨波逐流的裝 Java 8 但參考了這篇<a href="https://medium.com/swlh/why-do-people-stick-with-java8-acb95ef65f0c">文章</a>後，還是決定裝 11。</p>
<span id="more"></span>
<p>JDK 可以從 <a href="https://adoptopenjdk.net/releases.html">AdoptOpenJDK</a> 下載，AdoptOpenJDK 是 Java 使用者社群建立的，致力於倡導 OpenJDK，上面支援的作業系統以及對應的 JDK 版本 (8~11) 最齊全。</p>
<h3 id="安裝">安裝</h3>
<p>在網站上下載 .msi 檔後執行，在客製安裝頁面一併把第三個選項 <code>Set JAVA_HOME variable</code> 設起來。<br>
<img src="https://imgur.com/Ue4j8TH.png" alt=""></p>
<h3 id="設定-PATH-系統變數">設定 PATH 系統變數</h3>
<p>設定 path 環境變數的目的是為了要上作業系統找到 Java 在哪。<br>
編輯系統變數欄位中的 <code>Path</code>，並加入 <code>%JAVA_HOME%</code> 的選項，然後把它移到最前面。當電腦中安裝兩個以上的不同版本的 Java，則環境變數放在前面的會先被執行。<br>
<img src="https://imgur.com/Em1c46E.png" alt=""></p>
<h3 id="確認安裝">確認安裝</h3>
<p>開啟 CMD 並下下方兩個指令，確認安裝是否成功。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ java -version</span><br><span class="line">$ javac -version</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/G8DUM6M.png" alt=""></p>
<h3 id="Hello-World">Hello World!</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Hello.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="warning">
<p>關於程式內部詳細的解說，之後的文章會記錄。<br>
(不過本來因為數據中台的專案要用 Map Reduce 所以學的，但因為工作又有小變動，所以不知道何年何月才可以再繼續看 Java，先暫緩了 😝 )</p>
</div>
<h3 id="編譯檔案">編譯檔案</h3>
<p>使用 javac 公用程式來編譯檔案。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ javac Hello.java</span><br></pre></td></tr></table></figure>
<p>完成後在目錄下就會出現一個 <code>Hello.class</code> 的 java 位元碼 (bytecode)。<br>
<img src="https://imgur.com/YHyPdOX.png" alt=""></p>
<h3 id="執行">執行</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ java Hello</span><br></pre></td></tr></table></figure>
<p>使用 java 工具程式執行，不須帶附檔名，Java 會根據類別名稱自動載入 .class 檔案。<br>
<img src="https://imgur.com/M4ZkQXa.png" alt=""></p>
]]></content>
      <categories>
        <category>Programming</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>[Java] JVM 架構</title>
    <url>/Java-JVM-%E6%9E%B6%E6%A7%8B/</url>
    <content><![CDATA[<p>前一篇介紹到 Java 程式經過編譯後會產生 .class 檔 (bytecode)，只能運行在 JVM 上，而 JVM 在運算時，如同電腦需要記憶體儲存運算所需的各種資料及指令，這篇文章將紀錄 JVM 的架構。</p>
<span id="more"></span>
<h2 id="JVM-Structure">JVM Structure</h2>
<p><img src="https://imgur.com/qbAYLHV.png" alt=""> [1]<br>
上圖為 JVM 執行一個 Java 程式的過程：</p>
<h3 id="Class-Loader">Class Loader</h3>
<p>用於將編譯好的 <code>.class</code> 文件 － <strong>Java Bytecode</strong> 加載到 Runtime Data Areas。</p>
<h3 id="Execution-Engine">Execution Engine</h3>
<p>用於執行 Java Bytecode 或是 <a href="https://baike.baidu.com/item/Native%20methods">native method</a>.</p>
<p>Java Bytecode 是以人類仍然可以理解的語言而不是機器語言編寫的。因此，Execution Engine 透過以下兩種方式將字節碼轉為 JVM 中的機器語言。</p>
<ol>
<li>Interpreter</li>
<li>JIT (Just-In-Time) Compiler</li>
</ol>
<table><tr><td bgcolor="#FAFAFA">
<b>什麼時候用 Interpreter 什麼時候用 Compiler?</b><br>
The application code is initially interpreted, but the JVM monitors which part of bytecode are frequently executed and translates them to machine code for direct execution on the hardware. 
For bytecode which is executed only a few times, interpret it will saves the compilation time and reduces the initial latency; 
For frequently executed bytecode, JIT compilation will be used after an initial phase of slow interpretation. 
By interpreting the initial code, execution statistics can be collected before compilation, which helps to perform better optimization.[3]
</td></tr></table>
<p><img src="https://imgur.com/H8aD6Eh.png" alt=""> [2]<br>
<img src="https://imgur.com/iMbW3Un.png" alt=""> [3]</p>
<h3 id="Runtime-Data-Areas">Runtime Data Areas</h3>
<p>JVM 運行時所需的的記憶體區塊，總共可以分為六區</p>
<ul>
<li>PC Register, JVM Stack 以及 Native Method Stack 依賴於<strong>單個</strong>執行緒的啟動/結束來建立與銷毀。</li>
<li>Heap, Metaspace(Metod Area &amp; Runtime Constant Pool) 是隨著JVM的啟動而存在，為<strong>全部</strong>的執行緒共享。</li>
</ul>
<p><img src="https://imgur.com/ZumQcTh.png" alt=""> [4]</p>
<h4 id="PC-Register">PC Register</h4>
<p>Program Counter Register，紀錄當前執行緒所執行到的 bytecode 中的指令位址。為了執行緒切換後能恢復到正確的執行位置，每條執行緒都需要有一個獨立的 program counter，各執行緒之間獨立儲存。</p>
<h4 id="JVM-Stack">JVM Stack</h4>
<p>用來放 frame，每個 method 在執行的同時都會建立一個 stack frame，用於儲存局部變數表 (Local Variable Array)、運算元堆疊 (Operand Stack) 和動態連接 (Dynamic Linking) 以及返回值(Return Value)。每個 method 從呼叫直至結束 (return)，都對應著一個 stack frame 在此區塊中入/出 (push/pop) stack 的過程。<br>
JVM Statck 的大小可以是固定的，或是動態擴展的。如果 thread 需要一個比固定大小大的Stack，會發生 <strong>StackOverflowError</strong>；如果動態擴展 Stack 時沒有足夠的記憶體空間，則會發生 <strong>OutOfMemoryError</strong>。<br>
<img src="https://imgur.com/WDOImGT.png" alt=""><br>
<img src="https://imgur.com/GT53vZO.png" alt=""><br>
[5]</p>
<h5 id="局部變量表-Local-Variable-Array">局部變量表 (Local Variable Array)</h5>
<p>局部變量表用於存放方法參數和方法內部定義的局部變量，其大小在編譯期(.class 前)就被確定。<br>
Java 代碼 <code>int a=0; int b=1; int c=2;</code> 對應的局部變量表如下：</p>
<table>
<thead>
<tr>
<th>Start</th>
<th>Length</th>
<th>Slot</th>
<th>Name</th>
<th>Signature</th>
</tr>
</thead>
<tbody>
<tr>
<td>2</td>
<td>12</td>
<td>0</td>
<td>a</td>
<td>I</td>
</tr>
<tr>
<td>4</td>
<td>10</td>
<td>1</td>
<td>b</td>
<td>I</td>
</tr>
<tr>
<td>6</td>
<td>8</td>
<td>2</td>
<td>c</td>
<td>I</td>
</tr>
</tbody>
</table>
<ul>
<li>Start: 變量偏移量。</li>
<li>Length: 作用域範圍長度。 <code>Start,Start+Length</code> 就是該變量的作用域。</li>
<li>Slot: 變量槽，一個 Slot (一行) 能存儲 32bit 的 primitive type、reference type、returnAddress 數據，long/dobule 則需要兩個 Slot。</li>
</ul>
<h5 id="運算元棧-Operand-Stack">運算元棧 (Operand Stack)</h5>
<p>用 push,pop 操作數據。operand stack 只是一個臨時的計算過程，要用到 Local variable table 裡面的值，然後得出結果，放入到 local variables 區。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Java 代碼</span></span><br><span class="line"><span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> c=a+b;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 運算元棧</span><br><span class="line">0: iconst_1 // push 1到操作棧。大於5的int值會用到 bipush &lt;i&gt; 指令。</span><br><span class="line">1: istore_0 // pop 頂元素，存儲到index=0的本地變量。</span><br><span class="line">2: iconst_2 // push 2 到操作棧</span><br><span class="line">3: istore_1 // pop棧頂元素，存儲到index=1的本地變量。</span><br><span class="line">4: iload_0 // 把index=0的本地變量加載到棧頂</span><br><span class="line">5: iload_1 // 把index=1的本地變量加載到棧頂</span><br><span class="line">6: iadd // 把棧頂兩個數pop出來相加，並把結果存放到棧頂</span><br><span class="line">7: istore_2 // 結果存儲到index=2的本地變量</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="動態連接-Dynamic-Linking">動態連接 (Dynamic Linking)</h5>
<p>指符號引用（Symbolic References）轉換成為直接引用（Direct References）的過程。每個 Frame 內部都包含一個指向 runtime constant pool 的引用來支援當前方法的程式碼。</p>
<ul>
<li>符號引用：以一組符號來描述所引用的目標，符號可以是任何形式的字面量，只要使用時能無歧義地定位到目標即可。方法名，類名，字段名都是符號引用。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>; <span class="comment">//把整數 1 賦值給 int 型變量 i，整數 1 就是字面量，</span></span><br><span class="line">String s = <span class="string">&quot;abc&quot;</span>; <span class="comment">//abc 是字面量。</span></span><br></pre></td></tr></table></figure>
<ul>
<li>直接引用：可以是直接指向目標的指針、相對偏移量或是一個能間接定位到目標的句柄。如果有了直接引用，那么引用的目標一定是已經存在於內存中。</li>
</ul>
<h4 id="Native-Method-Stack">Native Method Stack</h4>
<p>此區塊主要執行native method。</p>
<h4 id="Heap">Heap</h4>
<p>用於儲存物件的實例(object instance)和陣列，也是 GC 管理的主要區域，因此也被稱為 GC 堆 — Garbage Collected Heap。Heap 是在 JVM 啟動時建立的，為所有執行緒共有。堆的大小可以固定，也可以擴大縮小且不需要是連續空間。</p>
<h5 id="堆記憶體分配">堆記憶體分配</h5>
<p>現在的 GC 都採 generation-collect 分代收集算法，所以 Heap 記憶體可劃分為：<br>
<img src="https://imgur.com/AsMKt4b.png" alt=""> [6]</p>
<ul>
<li>Young Generation（年輕代）</li>
<li>Old Generation（老年代）<br>
其中Young generation可以進一步分為3個區塊: Eden space， Survivor 1 和 Survivor 2</li>
</ul>
<h5 id="Garbage-Collection">Garbage Collection</h5>
<p>垃圾回收(garbage collection)是指將佔記憶體空間(heap)的不再被參考的物件<br>
清除的過程。</p>
<p>年輕代回收：又稱小型回收 (minor collection)，執行時機是當年輕代的空間滿的時候會觸發。當新物件產生時會放置在 Eden space，當 Eden space 滿了，JVM 會啟動 Minor GC，把存活的物件往 Survivor 1 或 2 移及以原本在 Survivor 1 或 2 的存活物件往另一個 Survivor 空間移。當 JVM 執行多次 Minor GC 後，會把符合條件的存活物件往 Tenured generation 移，這個過程我們稱為Minor GC。</p>
<p>老年代或永久代回收稱為完整回收(full collection)或主要回收(major collection)。當 old generation 滿了時，JVM 會回收 Tenured generation 的空間，稱為 Major/Full GC。</p>
<h5 id="heap-大小對-GC-的影響">heap 大小對 GC 的影響</h5>
<p>空間比較小的時候，打掃動作比較快，但是相對垃圾累積也比較快滿，所以打掃需要比較頻繁。相反地，空間大，需要打掃的頻率比較低，但是一打掃起來就很費時。通常就是在「時間」、「空間」、「頻率」三者之間作取捨而已。<br>
Minor GC 和 Major/Full都是 “Stop the World” 事件，只是 Minor GC 時間非常短(幾百milli-seconds)，使用者較不容易察覺;而 Full GC 時間相對上長很多，且 heap size 愈大時間愈久；因此應儘量避免或減少 Full GC 發生。</p>
<p>若Heap space沒空間存放新建立的物作，則JVM會丟出OutOfMemoryError或 java.lang.OutOfMemoryError heap space</p>
<h4 id="MetaSpace-Java8-以前以後">MetaSpace (Java8 以前以後)</h4>
<p><strong>Java 7</strong><br>
<img src="https://imgur.com/oturBUp.png" alt=""><br>
<strong>Java 8</strong><br>
<img src="https://imgur.com/AsMKt4b.png" alt="">[6]<br>
下面這張能更清楚 java 8 的改變:<br>
<img src="https://imgur.com/AoP8OjJ.png" alt="">[7]<br>
原先存在 heap 用來存放存放 byte code, JIT information, class metadata 以及 static 的變數, 方法的永久代 PermGen 被移到 native memory 的 metaspace 了。</p>
<h6 id="Reference">Reference</h6>
<p>[1]<a href="http://mauryasunil007.blogspot.com/2016/04/understanding-jvm-internal-architecture.html">http://mauryasunil007.blogspot.com/2016/04/understanding-jvm-internal-architecture.html</a><br>
[2]<a href="https://www.datawareventures.com/single-post/2015/10/09/Field-Specialization-Just-another-JIT">https://www.datawareventures.com/single-post/2015/10/09/Field-Specialization-Just-another-JIT</a><br>
[3]<a href="https://stackoverflow.com/questions/1326071/is-java-a-compiled-or-an-interpreted-programming-language">https://stackoverflow.com/questions/1326071/is-java-a-compiled-or-an-interpreted-programming-language</a><br>
[4]<a href="https://blog.jamesdbloom.com/JVMInternals.html">https://blog.jamesdbloom.com/JVMInternals.html</a><br>
[5]<a href="https://alvinalexander.com/scala/fp-book/recursion-jvm-stacks-stack-frames/">https://alvinalexander.com/scala/fp-book/recursion-jvm-stacks-stack-frames/</a><br>
[6]<a href="https://docs.deistercloud.com/content/Axional%20development%20libraries.20/Axional%20Server.4/Tunning.xml?embedded=true">https://docs.deistercloud.com/content/Axional development libraries.20/Axional Server.4/Tunning.xml?embedded=true</a><br>
[7]<a href="https://stackoverflow.com/questions/39675406/difference-between-metaspace-and-native-memory-in-java">https://stackoverflow.com/questions/39675406/difference-between-metaspace-and-native-memory-in-java</a></p>
]]></content>
      <categories>
        <category>Programming</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JRE</tag>
      </tags>
  </entry>
  <entry>
    <title>[Javascript] Debugging in Chrome</title>
    <url>/Javascript-Debugging-in-Chrome/</url>
    <content><![CDATA[<p>Debugging 是指在一個腳本中找出錯誤。市面上大宗瀏覽器都支持開發人員工具，能幫助開發者一步步地追蹤代碼，查看當前實際運行情況。<br>
此篇文章以常用的 Google Chrome 做說明－</p>
<h2 id="進入開發人員工具">進入開發人員工具</h2>
<p>按 <code>F12</code> 或是右上角選單中的 <code>更多工具</code> \ <code>開發人員工具</code> 開啟面板。</p>
<span id="more"></span>
<p><img src="https://imgur.com/4kW4nnK.png" alt=""><br>
通常 debugging 最常使用到的是 <code>source</code> 以及 <code>console</code> 面板。</p>
<h3 id="Console">Console</h3>
<p>控制台，可以輸入命令執行，以及用來輸出資料(如 <code>console.log</code> 將顯示於此)。<br>
<img src="https://imgur.com/p73UTZ9.png" alt=""></p>
<h3 id="Source">Source</h3>
<p><img src="https://imgur.com/TX1JU5q.png" alt=""><br>
Sources 頁面包含三個部分：</p>
<ol>
<li>文件導航 (File Navigator)：列出了所有依附於此頁面的文件。</li>
<li>代碼編輯 (Code Editor)：展示程式碼。</li>
<li>JavaScript Debugging：</li>
</ol>
<h4 id="debugging-操作">debugging 操作</h4>
<table>
<thead>
<tr>
<th>按鈕</th>
<th style="text-align:center">操作</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="https://imgur.com/GQ1VrFh.png" width="35"></td>
<td style="text-align:center">Resume</td>
<td>繼續執行直到下一個斷點。如果沒有遇到斷點，則繼續正常執行。</td>
</tr>
<tr>
<td><img src="https://imgur.com/cPPUvKC.png" width="35"></td>
<td style="text-align:center">Long Resume</td>
<td>繼續執行，將斷點停用 500 毫秒。便於暫時跳過斷點，否則會持續暫停執行代碼，例如，循環內的斷點。點擊並按住 Resume，直到展開以顯示操作。</td>
</tr>
<tr>
<td><img src="https://imgur.com/qNWOS6e.png" width="35"></td>
<td style="text-align:center">Step Over</td>
<td>運行下一條指令，但不會進入到函數中，會在無形中執行函數調用，跳過函數內部。執行會在該函數執行後立即暫停。如果我們對該函數的內部執行不感興趣，這命令會很有用。</td>
</tr>
<tr>
<td><img src="https://imgur.com/JQnb7H3.png" width="40"></td>
<td style="text-align:center">Step Into</td>
<td>如果下一行包含一個函數調用，Step Into 將跳轉並在其第一行暫停該函數。</td>
</tr>
<tr>
<td><img src="https://imgur.com/IZrFrbH.png" width="40"></td>
<td style="text-align:center">Step Out</td>
<td>函數調用後，執行當前函數剩餘部分，然後在下一個語句暫停。</td>
</tr>
<tr>
<td><img src="https://imgur.com/lKQK3Bj.png" width="35"></td>
<td style="text-align:center">Step</td>
<td>運行下一條語句。一次接一次地點擊，整個腳本的語句會被逐個執行。</td>
</tr>
<tr>
<td><img src="https://imgur.com/MGhfpuH.png" width="35"></td>
<td style="text-align:center">Deactivate breakpoints</td>
<td>暫時停用所有斷點。用於繼續完整執行，不會真正移除斷點。再次點擊以重新啟用斷點</td>
</tr>
<tr>
<td><img src="https://imgur.com/UZGcRJh.png" width="35"></td>
<td style="text-align:center">Activate breakpoints</td>
<td>啟用斷點</td>
</tr>
</tbody>
</table>
<h4 id="debugging-狀態">debugging 狀態</h4>
<p><img src="https://imgur.com/NDSHkql.png" alt=""></p>
<ol>
<li>Watch<br>
顯示任意表達式的當前值。可以點擊加號 + 然後輸入一個表達式。便會隨時顯示它的值，並在執行過程中自動重新計算該表達式。(同在 scope 中看到的變數)</li>
<li>Call Stack<br>
檢視目前堆疊上的函式或程序呼叫。</li>
<li>Scope<br>
顯示當前的變量。 Local 顯示當前函數中的變量；Global 顯示全局變量（不在任何函數中）。</li>
<li>斷點<br>
在程式碼中設定進入中斷點有許多好處，可以讓 JavaScript 發生例外狀況的時候透過中斷點暫停執行，並檢查當下的 區域變數 (Locals)、設定監看式 (Watch) 與瀏覽呼叫堆疊 (Call Stack) 等等，對於程式的除錯非常有幫助。<br>
Javascript 斷點添加的方式有以下：<br>
<font color=DarkBlue><strong>Sources 斷點</strong></font><br>
直接在 source 頁面中，點擊　Activate breakpoints 再點欲加入段點的行號即可完成操作。當斷點添加完畢後，刷新頁面後會執行到斷點位置停住，在 sources 中會看到當前作用域(Scope)中所有變量和值。<br>
<font color=DarkBlue><strong>條件斷點</strong></font><br>
在Sources里還可以設置條件斷點，在斷點位置的右鍵菜單中選擇「Edit Breakpoint…」可以設置觸發斷點的條件，就是寫一個表達式，表達式為 true 時才觸發斷點。<br>
<font color=DarkBlue><strong>Debugger 斷點</strong></font><br>
Debugger斷點的添加就是通過在代碼中添加&quot;debugger;&quot;語句，當代碼執行到該語句的時候就會自動斷點。</li>
</ol>
<h6 id="參考資料">參考資料</h6>
<p>[1] <a href="https://developers.google.com/web/tools/chrome-devtools/javascript/step-code">https://developers.google.com/web/tools/chrome-devtools/javascript/step-code</a><br>
[2] <a href="https://zh.javascript.info/debugging-chrome">https://zh.javascript.info/debugging-chrome</a></p>
<h6 id="補充">補充</h6>
<p>常常在 debug 的時候會佐以 log 去查看每個階段的變數，但在 debugger 查看 array 或是 object 的變數時，Chrome 會顯示最新的值，而非這個 log 時間點的值，舉例：</p>
<img src="https://imgur.com/tcSMSza.png">
<p>解決方法是，在印 array 前先將 array 轉成字串</p>
<p><img src="https://imgur.com/k93iP9W.png" alt=""></p>
]]></content>
      <categories>
        <category>Programming</category>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>debugging</tag>
      </tags>
  </entry>
  <entry>
    <title>[Java] What are JDK, JRE, JDK ?</title>
    <url>/Java-what-are-JDK-JRE-JDK/</url>
    <content><![CDATA[<p><strong>JDK（Java Development Kit，Java開發工具包）</strong><br>
是用來編譯、調試 Java 程序的開發工具包。組成包含 Java工具（javac/java/jdb等）和 Java 基礎的類庫。</p>
<span id="more"></span>
<p><strong>JRE（Java Runtime Environment， Java運行環境）</strong><br>
所有的 java 程序都要在 JRE 下才能夠運行。組成包含 JVM 和 Java 核心類庫和支持文件。</p>
<p><strong>JVM（Java Virtual Machine， Java虛擬機）</strong><br>
是JRE的一部分，虛擬機代表通過在實體計算機上模擬計算機功能，JVM 有自己的硬體架構以及指令系統，它的工作就是解釋（編譯）自己的指令集（即字節碼）並映射到本地的CPU指令集和OS的系統調用，不同的操作系統會有不同的JVM映射規則，實現 Java 的跨平台特性。<br>
組成包含字節碼指令集、寄存器、棧、垃圾回收堆和存儲方法域…等。</p>
<p><img src="https://imgur.com/iOWaxCJ.png" alt=""> [1]</p>
<h4 id="小結">小結</h4>
<p>使用 JDK 開發 JAVA 程序，再通過 JDK 中的編譯程序（javac）將 Java 程序編譯成 Java Byte Code（字節碼），在 JRE 上運行這些字節碼，JVM 會解析並映射到真實操作系統的 CPU 指令集和 OS 的系統調用。 [2]<br>
<img src="https://imgur.com/WYgyqID.png" alt=""> [3]</p>
<h4 id="Java-SE、Java-ME、Java-EE">Java SE、Java ME、Java EE</h4>
<p>隨著 Java 的應用領域擴展，而發展出的不同的應用開發平台。<br>
- Java SE：Java Platform, Standard Edition，Java 各應用平臺的基礎，可以分作四個主要的部份：JVM、JRE、JDK與Java語言。<br>
- Java EE：Java Platform，Enterprise Edition，是在 Java SE 的基礎上構建的，提供 Web 服務、元件模型、管理和通訊 API，<br>
- Java ME：Java Platform，Micro Edition，是 Java 平臺版本中最小的一個，目的是作為小型數位設備上開發及部署應用程式的平臺，像是消費性電子產品或嵌入式系統等。</p>
<h4 id="小結-2">小結</h4>
<p>Java SE 是做電腦上執行的軟體。<br>
Java EE 是用來做網站的-（我們常見的JSP技術）<br>
Java ME 是做手機軟體的。</p>
<h4 id="source">source</h4>
<p>[1] <a href="https://www.javatpoint.com/difference-between-jdk-jre-and-jvm">https://www.javatpoint.com/difference-between-jdk-jre-and-jvm</a><br>
[2] <a href="https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/654140/">https://codertw.com/程式語言/654140/</a><br>
[3] <a href="https://stackoverflow.com/questions/21810538/c-and-java-virtual-machine-code-execution">https://stackoverflow.com/questions/21810538/c-and-java-virtual-machine-code-execution</a><br>
[4] <a href="https://www.ithome.com.tw/article/124269">https://www.ithome.com.tw/article/124269</a></p>
]]></content>
      <categories>
        <category>Programming</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JRE</tag>
        <tag>JDK</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>[Javascript] runtime、運算子、變數</title>
    <url>/Javascript-basic1/</url>
    <content><![CDATA[<h3 id="Javascript-Runtime">Javascript Runtime</h3>
<p>Javascript 需要有執行環境（Runtime）才能執行，最早期只能跑在瀏覽器上面，我們會透過 Javasrcipt 去操控瀏覽器畫面上的東西，例如表單驗證… 等等。<br>
但 <strong>Node.js</strong> 誕生後，就可以當成是 JS 除了瀏覽器外的 runtime，下載 Node.js 後便可以直接在 CMD 內下指令</p>
<p><code>$ node &lt; fileName.js &gt;</code></p>
<span id="more"></span>
<p>不過兩個執行環境可以操控的東西不是完全一樣的，例如瀏覽器提供了 JS 操控文件的 API <code>document</code>，Node.js 提供 JS 操控檔案的 API <code>fs</code> module，這兩個 API 對於另外一個 runtime 都沒有。 但還是有共同都有的，例如 <code>console</code>，但呈現方式不同，瀏覽器的 console 如下圖，Node.js 的 console 就是 cmd 本身。</p>
<p><img src="https://imgur.com/JO9wNhB.png" alt=""></p>
<h3 id="運算子的種類">運算子的種類</h3>
<h4 id="算數運算">算數運算</h4>
<table>
<thead>
<tr>
<th style="text-align:center">運算</th>
<th style="text-align:center">運算子</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">加</td>
<td style="text-align:center">+</td>
</tr>
<tr>
<td style="text-align:center">減</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center">乘</td>
<td style="text-align:center">*</td>
</tr>
<tr>
<td style="text-align:center">除</td>
<td style="text-align:center">/</td>
</tr>
<tr>
<td style="text-align:center">餘數</td>
<td style="text-align:center">%</td>
</tr>
<tr>
<td style="text-align:center">遞增</td>
<td style="text-align:center">++</td>
</tr>
<tr>
<td style="text-align:center">遞減</td>
<td style="text-align:center">–</td>
</tr>
</tbody>
</table>
<h6 id="i-跟-i-的差別">i++ 跟 ++i 的差別</h6>
<p>把 ++ 放後面代表 ++ 為<code>後運算</code>，如</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log(i++ &amp;&amp; <span class="number">30</span>);</span><br></pre></td></tr></table></figure>
<p>會先執行 console.log(i &amp;&amp; 30)，再執行 i + 1。</p>
<h4 id="指派">指派</h4>
<table>
<thead>
<tr>
<th style="text-align:center">運算</th>
<th style="text-align:center">運算子</th>
<th style="text-align:center">示例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">賦予值</td>
<td style="text-align:center">=</td>
<td style="text-align:center">i = i + 1，將 i+1 指派回 i</td>
</tr>
<tr>
<td style="text-align:center">加法指派</td>
<td style="text-align:center">+=</td>
<td style="text-align:center"><code>i += 1</code> 意即 <code>i = i + 1</code></td>
</tr>
<tr>
<td style="text-align:center">以此類推。</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<h4 id="邏輯運算">邏輯運算</h4>
<table>
<thead>
<tr>
<th style="text-align:center">運算</th>
<th style="text-align:center">運算子</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">AND</td>
<td style="text-align:center">&amp;&amp;</td>
</tr>
<tr>
<td style="text-align:center">OR</td>
<td style="text-align:center">||</td>
</tr>
<tr>
<td style="text-align:center">NOT</td>
<td style="text-align:center">!</td>
</tr>
</tbody>
</table>
<h6 id="邏輯的短路性質">邏輯的短路性質</h6>
<p><code>3 || 10</code> 回傳 <code>3</code>；<code>0 || 10</code> 回傳 <code>10</code>。<br>
第一個運算元是 true 的話，就回傳第一個參數（短路），否則傳第二個。<br>
<code>3 &amp;&amp; 10</code> 回傳 <code>10</code>；<code>0 &amp;&amp; 10</code> 回傳 <code>0</code>。  第一個運算元是 true 的話，由第二個決定，第一個運算元是 false 的話，直接回傳第一個 false（短路）。<br>
<font color=darkred>p.s. 在 Javascript 中，<code>0</code>、<code>false</code> 都代表 false。</font></p>
<h4 id="位元運算">位元運算</h4>
<p>將運算元<strong>變成二進位</strong>後，對每個位元(bit)做操作。</p>
<table>
<thead>
<tr>
<th style="text-align:center">運算</th>
<th style="text-align:center">運算子</th>
<th style="text-align:center">示例</th>
<th style="text-align:center">結果</th>
<th>補充</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">左移</td>
<td style="text-align:center">&lt;&lt;</td>
<td style="text-align:center">8 &lt;&lt; 1</td>
<td style="text-align:center">16</td>
<td>左移就是乘以二</td>
</tr>
<tr>
<td style="text-align:center">右移</td>
<td style="text-align:center">&gt;&gt;</td>
<td style="text-align:center">1024 &gt;&gt; 1</td>
<td style="text-align:center">512</td>
<td>右移就是除以二</td>
</tr>
<tr>
<td style="text-align:center">AND</td>
<td style="text-align:center">&amp;</td>
<td style="text-align:center">10 &amp; 1</td>
<td style="text-align:center">1</td>
<td><code>偶數 &amp; 1</code> 會等於 1；<code>奇數 &amp; 1</code> 會等於 0</td>
</tr>
<tr>
<td style="text-align:center">OR</td>
<td style="text-align:center">|</td>
<td style="text-align:center">2 | 9</td>
<td style="text-align:center">11</td>
<td><code>1 &amp;#124; 1 == 1</code>、<code>1 &amp;#124; 0 == 1</code>、<code>0 &amp;#124; 0 == 0</code></td>
</tr>
<tr>
<td style="text-align:center">NOR</td>
<td style="text-align:center">^</td>
<td style="text-align:center">3 ^ 10</td>
<td style="text-align:center">9</td>
<td><code>0 ^ 0</code> 以及 <code>1 ^ 1</code> 等於 0，其他等於 1</td>
</tr>
<tr>
<td style="text-align:center">NOT</td>
<td style="text-align:center">~</td>
<td style="text-align:center">~1</td>
<td style="text-align:center">-2</td>
<td>00000001 變成 11111110</td>
</tr>
</tbody>
</table>
<p>因為二進位是電腦最原始的表示方式，<font color=darkred>所以以二進位去運算，速度會比一般數學運算還快</font>，例如 <code>n &lt;&lt; 1</code> 會比 <code>n * 2</code> 還要來得快，以 <code>n &amp; 1</code> 判斷奇偶會比 <code>n % 2 == 0</code> 還快。</p>
<hr>
<h3 id="變數">變數</h3>
<h4 id="變數宣告">變數宣告</h4>
<p>使用 <code>var</code> 宣告變數，把它想成創造一個箱子存放東西。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="number">1</span> <span class="comment">//宣告一個變數 test 並賦予值 1</span></span><br></pre></td></tr></table></figure>
<h4 id="命名規範">命名規範</h4>
<ul>
<li>不能以數字開頭命名</li>
<li>大小寫不同視為不同變數</li>
<li>如果沒有宣告就使用變數的話會出錯並顯示 <code>undefined</code></li>
<li>可以直接拿變數來做運算 (+, &amp;&amp;, ||, &amp;, | …)</li>
<li>命名變數要有語意，有兩種方式，且選擇一種後就要統一。
<ul>
<li>底線式： api_response</li>
<li>駝峰式：apiResponse</li>
</ul>
</li>
</ul>
<h4 id="變數型態">變數型態</h4>
<p>七種原始型態 (primitive type)</p>
<ul>
<li>null</li>
<li>undefined</li>
<li>string</li>
<li>number</li>
<li>boolean</li>
<li>symbol (ES6)</li>
</ul>
<p>其他都是 Object 物件</p>
<ul>
<li>array</li>
<li>object</li>
<li>function</li>
<li>date</li>
<li>…</li>
</ul>
<p>使用 <code>typeof</code> 可以查看變數的型態：<br>
<img src="https://imgur.com/GBOSvdZ.png" alt=""><br>
所以使用 typeof 陣列會回傳他的底層型態- object<br>
<img src="https://imgur.com/QgrSadW.png" alt=""><br>
想確定變數是否為 array 時可以使用 <code>arr.isARRAY([])</code>。</p>
<p>另外使用 typeof null 會出先 Object，是 javascripy 的 bug，不須理會</p>
<h4 id="陣列">陣列</h4>
<p>如果變數是一個個不同的箱子的話，那麼陣列就是很多個差不多的箱子，放<strong>同樣類型</strong>的東西。</p>
<ul>
<li>陣列的第一個元素索引式從 <code>0</code> 開始。</li>
<li>陣列在宣告的時候就可以給初始值。<code>var arr=[1, 3, 5, 7]</code></li>
<li>要取得陣列的長度可以用 <code>length</code>，如 <code>console.log(arr.length)</code>，所以 <code>arr[arr.length-1]</code> 可以取得最後一個元素的值</li>
<li>要往陣列塞新的元素的話可以用 <code>push()</code> 方法，如</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.push(<span class="number">9</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">//[1, 3, 5, 7, 9]</span></span><br></pre></td></tr></table></figure>
<h4 id="物件-object">物件 object</h4>
<p>物件可以有多個屬性，屬性是 <code>key-value</code> 的映射。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> student = []</span><br><span class="line"><span class="keyword">var</span> peter = &#123;</span><br><span class="line">    <span class="attr">name</span> : <span class="string">&#x27;peter&#x27;</span>,</span><br><span class="line">    <span class="attr">score</span> : <span class="number">100</span>,</span><br><span class="line">    <span class="attr">phone</span>: <span class="string">&#x27;1234567&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">student.push(peter) <span class="comment">//把 peter 這個物件加入 student 陣列中</span></span><br><span class="line"><span class="built_in">console</span>.log(student[<span class="number">0</span>].score) <span class="comment">// 100</span></span><br><span class="line"><span class="built_in">console</span>.log(peter.name) <span class="comment">//peter</span></span><br><span class="line"><span class="built_in">console</span>.log(peter[<span class="string">&#x27;name&#x27;</span>]) <span class="comment">//peter</span></span><br></pre></td></tr></table></figure>
<p><code>arrayName.push(sth)</code> 可以往陣列後面塞元素。<br>
使用 <code>物件.屬性</code> 可以取得物件的屬性值；<br>
使用<code>物件['屬性']</code>，也可以取得物件的屬性值。<br>
這邊說明一下第二種方式主要是用來把 <code>[]</code> 中的屬性代入變數使用。例如</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> key = <span class="string">&#x27;name&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(peter[key])</span><br></pre></td></tr></table></figure>
<h6 id="物件裡面可以放陣列、物件、或是函數">物件裡面可以放陣列、物件、或是函數</h6>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> peter = &#123;</span><br><span class="line">    <span class="attr">name</span> : <span class="string">&#x27;peter&#x27;</span>,</span><br><span class="line">    <span class="attr">score</span> : [<span class="number">80</span>, <span class="number">100</span>, <span class="number">70</span>, <span class="number">100</span>]</span><br><span class="line">    <span class="attr">phone</span>: <span class="string">&#x27;1234567&#x27;</span>,</span><br><span class="line">    <span class="attr">contact</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;nick&#x27;</span>,</span><br><span class="line">        <span class="attr">phone</span>: <span class="string">&#x27;7654321&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">sayhi</span>: <span class="function"><span class="title">funciton</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//do sth.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(peter.father.name)</span><br><span class="line"><span class="built_in">console</span>.log(peter[<span class="string">&#x27;father&#x27;</span>][<span class="string">&#x27;name&#x27;</span>])</span><br></pre></td></tr></table></figure>
<h4 id="變數運算陷阱">變數運算陷阱</h4>
<h6 id="不同型態相加">不同型態相加</h6>
<p>同時有字串跟數字做相加的話，會變成兩個字串相加</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&#x27;20&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(a+b) <span class="comment">//1020</span></span><br></pre></td></tr></table></figure>
<p>字串轉數字可以使用：</p>
<ol>
<li><code>Number(str)</code></li>
<li><code>parseInt(str,10)</code>，第二的參數代表十進位。</li>
</ol>
<h4 id="浮點數誤差">浮點數誤差</h4>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">0.1</span> + <span class="number">0.2</span></span><br><span class="line"><span class="built_in">console</span>.log(a == o<span class="number">.3</span>) <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">//0.3000000000000004</span></span><br></pre></td></tr></table></figure>
<p>原因是電腦在存小數的時候沒辦法存得這麼精準。</p>
<h4 id="和-的差別">== 和 === 的差別</h4>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> == <span class="string">&#x27;0&#x27;</span>) <span class="comment">//true, 判斷相等不判斷型態</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> === <span class="string">&#x27;0&#x27;</span>) <span class="comment">// false, 判斷相等也需判斷型態</span></span><br></pre></td></tr></table></figure>
<p>有時候只有兩個等號可能會有一些注意到的型態問題導致有 Bug，<strong>所以建議永遠都用 === 三個等號做判斷</strong>。</p>
<h4 id="從-object-的等號真正理解變數">從 object 的等號真正理解變數</h4>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">100</span>===<span class="number">100</span>) <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log([] === []) <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>]===[<span class="number">1</span>]) <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(&#123;&#125; ===&#123;&#125;) <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(&#123;<span class="attr">a</span>:<span class="number">1</span>&#125; ===&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;) <span class="comment">//false</span></span><br></pre></td></tr></table></figure>
<p>造成以上陣列或物件比較結果為 false 的原因是，javascript 底層真正在儲存物件的內容時是儲存該物件存放的 <strong>記憶體位置</strong>，所以指向不同記憶體，相比的結果就不同。<br>
<img src="https://imgur.com/9Rxoz0m.png" alt=""></p>
<p>兩個變數指向<strong>同一個物件</strong>，兩變數去做比較就會相同，將物件內的屬性改值，兩個變數也都會改到。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var obj1 =&#123;</span><br><span class="line">	a: 1</span><br><span class="line">&#125;</span><br><span class="line">var obj2 = obj1</span><br><span class="line">obj2.a =2</span><br><span class="line">console.log(obj2 === obj1) //true</span><br><span class="line">console.log(obj1.a) //2</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/UIHNws3.png" alt=""></p>
<p><img src="https://imgur.com/86A8sXv.png" alt=""></p>
<p>如果指派另一個新的物件給變數 obj2，則會新建另一個記憶體位置存放。此時 obj1 就<strong>不等於</strong> obj2 了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">obj2=&#123;b:1&#125;</span><br><span class="line">console.log(obj2 === obj1) //false</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/tEqfcJK.png" alt=""></p>
<p>陣列的底層儲存也跟物件同理！</p>
<h3 id="Source">Source</h3>
<p>[All] 此篇文章 Lidemy JS101 的筆記，內容及圖片大部分取自上課影片</p>
]]></content>
      <categories>
        <category>Programming</category>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>[Javascript] ES6 新語法 &amp; babel 轉譯器簡介</title>
    <url>/Javascript-ES6nBabel/</url>
    <content><![CDATA[<h3 id="ECMAScript">ECMAScript</h3>
<p><a href="https://zh.wikipedia.org/wiki/ECMAScript">ECMAScript</a>是一個開發標準(規範)，而 Javascript 就是根據此標準來實作。<br>
ES6 指的是 ECMAScript 第六版，於 2015 年發布，所以又稱 ES2015。ES6 包含了許多新的語法，將於下面用 Javascript 介紹。</p>
<span id="more"></span>
<h3 id="新的變數宣告方式">新的變數宣告方式</h3>
<ol>
<li>const：用於宣告不會變的常數。<br>
但如果今天宣告的常數是物件的話，因為物件的底層存的是位址，所以即使宣告的方式為 const 但物件內的屬性值是可以改變的。</li>
<li>let：使用 let 宣告的變數的生存範圍 (scope) 僅限於變數所在的 block 中。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">10</span> &gt; <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line">        <span class="keyword">let</span> b = <span class="number">20</span></span><br><span class="line">        <span class="built_in">console</span>.log(b)</span><br><span class="line">    &#125;</span><br><span class="line">    consle.log(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>b 的生存範圍僅限於 if 區塊中；而 a 的生存範圍則是整個 function。</p>
<div class="info">
<p>作用域愈小愈好，才不會干擾到其他人，所以比較建議使用 let。</p>
</div>
<h3 id="更方便的串接字串-Template-Literals">更方便的串接字串 - Template Literals</h3>
<p>字串串接使用 <code>` `</code> 取代原先使用的單引號 <code>' '</code> 或是雙引號 <code>&quot; &quot;</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以前</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;jack&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello&#x27;</span> + name + <span class="string">&#x27;, it is&#x27;</span> +  <span class="keyword">new</span> <span class="built_in">Date</span>() + <span class="string">&#x27;now!&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">&#x27;hello\nworld\nhello\nJavascript&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">var</span> newStr = <span class="string">`hello <span class="subst">$&#123;name.toUpperCase()&#125;</span>, it is <span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;</span> now!`</span></span><br><span class="line"><span class="keyword">var</span> newStr1 = <span class="string">`hello</span></span><br><span class="line"><span class="string">world,</span></span><br><span class="line"><span class="string">hello</span></span><br><span class="line"><span class="string">Javascript!`</span></span><br></pre></td></tr></table></figure>
<p>以前在使用單雙引號串接字串的時候，如果遇到換行或是要跟字串相接的狀況時需要使用加號串，很麻煩！<br>
現在 ES6 提供反引號來串接，當遇到變數的時候只需要在反引號內使用 <code>$&#123;變數&#125;</code> 或 <code>$&#123;javascript code&#125;</code> 包起來，就可以不必再打一大堆加號跟引號了。</p>
<h3 id="解構-Destructuring">解構 Destructuring</h3>
<p>陣列或物件的元素可以使用解構指定給變數</p>
<h5 id="解構陣列">解構陣列</h5>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">var</span> [first, second, third, fourth] = arr　<span class="comment">// 1, 2, 3, 4</span></span><br><span class="line"><span class="keyword">var</span> [one, two] = arr <span class="comment">// 1, 2</span></span><br></pre></td></tr></table></figure>
<h5 id="解構物件">解構物件</h5>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span> : <span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span> : <span class="number">20</span>,</span><br><span class="line">    <span class="attr">address</span> : <span class="string">&#x27;taiwan&#x27;</span>,</span><br><span class="line">    <span class="attr">family</span> : &#123;</span><br><span class="line">        <span class="attr">father</span> : <span class="string">&#x27;david&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> &#123;name, age&#125; = obj</span><br><span class="line"><span class="keyword">var</span> &#123;family&#125; = obj  <span class="comment">//&#123;father : &#x27;david&#x27;&#125;</span></span><br><span class="line"><span class="keyword">var</span> &#123;father&#125; = family  <span class="comment">//david，再次解構 family 這個物件</span></span><br></pre></td></tr></table></figure>
<ul>
<li>陣列解構使用 <code>[]</code></li>
<li>物件解構使用 <code>&#123;&#125;</code>，且變數需與物件屬性<strong>相同</strong>名稱</li>
<li>解構可以部份解構或雙層解構，會自動對應</li>
<li>部分解構如第三行，只寫兩個變數，就會自動對應前兩個元素</li>
<li>雙層解構如最後兩行，可以直接變成一行 <code>var &#123;family : &#123;father&#125;&#125; = obj</code></li>
</ul>
<p>補充另一個很酷的用法！</p>
<p>在以前函數傳物件的時候要使用裏面的變數:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj.a)</span><br><span class="line">&#125;</span><br><span class="line">test(&#123;</span><br><span class="line">    <span class="attr">a</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span> : <span class="number">2</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>現在有了解構的話就可以這樣寫：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">&#123;a, b&#125;</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br><span class="line">test(&#123;</span><br><span class="line">    <span class="attr">a</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span> : <span class="number">2</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="展開運算子-Spread-Operator">展開運算子 Spread Operator</h3>
<h5 id="用-展開陣列。">用 <code>...</code> 展開陣列。</h5>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, arr]  <span class="comment">//[4, 5, 6, [1, 2, 3]]</span></span><br><span class="line"><span class="keyword">var</span> arr3 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, ...arr] <span class="comment">//[4, 5, 6, 1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b, c</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add(...arr))</span><br></pre></td></tr></table></figure>
<h5 id="用-展開物件。">用 <code>...</code> 展開物件。</h5>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">a</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span> : <span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    ...obj1,</span><br><span class="line">    <span class="attr">c</span> : <span class="number">3</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj3 = &#123;</span><br><span class="line">    ...obj1,</span><br><span class="line">    <span class="attr">b</span> : <span class="number">3</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj3 = &#123;</span><br><span class="line">    <span class="attr">b</span> : <span class="number">2</span>,</span><br><span class="line">    ...obj1,  <span class="comment">//在後面的變數會蓋掉前面的</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj2) <span class="comment">//&#123;a : 1, b : 2, c : 3&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj3) <span class="comment">//&#123;a : 1, b : 3&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj3) <span class="comment">//&#123;b : 2, a : 1&#125;</span></span><br></pre></td></tr></table></figure>
<h5 id="使用-來複製值">使用 <code>...</code> 來複製<strong>值</strong></h5>
<p>陣列放入展開的陣列會是一個擁有不同位址的新陣列，所以要單純複製值的話，要使用展開運算。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> arr1 = arr  <span class="comment">//傳址</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [...arr]  <span class="comment">//傳值</span></span><br><span class="line"><span class="built_in">console</span>.log(arr===arr1) <span class="comment">//輸出 true</span></span><br><span class="line"><span class="built_in">console</span>.log(arr===arr2) <span class="comment">//輸出 false</span></span><br></pre></td></tr></table></figure>
<p>下面很酷：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nest = [<span class="number">4</span>]</span><br><span class="line">arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, nest]</span><br><span class="line">arr2 = [...arr1]</span><br><span class="line"><span class="built_in">console</span>.log(arr1[<span class="number">3</span>]===arr2[<span class="number">3</span>]) <span class="comment">//輸出 true</span></span><br></pre></td></tr></table></figure>
<p>arr1 中的 nest 是用傳址放進來的，所以儘管 arr2 使用展開的 arr1，arr2 中的 <code>[4]</code> 也還會是同一個位址。</p>
<h3 id="其餘參數-Rest-Parameter">其餘參數 Rest Parameter</h3>
<p>可以理解成『反向』展開，通常和解構一起使用，必須放在最後面。</p>
<h5 id="應用在陣列及物件上">應用在陣列及物件上</h5>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">var</span> [first, ...rest] = arr</span><br><span class="line"><span class="built_in">console</span>.log(first, rest) <span class="comment">//1 [2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span> : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">c</span> : <span class="number">3</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> &#123;a, ...obj2&#125; = obj</span><br><span class="line"><span class="built_in">console</span>.log(obj2) <span class="comment">//&#123;b:2, c:3&#125;</span></span><br></pre></td></tr></table></figure>
<h5 id="應用在函式的參數上">應用在函式的參數上</h5>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(args)</span><br><span class="line">    <span class="keyword">return</span> args[<span class="number">0</span>]+args[<span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure>
<h3 id="預設值-Default-Parameters">預設值 Default Parameters</h3>
<p>在 function 的參數加入預設值，當在呼叫時沒有給相對應的參數時，就會用預設值當值傳入。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeat</span>(<span class="params">str = <span class="string">&#x27;ya&#x27;</span>, times = <span class="number">3</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str.repeat(times)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(repeat(<span class="string">&#x27;abc&#x27;</span>))</span><br></pre></td></tr></table></figure>
<h3 id="箭頭函式-arrow-function">箭頭函式 arrow function</h3>
<p>可以簡化函式的寫法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> test = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>簡化成</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> test = <span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果只有一個參數的話 () 可以省略掉；<br>
如果在 return 就能做事並回傳的話 {} 可以省略掉。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">    arr</span><br><span class="line">      .filter(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> value &gt; <span class="number">3</span></span><br><span class="line">      &#125;)</span><br><span class="line">      .map(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> value *<span class="number">2</span></span><br><span class="line">      &#125;)</span><br><span class="line">)  <span class="comment">//輸出 [8, 10]</span></span><br></pre></td></tr></table></figure>
<p>可以省略成</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">    arr</span><br><span class="line">      .filter(<span class="function"><span class="params">value</span> =&gt;</span> value &gt; <span class="number">3</span>)</span><br><span class="line">      .map(<span class="function"><span class="params">value</span> =&gt;</span> value *<span class="number">2</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="export-import-的新寫法">export &amp; import 的新寫法</h3>
<h5 id="個別-export">個別 export</h5>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> PI = <span class="number">3.14</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="統一-export">統一 export</h5>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line"><span class="keyword">const</span> PI = <span class="number">3.14</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    add <span class="keyword">as</span> addFunction,  <span class="comment">//使用 as 可以改名</span></span><br><span class="line">    PI</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="指名-import">指名 import</h5>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;PI, addFunction <span class="keyword">as</span> a&#125; <span class="keyword">from</span> <span class="string">&#x27;./app.js&#x27;</span></span><br><span class="line"><span class="comment">//import 也可以使用 as 改名</span></span><br><span class="line"><span class="built_in">console</span>.log(a(<span class="number">3</span>, <span class="number">5</span>), PI)</span><br></pre></td></tr></table></figure>
<h5 id="用-全部-import">用 * 全部 import</h5>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> app <span class="keyword">from</span> <span class="string">&#x27;./app.js&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(app.addFunction(<span class="number">3</span>, <span class="number">5</span>), app.PI)</span><br></pre></td></tr></table></figure>
<h5 id="export-default-import-default">export default &amp; import default</h5>
<p>可以不用加大括號</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> PI=<span class="number">3.14</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> add, &#123;PI&#125; <span class="keyword">from</span> <span class="string">&#x27;./app&#x27;</span></span><br></pre></td></tr></table></figure>
<p>p.s. Node.js 還沒支援這種新語法，所以要使用接下來介紹的轉譯器。</p>
<h3 id="Babel">Babel</h3>
<p>Babel 是 JavaScript 轉譯器，可將 ES6 以上的程式碼轉為 ES5 程式碼，以支援還沒支持新語法的瀏覽器或環境。</p>
<div class="warning">
<p>babel-node 執行的時候會佔大量的記憶體空間，官方不建議在 production 環境使用。</p>
</div>
<ol>
<li>
<p>安裝 babel-node<br>
<code>$ install --save-dev @babel/core @babel/node</code></p>
</li>
<li>
<p>安裝 presets 並配置 .babelrc 文件<br>
因為 babel-node 對 import 語法默認是關閉的，因此需要安裝指定的 preset 並配置 .babelrc 文件來開啟語法支援。<br>
<code>$ npm i @babel/preset-env --save-dev</code><br>
新增 .babelrc 配置文件 <code>$ touch .babelrc</code>，並在文件中貼上：<br>
<code>$ vi .babelrc</code></p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [ &quot;@babel/preset-env&quot; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>執行 babel-node<br>
<code>npx babel-node index.js</code></li>
</ol>
<h6 id="Source">Source</h6>
<p>[All] 此篇為觀看 Lidemy JS102 的筆記，圖片來源以及部分內容取自上課影片</p>
]]></content>
      <categories>
        <category>Programming</category>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>Node.js</tag>
        <tag>Babel</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>[Javascript] 條件句、迴圈</title>
    <url>/Javascript-basic2/</url>
    <content><![CDATA[<h3 id="if-else-statement">if/else statement</h3>
<p>使用 if/else 來判斷狀況，用法如下：</p>
<h4 id="if…">if…</h4>
<p>可加入運算於判斷條件句內</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">13</span></span><br><span class="line"><span class="keyword">if</span>(num % <span class="number">5</span> === <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;num is multiple of five&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h4 id="if…else">if…else</h4>
<p>判斷如果 if 相符做什麼事，不相符則則做 else 區塊。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> score = <span class="number">70</span></span><br><span class="line"><span class="keyword">if</span>( score&gt;=<span class="number">60</span> &amp;&amp; score&lt;<span class="number">100</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;pass&#x27;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;failed&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="if…else-if…else">if…else if…else</h4>
<p>多條件判斷，先判斷 if、再判斷 else if(可以多個 else if 判斷)，最後都不相符的話執行 else 區塊。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>( score&gt;=<span class="number">60</span> &amp;&amp; score&lt;<span class="number">100</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;pass&#x27;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(score===<span class="number">100</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;excellent&#x27;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;failed&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="補充">補充</h4>
<ol>
<li>小條件通常都用 () 括起來；區塊通常都用 {} 括起來</li>
<li>num % 5 === 0　這個判斷 num 是否為 5 的倍數的判斷句，可以改寫成 !(num % 5)，但 num % 5 === 0 會比較直觀，如果無關乎效能的話．建議使用比較好懂得語句去寫 code。</li>
</ol>
<h3 id="switch-case">switch case</h3>
<p>當判斷的條件非常多的時候，除了使用 else if 外，還可以使用 switch case 取代。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> g = <span class="number">1</span></span><br><span class="line"><span class="keyword">switch</span>(month)&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Jan&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Feb&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Mar&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;wrong month&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="須留意">須留意</h4>
<ul>
<li><font color=darkred>在每個 case 結尾需加入 <code>break</code></font>，當符合 case 後才會跳出，否則會把每個 case 都執行一遍</li>
<li>如果上述 case 都沒符合的話，會執行 <code>default</code></li>
<li>可以把兩個 case 放一起做同一件事，例如上面範例的 case 3 &amp; case 4，任一個符合都會執行 console.log(‘Mar’)</li>
</ul>
<h4 id="小技巧">小技巧</h4>
<p>如果以這個範例來說的話，用上面寫法還是很冗，可以把它簡化成使用陣列來判斷變數內容。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> month = <span class="number">3</span></span><br><span class="line"><span class="keyword">var</span> arrMonth = [<span class="string">&#x27;Jan&#x27;</span>,<span class="string">&#x27;Feb&#x27;</span>,<span class="string">&#x27;Mar&#x27;</span>,<span class="string">&#x27;Apr&#x27;</span>,<span class="string">&#x27;May&#x27;</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arrMonth[month-<span class="number">1</span>]) <span class="comment">//找到 index 就是答案</span></span><br></pre></td></tr></table></figure>
<p>所以可以依照需求去使用不同的寫法，看哪個最適合、或最簡便就用哪個。</p>
<h4 id="同場加映小技巧">同場加映小技巧</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var score = 60</span><br><span class="line">var isPass = false</span><br><span class="line">if (score &gt;= 60)&#123;</span><br><span class="line">    isPass = true</span><br><span class="line">&#125;else &#123;</span><br><span class="line">    isPass = false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可簡化成以下，可讀性高又簡潔的寫法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var score = 60</span><br><span class="line">var isPass = score &gt;= 60</span><br></pre></td></tr></table></figure>
<h3 id="三元運算子-Ternary">三元運算子 Ternary</h3>
<p><code>[condition] ? A : B</code>，condition 為成立的話執行 A；false 的話執行 B。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="number">10</span> &gt; <span class="number">5</span> ? <span class="string">&#x27;bigger&#x27;</span> : <span class="string">&#x27;smaller&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> score = <span class="number">60</span></span><br><span class="line"><span class="keyword">var</span> msg = score &gt;= <span class="number">60</span> ? <span class="string">&#x27;pass&#x27;</span> : <span class="string">&#x27;failed&#x27;</span></span><br></pre></td></tr></table></figure>
<p>也可以加上巢狀判斷，但可讀性就會降低，所以不推薦寫。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> msg = score &gt;= <span class="number">60</span> ? (score === <span class="number">100</span> ? <span class="string">&#x27;excellent&#x27;</span> : <span class="string">&#x27;pass&#x27;</span>) : <span class="string">&#x27;failed&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="迴圈">迴圈</h3>
<p>定義</p>
<ul>
<li>重複做一樣的事情</li>
<li>通常有終止條件</li>
<li>沒有終止條件的迴圈為<code>無窮迴圈</code></li>
</ul>
<h4 id="do…while…">do…while…</h4>
<p>do-while 迴圈至少會執行第一次。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">1</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i)</span><br><span class="line">  i++</span><br><span class="line">&#125;<span class="keyword">while</span>(i&lt;=<span class="number">100</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;i=&#x27;</span>,i) <span class="comment">//i=101</span></span><br></pre></td></tr></table></figure>
<p>當 while () 理的條件為 true 的話才會進入迴圈，false 的話會跳出迴圈。</p>
<h5 id="break">break</h5>
<p>或是可以把跳出迴圈的判斷寫在 do 裡面，使用 <code>break</code> 跳出迴圈。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">1</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i)</span><br><span class="line">  i++</span><br><span class="line">  <span class="keyword">if</span>(i&gt;<span class="number">100</span>)&#123;</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure>
<h5 id="continue">continue</h5>
<p>可以在 do 裡面加上 <code>continue</code> 做另一層判斷以接進行下一圈。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">1</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (i%<span class="number">2</span>===<span class="number">1</span>)&#123;</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(i)</span><br><span class="line">  i++</span><br><span class="line">&#125;<span class="keyword">while</span>(i&lt;=<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<p>上面印出的結果如下，因為當 i 為奇數時（% 2 === 1），會執行 continue 跳到while 判斷進行到下一個個迴圈。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">4</span><br><span class="line">6</span><br><span class="line">8</span><br><span class="line">10</span><br></pre></td></tr></table></figure>
<h4 id="while…">while…</h4>
<p>while 迴圈會先判斷，才會進入迴圈。通常較多使用 while 迴圈，依實際狀況而定。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">1</span> <span class="comment">//初始值</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;=<span class="number">100</span>)&#123;  <span class="comment">//終止條件</span></span><br><span class="line">  <span class="built_in">console</span>.log(i++) <span class="comment">//i++, i每一圈要做的事情</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>while 同樣也可以使用上面提到的 <code>break</code> 以及 <code>continue</code>。</p>
<h4 id="for…loop">for…loop</h4>
<p>從上述 while 的例子中註解寫到的迴圈基本的元素，如果用 for-loop 形式表示如下：<br>
<code>for(初始值 i ; i 的終止條件; i 每一圈要做的事情)&#123;&#125;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=<span class="number">100</span>; i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>執行的順序是 i=1、i 是否小於等於 100、console.log(i)、i++。<br>
for 同樣也可以使用上面提到的 <code>break</code> 以及 <code>continue</code>。<br>
for-loop 通常使用在已知迴圈長度的情況下，例如陣列。</p>
<h5 id="與陣列的搭配使用">與陣列的搭配使用</h5>
<p>使用 for loop 示範，也可以用 while / do-while。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> scores=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;scores.length; i++)&#123;</span><br><span class="line">  sum += scores[i]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;sum=&#x27;</span>,sum)</span><br></pre></td></tr></table></figure>
<h4 id="小技巧-2">小技巧</h4>
<p>利用 Chrome 的 debugger 可以實時觀察迴圈執行的變化，幫助釐清，可參考這篇<a href="https://ulahsieh.github.io/Javascript-Debugging-in-Chrome.html#more">文章</a>。</p>
]]></content>
      <categories>
        <category>Programming</category>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>[Javascript] 函式、內建函式</title>
    <url>/Javascript-basic3/</url>
    <content><![CDATA[<h3 id="函式-functiton">函式 functiton</h3>
<p>基本函式結構</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函式名稱(<span class="params">參數</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> 回傳值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>傳入參數可以一個或多個，可以是值、變數、陣列、物件或是函式</li>
<li>回傳值可以零個或一個，可以是一個值、變數、陣列、物件或是函式</li>
<li>呼叫函式直接打 <code>函式名稱()</code> ；如果有帶參數，將引數置於括號中 <code>函式名稱(引數)</code></li>
</ul>
<span id="more"></span>
<h3 id="參數-Parameter-v-s-引數-Argument">參數 Parameter v.s. 引數 Argument</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">funciton <span class="function"><span class="title">add</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)  <span class="comment">//&#123;&#x27;0&#x27;:2, &#x27;1&#x27;:5&#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]) <span class="comment">//2</span></span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="number">2</span>,<span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<p>其中 a, b 為 function add 的<code>參數</code>；2, 5 為<code>引數</code>。<br>
Javascript 提供了一個引述的變數 <code>arguments</code>，可以在 function 內使用。</p>
<h4 id="小補充">小補充</h4>
<p>arguments 是一個<code>物件</code>，但你可能會疑惑為什麼可以用類似陣列的方式 <code>arguments[0]</code> 存取，因為上一篇<a href="https://ulahsieh.github.io/Javascript-basic1.html">文章</a>物件有提到，存取物件屬性值可以用<code>物件.屬性名</code>或是<code>物件['屬性名']</code>，而  argument[‘0’] 中的字串<code>'0'</code>，可以直接用數字 <code>0</code> 表示，所以就會看起來想存取陣列的表示方式了。</p>
<h4 id="不同的函式宣告方式">不同的函式宣告方式</h4>
<ol>
<li>直接宣告一個具名的 function</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>宣告變數等於一個匿名 function</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>function 當參數傳入另一 function</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">anything</span>)</span>&#123;</span><br><span class="line">    anything()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">print(hello)</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trans</span>(<span class="params">x, passInFunc</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> passInFunc(x)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">double</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x*<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(trans(<span class="number">10</span>,double))</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trans</span>(<span class="params">x, passInFunc</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> passInFunc(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(trans(<span class="number">10</span>,<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x*<span class="number">2</span></span><br><span class="line">&#125;)) <span class="comment">//傳入匿名函式當參數</span></span><br></pre></td></tr></table></figure>
<h3 id="function-的傳值與傳址">function 的傳值與傳址</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> temp = a</span><br><span class="line">    a = b</span><br><span class="line">    b = temp </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;a, b:&#x27;</span>,a,b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">20</span></span><br><span class="line"><span class="built_in">console</span>.log(num1,num2)</span><br><span class="line">swap(num1,num2)</span><br><span class="line"><span class="built_in">console</span>.log(num1, num2)</span><br></pre></td></tr></table></figure>
<p>執行結果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10 20</span><br><span class="line">a, b: 20 10</span><br><span class="line">10 20</span><br></pre></td></tr></table></figure>
<p>在呼叫 swap(num1, num2) 時，是把 num1, num2 的<strong>值</strong>複製一份到 swap(a, b)，而非位址，所以 num1 之於 a 是兩個位址不一樣的變數。</p>
<p><font color=darkred>但是如果傳入的是物件或是陣列的話，就是傳址。</font><br>
<img src="https://imgur.com/j1kZHAi.png" alt=""></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addValue</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    obj.num++</span><br><span class="line">    obj.num2 = <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a =&#123;</span><br><span class="line">    <span class="attr">num</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">addValue(a)</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br></pre></td></tr></table></figure>
<p>執行結果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; num : 2, num2 : 20&#125;</span><br></pre></td></tr></table></figure>
<p>但是如果不是用<code>物件.屬性</code>去改值的話，而是去賦予一個新的物件，那底層的指標就會改位址了。<br>
<img src="https://imgur.com/0G1ZvMf.png" alt=""></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addValue</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    obj=&#123;</span><br><span class="line">        <span class="attr">num</span>: <span class="number">100</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a =&#123;</span><br><span class="line">    <span class="attr">num</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">addValue(a)</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br></pre></td></tr></table></figure>
<p>執行結果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; num : 1 &#125;</span><br></pre></td></tr></table></figure>
<p>詳細參考<a href="https://blog.techbridge.cc/2018/06/23/javascript-call-by-value-or-reference/">文章</a></p>
<h3 id="return-與不-return">return 與不 return</h3>
<p>要不要 return 取決於需不需要知道結果，呼叫的方式就會不同。<br>
有帶 return 的 function 呼叫時會宣告一個變數放回傳值；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addNum</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a+<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> num = printNum(<span class="number">15</span>)</span><br><span class="line"><span class="built_in">console</span>.log(num)   <span class="comment">//16</span></span><br></pre></td></tr></table></figure>
<p>warning<br>
function 一旦 return 後．return後的程式碼就都不會執行了。</p>
<p>例如下面的範例只會印出第七行，不會印出第四行，因為遇到前一行的 return 就返回了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addNum</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">	a++</span><br><span class="line">	<span class="keyword">return</span> a</span><br><span class="line">	<span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> num = printNum(<span class="number">15</span>)</span><br><span class="line"><span class="built_in">console</span>.log(num)   <span class="comment">//16</span></span><br></pre></td></tr></table></figure>
<p>如果是沒有 return 的函式，通常都直接呼叫即可。因為就算賦予給一變數，變數的內容也會是 undefined（javascript 預設）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printNum</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br><span class="line">printNum(<span class="number">15</span>)    <span class="comment">//15</span></span><br><span class="line"><span class="keyword">var</span> num = printNum(<span class="number">15</span>)</span><br><span class="line"><span class="built_in">console</span>.log(num)  <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>
<h3 id="數字相關的內鍵函式">數字相關的內鍵函式</h3>
<h4 id="字串轉數字">字串轉數字</h4>
<ul>
<li>Number(n)  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&#x27;20&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(a+<span class="built_in">Number</span>(b))      <span class="comment">//輸出 30</span></span><br></pre></td></tr></table></figure>
</li>
<li>parseInt(n, 進位數)  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&#x27;20.35&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(a+<span class="built_in">parseInt</span>(b, <span class="number">10</span>))      <span class="comment">//輸出 30</span></span><br></pre></td></tr></table></figure>
</li>
<li>parseFloat(n, 進位數)  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&#x27;20.35&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(a+<span class="built_in">parseFloat</span>(b, <span class="number">10</span>))      <span class="comment">//輸出 30.35</span></span><br></pre></td></tr></table></figure>
</li>
<li>parseFloat(n, 進位數).toFixed(四捨五入截到小數點後第幾位)  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&#x27;20.3523546&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(a+<span class="built_in">parseFloat</span>(b, <span class="number">10</span>))      <span class="comment">//輸出 30.35</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="toString">toString</h4>
<p>可以使用 ‵.toString()‵ 函式將數字轉字串，或是加上 ‵‘’‵ 空字串。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> b = a.toString()</span><br><span class="line"><span class="keyword">var</span> c = a+<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a)  <span class="comment">//輸出 number</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> b)  <span class="comment">//輸出 string</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> c)  <span class="comment">//輸出 string</span></span><br></pre></td></tr></table></figure>
<p>可以使用 toString 將數字轉成任意進位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log((30).toSting(2)) //輸出 11110</span><br></pre></td></tr></table></figure>
<h4 id="補充">補充</h4>
<ul>
<li>Number.MAX_VALUE</li>
</ul>
<p><img src="https://imgur.com/Sojie3F.png" alt=""><br>
代表 Javascript 可以存的最大數字。</p>
<h4 id="Math">Math</h4>
<ul>
<li>Math.PI<br>
圓周率，通常使用 const 宣告常數來賦值 <code>const pi = Math.PI</code></li>
<li>Math.ceil(n)<br>
無條件進位</li>
<li>Math.floor(n)<br>
無條件捨去</li>
<li>Math.round(n)<br>
四捨五入</li>
<li>Math.sqrt(n)<br>
對 n 開根號</li>
<li>Math.pow(n, x次方)<br>
回傳 n 的 x 次方 <code>console.log(Math.pow(2,10))</code></li>
<li>Math.random()<br>
產生一個 0 到 1 (大於等於 0、小於 1) 的隨機數<br>
如果要取一個 1 ~ 10 的隨機整數：<code> Math.floor(Math.random()*10+1)</code></li>
</ul>
<h3 id="字串相關的內鍵函式">字串相關的內鍵函式</h3>
<h4 id="字串大小寫相關">字串大小寫相關</h4>
<ul>
<li>‘ABC’.toLowerCase() //abc</li>
<li>‘abc’.toUpperCase()  // ABC</li>
<li>‘A’.charCodeAt(0) //65</li>
<li>String.fromCharCode(65) //A</li>
</ul>
<h4 id="indexOf">indexOf</h4>
<p><code>字串.indexOf('目標')</code> 用以找字串中是否存在目標，存在的話回傳目標的第一個索引值；不存在的話回傳 <code>-1</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello im ula&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">&#x27;im&#x27;</span>)) <span class="comment">//輸出 6</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">&#x27;world&#x27;</span>)) <span class="comment">//輸出 -1</span></span><br></pre></td></tr></table></figure>
<h4 id="replace">replace</h4>
<p><code>字串.replace('原字串','新字串')</code> 用以將字串中第一個出現的指定原字串取代成新字串。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello world&#x27;</span>.replace(<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;!&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(str)  <span class="comment">//輸出 he!lo world</span></span><br></pre></td></tr></table></figure>
<p>如果要全部取代，需要使用正規表達式<code>/'字串'/g</code>，其中 g 是指 global：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str2 = <span class="string">&#x27;hello world&#x27;</span>.replace(<span class="regexp">/l/g</span>,<span class="string">&#x27;!&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(str)  <span class="comment">//輸出 he!!o wor!d</span></span><br></pre></td></tr></table></figure>
<h4 id="split">split</h4>
<p><code>字串.split('分割基準')</code>，將字串用分割基準分成陣列。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.split(<span class="string">&#x27; &#x27;</span>)) <span class="comment">//輸出 [&#x27;hello&#x27;,&#x27;world&#x27;]</span></span><br></pre></td></tr></table></figure>
<h4 id="trim">trim</h4>
<p>用來去掉字串前後兩端的空白。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;    hello world   &#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.trim()) <span class="comment">//輸出 &#x27;hello world&#x27;</span></span><br></pre></td></tr></table></figure>
<h4 id="length">length</h4>
<p><code>字串.length</code> 回傳字串長度。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;str.length; i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(str[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>p.s. 字串也可以像陣列一樣使用 str[index] 來存取該索引的值。</p>
<h3 id="陣列相關的內鍵函式">陣列相關的內鍵函式</h3>
<h4 id="join">join</h4>
<p><code>陣列.join('連接字串')</code> 用來將陣列的元素以連接字串連起來變成一個字串回傳。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.join(<span class="string">&#x27;&amp;&#x27;</span>)) <span class="comment">// 輸出 &quot;1&amp;2&amp;3</span></span><br><span class="line"><span class="string">&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="map">map</h4>
<p><code>陣列.map(函式)</code>將陣列中的每個元素都調用到指定函式內，並回傳一個新的陣列。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">double</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x*<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr.map(double))  <span class="comment">//輸出[2, 4, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.map(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x-<span class="number">1</span></span><br><span class="line">&#125;))  <span class="comment">//輸出 [0, 1, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.map(double).map(double)) <span class="comment">//輸出 [4, 8, 12]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>可以丟函式或直接寫匿名函式</li>
<li>可以把 map 串起來成多個操作</li>
</ul>
<h4 id="filter">filter</h4>
<p><code>陣列.filter(函式)</code>將陣列中的每個元素都調用到指定函式內，並回傳一個元素皆符合函式描述的新陣列。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, -<span class="number">6</span>, -<span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;<span class="number">0</span>  <span class="comment">//輸出 [1, 2, 3, 5]</span></span><br><span class="line">&#125;))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="slice">slice</h4>
<p><code>陣列.slice(開始索引,結束索引)</code>，回傳一個包含開始索引、不包含結束索引的新陣列。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">3</span>)) <span class="comment">//輸出[4, 5, 6]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">3</span>,<span class="number">5</span>)) <span class="comment">//輸出[4, 5]</span></span><br></pre></td></tr></table></figure>
<h4 id="splice">splice</h4>
<p><code>陣列.splice(開始索引,刪除數量,插入)</code>，可以插入元素和刪除元素，<strong>陣列本身會改變</strong>，並回傳被刪除的元素陣列，。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;candy&#x27;</span>, <span class="string">&#x27;donut&#x27;</span>]</span><br><span class="line"><span class="keyword">var</span> arr2 = arr.splice(<span class="number">2</span>, <span class="number">1</span>, <span class="string">&quot;cake&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr)  <span class="comment">//輸出 [&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;cake, &#x27;donut&#x27;]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2)  <span class="comment">//輸出 [&#x27;candy&#x27;]</span></span><br></pre></td></tr></table></figure>
<h4 id="sort">sort</h4>
<p><code>陣列.sort()</code>，將陣列重新按照<strong>字串大小</strong>做排序，不管陣列本身是不是字串，且<strong>陣列本身會改變</strong>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;A&#x27;</span>];</span><br><span class="line">arr.sort();</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">// 輸出 [&quot;A&quot;, &quot;B&quot;, &quot;D&quot;, &quot;F&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">1</span>, <span class="number">30</span>, <span class="number">4</span>, <span class="number">21</span>, <span class="number">100000</span>];</span><br><span class="line">arr2.sort();</span><br><span class="line"><span class="built_in">console</span>.log(arr2);</span><br><span class="line"><span class="comment">// 輸出 [1, 100000, 21, 30, 4]</span></span><br></pre></td></tr></table></figure>
<p>如果陣列元素是數字，想以數字排大小的話，需要在括號內加上判斷函式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line">nums.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a - b; <span class="comment">//由小排到大。如果 &lt;= 0，則 a, b 位置不變；如果 &gt; 0，則 b 要跟 a 調換</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(nums)　<span class="comment">//輸出 [1,2,3,4,5]</span></span><br><span class="line">nums.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> b - a; <span class="comment">//由大排到小。如果 &lt;= 0，則 a, b 位置不變；如果 &gt; 0，則 b 要跟 a 調換</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(nums)  <span class="comment">//輸出 [5,4,3,2,1]</span></span><br></pre></td></tr></table></figure>
<h4 id="reduce">reduce</h4>
<p><code>陣列.reduce(callback[accumulator, currentValue], initialValue)</code>方法的參數是一個回呼函式，會將陣列中的每個元素呼叫一次回呼函式，並將回呼函式的傳回值當作下一次呼叫回呼函式的參數傳入。</p>
<ul>
<li>accumulator：累積 callback 回傳值的累加器</li>
<li>currentValue：當前元素</li>
<li>initialValue：於第一次呼叫 callback 時要傳入的累加器初始值。預設為陣列的第一個元素</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*-------before--------*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> total = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  total += arr[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*-------after--------*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> total = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">total,x</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> total+x</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//或是 arr.reduce((total,x)=&gt;total+x));</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="forEach">forEach</h4>
<p><code>陣列.forEach(function callback(x)&#123;...&#125;</code> 方法會將陣列內的每個元素傳入並執行給定的函式一次，不會回傳任何東西。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*-------before--------*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> copy = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">  copy.push(arr[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*-------after--------*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> copy = [];</span><br><span class="line"></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  copy.push(x)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="Array-fill">Array().fill()</h4>
<p><code>Array(n).fill(0)</code> 產生一個 n 個長度的 array，每個元素都填零。<br>
下面有一個看 [JS101] 印出很多星星的不同的超酷寫法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">star</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">    	result += <span class="string">&#x27;*&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeStars</span>(<span class="params">layer</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Array</span>(layer).fill(<span class="number">0</span>).map(<span class="function"><span class="keyword">function</span>(<span class="params">x, index</span>) </span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> star(index+<span class="number">1</span>)</span><br><span class="line">    &#125;).join(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(makeStars(<span class="number">5</span>))</span><br></pre></td></tr></table></figure>
<h3 id="Immutable-Value-不可變">Immutable Value 不可變</h3>
<p>除了物件和陣列以外的 primitive type 皆是不可變的，不可變的意思是當宣告變數後，每一次的重新賦值都不是從原本的記憶體位址改，而是創造一個新的記憶體存新的值，舊的不可變。<br>
<img src="https://imgur.com/8IrsAgr.png" alt=""></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a = &#x27;hello&#x27;</span><br><span class="line">a.toUpperCase() </span><br><span class="line">console.log(a) //輸出 hello，因為第一行不可變</span><br><span class="line">a = a.toUpperCase() //需要創造一個新的位置，重新賦值給 a</span><br><span class="line">console.log(a)</span><br></pre></td></tr></table></figure>
<p>而物件跟陣列<strong>通常</strong>都是可變的，例如 arr.push 會改動原本 arr 的陣列，但通常代表還是有例外，例如 arr.join。</p>
<p>因為實在有太多函式可以使用，但如果不確定到底是不是可變的，那建議在使用之前查一下<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array">資料</a>。</p>
<h3 id="遞迴">遞迴</h3>
<p>在 function 中一直重複呼叫自己，但前提是要有終止條件(return)。<br>
JS101 費式數列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function fib(n)&#123;</span><br><span class="line">	if(n===0) return 0</span><br><span class="line">    if(n===1) return 1</span><br><span class="line">    return fib(n-2) + fib(n-1)</span><br><span class="line">&#125;</span><br><span class="line">fib(4)</span><br></pre></td></tr></table></figure>
<p>JS101 壓平陣列</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> result = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;=arr.length; i++) &#123;</span><br><span class="line">    	<span class="keyword">if</span>(<span class="built_in">Array</span>.isArray(arr[i])) &#123;</span><br><span class="line">        	<span class="keyword">var</span> flatArr = flatten(arr[i])</span><br><span class="line">            flatArr.forEach(<span class="function"><span class="params">x</span>=&gt;</span>result.push(x))</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        	result.push(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="小技巧-大問題切成小問題">小技巧 - 大問題切成小問題</h4>
<p>當問題卡關時，可以先用函式填空，把遇到的問題用函式分解到最小，就可以把解題大綱列出來了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 印出 1~100 的偶數</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print1To100</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)&#123;</span><br><span class="line">        logEven(i)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logEven</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(num%<span class="number">2</span> === <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(num)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">print1To100() <span class="comment">//呼叫</span></span><br></pre></td></tr></table></figure>
<h3 id="Source">Source</h3>
<p>[All] 此篇文章 Lidemy JS101 的筆記，內容及圖片大部分取自上課影片</p>
]]></content>
      <categories>
        <category>Programming</category>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>遞迴函式</tag>
      </tags>
  </entry>
  <entry>
    <title>[KVM] Install Rocky Linux</title>
    <url>/KVM-Install-Rocky-Linux/</url>
    <content><![CDATA[<h2 id="安裝-KVM-套件">安裝 KVM 套件</h2>
<p>請參考之前的<a href="https://ulahsieh.github.io/KVM-virt-install-CentOS">文章</a></p>
<span id="more"></span>
<h2 id="安裝-Rocky-Linux-VM">安裝 Rocky Linux VM</h2>
<h3 id="於官網下載-iso-映像檔">於官網下載 iso 映像檔</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate https://download.rockylinux.org/pub/rocky/8/isos/x86_64/Rocky-8.5-x86_64-minimal.iso</span><br></pre></td></tr></table></figure>
<h3 id="開始安裝">開始安裝</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">virt-install --name rockym \</span><br><span class="line">--disk path=/var/lib/libvirt/images/rockym,size=60,format=qcow2 \</span><br><span class="line">--vcpus 4 --memory 16384 \</span><br><span class="line">--network bridge=br0 \</span><br><span class="line">--graphics none --os-type linux --os-variant=rhl8.0 \</span><br><span class="line">--location /var/lib/libvirt/images/Rocky-8.5-x86_64-minimal.iso \</span><br><span class="line">--extra-args &#x27;console=ttyS0&#x27;</span><br></pre></td></tr></table></figure>
<h3 id="3-Installation-source-選項配置">3) Installation source 選項配置</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Installation</span><br><span class="line"></span><br><span class="line">1) [x] Language settings                 2) [x] Time settings</span><br><span class="line">       (English (United States))                (Asia/Taipei timezone)</span><br><span class="line">3) [x] Installation source               4) [x] Software selection</span><br><span class="line">       (Local media)                            (Server)</span><br><span class="line">5) [!] Installation Destination          6) [x] Kdump</span><br><span class="line">       (Automatic partitioning                  (Kdump is enabled)</span><br><span class="line">       selected)</span><br><span class="line">7) [ ] Network configuration             8) [!] Root password</span><br><span class="line">       (Not connected)                          (Root account is disabled.)</span><br><span class="line">9) [!] User creation</span><br><span class="line">       (No user will be created)</span><br><span class="line"></span><br><span class="line">Please make a selection from the above [&#x27;b&#x27; to begin installation, &#x27;q&#x27; to quit,</span><br><span class="line">&#x27;r&#x27; to refresh]: 3</span><br><span class="line">================================================================================</span><br><span class="line">================================================================================</span><br><span class="line">Installation source</span><br><span class="line"></span><br><span class="line">Choose an installation source type.</span><br><span class="line">1) CD/DVD</span><br><span class="line">2) local ISO file</span><br><span class="line">3) Network</span><br><span class="line"></span><br><span class="line">Please make a selection from the above [&#x27;c&#x27; to continue, &#x27;q&#x27; to quit, &#x27;r&#x27; to</span><br><span class="line">refresh]: 2</span><br><span class="line">================================================================================</span><br><span class="line">================================================================================</span><br><span class="line">Select device containing the ISO file</span><br><span class="line"></span><br><span class="line">No mountable devices found</span><br><span class="line"></span><br><span class="line">Please make a selection from the above [&#x27;c&#x27; to continue, &#x27;q&#x27; to quit, &#x27;r&#x27; to</span><br><span class="line">refresh]: c</span><br><span class="line">================================================================================</span><br><span class="line">================================================================================</span><br><span class="line">Installation</span><br><span class="line"></span><br><span class="line">1) [x] Language settings                 2) [x] Time settings</span><br><span class="line">       (English (United States))                (Asia/Taipei timezone)</span><br><span class="line">3) [!] Installation source               4) [!] Software selection</span><br><span class="line">       (Processing...)                          (Processing...)</span><br><span class="line">5) [!] Installation Destination          6) [x] Kdump</span><br><span class="line">       (Automatic partitioning                  (Kdump is enabled)</span><br><span class="line">       selected)</span><br><span class="line">7) [ ] Network configuration             8) [!] Root password</span><br><span class="line">       (Not connected)                          (Root account is disabled.)</span><br><span class="line">9) [!] User creation</span><br><span class="line">       (No user will be created)</span><br><span class="line"></span><br><span class="line">Please make a selection from the above [&#x27;b&#x27; to begin installation, &#x27;q&#x27; to quit,</span><br><span class="line">&#x27;r&#x27; to refresh]: r</span><br><span class="line">================================================================================</span><br><span class="line">================================================================================</span><br><span class="line">Installation</span><br><span class="line"></span><br><span class="line">1) [x] Language settings                 2) [x] Time settings</span><br><span class="line">       (English (United States))                (Asia/Taipei timezone)</span><br><span class="line">3) [x] Installation source               4) [!] Software selection</span><br><span class="line">       (Local media)                            (Source changed - please verify)</span><br><span class="line">5) [!] Installation Destination          6) [x] Kdump</span><br><span class="line">       (Automatic partitioning                  (Kdump is enabled)</span><br><span class="line">       selected)</span><br><span class="line">7) [ ] Network configuration             8) [!] Root password</span><br><span class="line">       (Not connected)                          (Root account is disabled.)</span><br><span class="line">9) [!] User creation</span><br><span class="line">       (No user will be created)</span><br></pre></td></tr></table></figure>
<h3 id="4-Software-selection-選項配置">4) Software selection 選項配置</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Installation</span><br><span class="line"></span><br><span class="line">1) [x] Language settings                 2) [x] Time settings</span><br><span class="line">       (English (United States))                (Asia/Taipei timezone)</span><br><span class="line">3) [x] Installation source               4) [!] Software selection</span><br><span class="line">       (Local media)                            (Source changed - please verify)</span><br><span class="line">5) [x] Installation Destination          6) [x] Kdump</span><br><span class="line">       (Automatic partitioning                  (Kdump is enabled)</span><br><span class="line">       selected)</span><br><span class="line">7) [ ] Network configuration             8) [!] Root password</span><br><span class="line">       (Not connected)                          (Root account is disabled.)</span><br><span class="line">9) [!] User creation</span><br><span class="line">       (No user will be created)</span><br><span class="line"></span><br><span class="line">Please make a selection from the above [&#x27;b&#x27; to begin installation, &#x27;q&#x27; to quit,</span><br><span class="line">&#x27;r&#x27; to refresh]: 4</span><br><span class="line">================================================================================</span><br><span class="line">================================================================================</span><br><span class="line">Software selection</span><br><span class="line"></span><br><span class="line">Base environment</span><br><span class="line"></span><br><span class="line">1) [ ] Server                           3) [ ] Custom Operating System</span><br><span class="line">2) [ ] Minimal Install</span><br><span class="line"></span><br><span class="line">Please make a selection from the above [&#x27;c&#x27; to continue, &#x27;q&#x27; to quit, &#x27;r&#x27; to</span><br><span class="line">refresh]: 2</span><br><span class="line">================================================================================</span><br><span class="line">================================================================================</span><br><span class="line">Software selection</span><br><span class="line"></span><br><span class="line">Base environment</span><br><span class="line"></span><br><span class="line">1) [ ] Server                           3) [ ] Custom Operating System</span><br><span class="line">2) [x] Minimal Install</span><br><span class="line"></span><br><span class="line">Please make a selection from the above [&#x27;c&#x27; to continue, &#x27;q&#x27; to quit, &#x27;r&#x27; to</span><br><span class="line">refresh]: c</span><br><span class="line">================================================================================</span><br><span class="line">================================================================================</span><br><span class="line">Software selection</span><br><span class="line"></span><br><span class="line">Additional software for selected environment</span><br><span class="line"></span><br><span class="line">1) [ ] Standard                         6) [ ] Network Servers</span><br><span class="line">2) [ ] Development Tools                7) [ ] Scientific Support</span><br><span class="line">3) [ ] Graphical Administration Tools   8) [ ] Security Tools</span><br><span class="line">4) [ ] Headless Management              9) [ ] Smart Card Support</span><br><span class="line">5) [ ] Legacy UNIX Compatibility        10) [ ] System Tools</span><br><span class="line"></span><br><span class="line">Please make a selection from the above [&#x27;c&#x27; to continue, &#x27;q&#x27; to quit, &#x27;r&#x27; to</span><br><span class="line">refresh]: c</span><br><span class="line">================================================================================</span><br><span class="line">================================================================================</span><br><span class="line">Installation</span><br><span class="line"></span><br><span class="line">1) [x] Language settings                 2) [x] Time settings</span><br><span class="line">       (English (United States))                (Asia/Taipei timezone)</span><br><span class="line">3) [!] Installation source               4) [!] Software selection</span><br><span class="line">       (Processing...)                          (Processing...)</span><br><span class="line">5) [x] Installation Destination          6) [x] Kdump</span><br><span class="line">       (Automatic partitioning                  (Kdump is enabled)</span><br><span class="line">       selected)</span><br><span class="line">7) [ ] Network configuration             8) [!] Root password</span><br><span class="line">       (Not connected)                          (Root account is disabled.)</span><br><span class="line">9) [!] User creation</span><br><span class="line">       (No user will be created)</span><br><span class="line"></span><br><span class="line">Please make a selection from the above [&#x27;b&#x27; to begin installation, &#x27;q&#x27; to quit,</span><br><span class="line">&#x27;r&#x27; to refresh]: r</span><br><span class="line">================================================================================</span><br><span class="line">================================================================================</span><br><span class="line">Installation</span><br><span class="line"></span><br><span class="line">1) [x] Language settings                 2) [x] Time settings</span><br><span class="line">       (English (United States))                (Asia/Taipei timezone)</span><br><span class="line">3) [x] Installation source               4) [x] Software selection</span><br><span class="line">       (Local media)                            (Minimal Install)</span><br><span class="line">5) [x] Installation Destination          6) [x] Kdump</span><br><span class="line">       (Automatic partitioning                  (Kdump is enabled)</span><br><span class="line">       selected)</span><br><span class="line">7) [ ] Network configuration             8) [!] Root password</span><br><span class="line">       (Not connected)                          (Root account is disabled.)</span><br><span class="line">9) [!] User creation</span><br><span class="line">       (No user will be created)</span><br></pre></td></tr></table></figure>
<p>其中 addtional software 的安裝選項的解釋如下:</p>
<ul>
<li>Standard: The standard installation of Rocky Linux.</li>
<li>Development Tools: A basic development environment.</li>
<li>Graphical Administration Tools: Graphical system administration tools for managing many aspects of a system.</li>
<li>Headless Management: Tools for managing the system without an attached graphical console.</li>
<li>Lagacy UNIX Compatibility: Compatibility programs for migration from or working with lagacy UNIX environments.</li>
<li>Network Servers: These packages include network-based servers such as DHCP, Kerberos and NIS.</li>
<li>Scientific Support: Tools for mathematical and scientific computations, and parallel computing.</li>
<li>Security Tools: Security tools for integrity and trust verification.</li>
<li>Smart Card Support: Support for using smart card authentication.</li>
<li>System Tools: This group is a collection of various tools for the system, such as the client for connection to SMB shares and tools to monitor network traffic.</li>
</ul>
<h3 id="5-Installation-Destination-選項配置">5) Installation Destination 選項配置</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Installation</span><br><span class="line"></span><br><span class="line">1) [x] Language settings                 2) [x] Time settings</span><br><span class="line">       (English (United States))                (Asia/Taipei timezone)</span><br><span class="line">3) [x] Installation source               4) [!] Software selection</span><br><span class="line">       (Local media)                            (Source changed - please verify)</span><br><span class="line">5) [!] Installation Destination          6) [x] Kdump</span><br><span class="line">       (Automatic partitioning                  (Kdump is enabled)</span><br><span class="line">       selected)</span><br><span class="line">7) [ ] Network configuration             8) [!] Root password</span><br><span class="line">       (Not connected)                          (Root account is disabled.)</span><br><span class="line">9) [!] User creation</span><br><span class="line">       (No user will be created)</span><br><span class="line"></span><br><span class="line">Please make a selection from the above [&#x27;b&#x27; to begin installation, &#x27;q&#x27; to quit,</span><br><span class="line">&#x27;r&#x27; to refresh]: 5</span><br><span class="line">Probing storage...</span><br><span class="line">================================================================================</span><br><span class="line">================================================================================</span><br><span class="line">Installation Destination</span><br><span class="line"></span><br><span class="line">1) [x] QEMU HARDDISK: 60 GiB (sda)</span><br><span class="line"></span><br><span class="line">1 disk selected; 60 GiB capacity; 60 GiB free</span><br><span class="line"></span><br><span class="line">Please make a selection from the above [&#x27;c&#x27; to continue, &#x27;q&#x27; to quit, &#x27;r&#x27; to</span><br><span class="line">refresh]: c</span><br><span class="line">================================================================================</span><br><span class="line">================================================================================</span><br><span class="line">Partitioning Options</span><br><span class="line"></span><br><span class="line">1) [ ] Replace Existing Linux system(s)</span><br><span class="line">2) [x] Use All Space</span><br><span class="line">3) [ ] Use Free Space</span><br><span class="line">4) [ ] Manually assign mount points</span><br><span class="line"></span><br><span class="line">Installation requires partitioning of your hard drive. Select what space to use</span><br><span class="line">for the install target or manually assign mount points.</span><br><span class="line"></span><br><span class="line">Please make a selection from the above [&#x27;c&#x27; to continue, &#x27;q&#x27; to quit, &#x27;r&#x27; to</span><br><span class="line">refresh]: c</span><br><span class="line">================================================================================</span><br><span class="line">================================================================================</span><br><span class="line">Partition Scheme Options</span><br><span class="line"></span><br><span class="line">1) [ ] Standard Partition # 標準分割槽</span><br><span class="line">2) [x] LVM # 邏輯卷管理</span><br><span class="line">3) [ ] LVM Thin Provisioning # LVM 精簡卷</span><br><span class="line"></span><br><span class="line">Select a partition scheme configuration.</span><br><span class="line"></span><br><span class="line">Please make a selection from the above [&#x27;c&#x27; to continue, &#x27;q&#x27; to quit, &#x27;r&#x27; to</span><br><span class="line">refresh]:</span><br></pre></td></tr></table></figure>
<h2 id="網路設定">網路設定</h2>
<p>就會重新開機進入登入視窗，使用剛剛設置的 root 登入。<br>
<img src="https://imgur.com/zH26gR0.png" alt=""></p>
<h3 id="設置網卡">設置網卡</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rockym ~]<span class="comment"># ip addr</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens2: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000</span><br><span class="line">    link/ether 52:54:00:aa:7c:2e brd ff:ff:ff:ff:ff:ff</span><br><span class="line">[root@rockym ~]<span class="comment"># vi /etc/sysconfig/network-scripts/ifcfg-ens2</span></span><br><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">NAME=ens2</span><br><span class="line">UUID=f835fd27-3163-4160-9b89-387189ac11d7</span><br><span class="line">DEVICE=ens2</span><br><span class="line">ONBOOT=yes</span><br><span class="line">IPADDR=10.1.5.143</span><br><span class="line">PREFIX=24</span><br><span class="line">GATEWAY=10.1.5.254</span><br><span class="line">DNS1=10.1.1.3</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line"><span class="string">&quot;/etc/sysconfig/network-scripts/ifcfg-ens2&quot;</span> 18L, 307C written</span><br><span class="line">[root@rockym ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<h3 id="重啟網路">重啟網路</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rockym ~]<span class="comment"># systemctl restart NetworkManager</span></span><br><span class="line">[root@rockym ~]<span class="comment"># ip addr</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens2: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000</span><br><span class="line">    link/ether 52:54:00:aa:7c:2e brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.1.5.143/24 brd 10.1.5.255 scope global noprefixroute ens2</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::5054:ff:feaa:7c2e/64 scope link noprefixroute</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">[root@rockym ~]<span class="comment"># ping www.google.com</span></span><br><span class="line">PING www.google.com (172.217.163.36) 56(84) bytes of data.</span><br><span class="line">64 bytes from tsa01s13-in-f4.1e100.net (172.217.163.36): icmp_seq=1 ttl=115 time=4.99 ms</span><br><span class="line">64 bytes from tsa01s13-in-f4.1e100.net (172.217.163.36): icmp_seq=2 ttl=115 time=27.5 ms</span><br><span class="line"></span><br><span class="line">--- www.google.com ping statistics ---</span><br><span class="line">2 packets transmitted, 2 received, 0% packet loss, time 1002ms</span><br><span class="line">rtt min/avg/max/mdev = 4.994/16.258/27.522/11.264 ms</span><br><span class="line">[root@rockym ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<h2 id="Reference">Reference</h2>
<ul>
<li><a href="https://docs.rockylinux.org/guides/installation/">https://docs.rockylinux.org/guides/installation/</a></li>
<li><a href="https://techviewleo.com/install-kvm-with-virtualization-manager-on-rocky-linux/">https://techviewleo.com/install-kvm-with-virtualization-manager-on-rocky-linux/</a></li>
</ul>
]]></content>
      <categories>
        <category>DevOps</category>
        <category>KVM</category>
      </categories>
      <tags>
        <tag>KVM</tag>
        <tag>Rocky</tag>
      </tags>
  </entry>
  <entry>
    <title>[KVM] guest can&#39;t access Internet</title>
    <url>/KVM-guest-can-t-access-internet/</url>
    <content><![CDATA[<h2 id="狀況">狀況</h2>
<p>在 CentOS 建立了幾台 KVM 虛擬機，但是在系統重啟後發現這幾台機器都無法連網了。只能與 host 互 ping，無法連網、無法 ping 同網段的其他主機、KVM guest 與 guest 間也不認得。</p>
<span id="more"></span>
<p>其中一個 VM 的網路設定： （CentOS 7.9）</p>
<ul>
<li>Host IP: 10.1.5.130</li>
<li>Guest IP: 10.1.5.141</li>
<li>Host Network: Bridge (br0)</li>
<li>Guest KVM Network Ineterface: eth0</li>
</ul>
<p>Ping results:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@host:~$ ping 10.1.5.141</span><br><span class="line">PING 10.0.10.13 (10.0.10.13) 56(84) bytes of data.</span><br><span class="line">64 bytes from 10.0.10.13: icmp_seq=1 ttl=64 time=0.207 ms</span><br><span class="line"></span><br><span class="line">root@host:~$ ping 1.1.1.1</span><br><span class="line">PING 1.1.1.1 (1.1.1.1) 56(84) bytes of data.</span><br><span class="line">64 bytes from 1.1.1.1: icmp_seq=1 ttl=58 time=119 ms</span><br><span class="line"></span><br><span class="line">root@guest:~$ ping 10.1.5.130</span><br><span class="line">PING 10.0.10.2 (10.0.10.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 10.0.10.2: icmp_seq=1 ttl=64 time=0.257 ms</span><br><span class="line"></span><br><span class="line">root@guest:~$ ping 1.1.1.1</span><br><span class="line">PING 1.1.1.1 (1.1.1.1) 56(84) bytes of data.</span><br><span class="line"></span><br><span class="line">--- 1.1.1.1 ping statistics ---</span><br><span class="line">9 packets transmitted, 0 received, 100% packet loss, time 7999ms</span><br></pre></td></tr></table></figure>
<p>查看雙方的網路設定皆無異常，重啟 server 或 kvm 的網卡皆無效。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@host ~]# ifconfig</span><br><span class="line">br0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 10.1.5.130  netmask 255.255.255.0  broadcast 10.1.5.255</span><br><span class="line">        inet6 fe80::3c9b:4cc9:bd11:8919  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 0c:c4:7a:b7:39:66  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 5179086  bytes 284472155 (271.2 MiB)</span><br><span class="line">        RX errors 0  dropped 79272  overruns 0  frame 0</span><br><span class="line">        TX packets 81432  bytes 13931170 (13.2 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">br-3138c45de2ae: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.18.0.1  netmask 255.255.0.0  broadcast 172.18.255.255</span><br><span class="line">        ether 02:42:c1:cf:65:cc  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">docker0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255</span><br><span class="line">        ether 02:42:fc:40:fa:e4  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">ens1f0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        ether 0c:c4:7a:b7:39:66  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 4745249  bytes 350711453 (334.4 MiB)</span><br><span class="line">        RX errors 0  dropped 39639  overruns 0  frame 0</span><br><span class="line">        TX packets 117171  bytes 12372319 (11.7 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 567  bytes 64847 (63.3 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 567  bytes 64847 (63.3 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">vnet1: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet6 fe80::fc54:ff:fe12:db6c  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether fe:54:00:12:db:6c  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 2674  bytes 254695 (248.7 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 94305  bytes 5469690 (5.2 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">[root@host ~]# nmcli con show</span><br><span class="line">NAME                 UUID                                  TYPE      DEVICE</span><br><span class="line">bridge-br0           a2d389db-dfb8-4fb4-b5e1-c98fa4f08f71  bridge    br0</span><br><span class="line">br-3138c45de2ae      3e78cb65-cc77-4a9f-b485-a672a2631b86  bridge    br-3138c45de2ae</span><br><span class="line">bridge-slave-ens1f0  de082284-5730-4648-8353-804805894e46  ethernet  ens1f0</span><br><span class="line">vnet1                bb2d992a-72f9-4b29-b4b6-0553f7a46772  tun       vnet1</span><br><span class="line"></span><br><span class="line">[root@host ~]# cat /etc/sysconfig/network-scripts/ifcfg-bridge-br0</span><br><span class="line">STP=yes</span><br><span class="line">BRIDGING_OPTS=priority=32768</span><br><span class="line">TYPE=Bridge</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=none</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=bridge-br0</span><br><span class="line">UUID=a2d389db-dfb8-4fb4-b5e1-c98fa4f08f71</span><br><span class="line">DEVICE=br0</span><br><span class="line">ONBOOT=yes</span><br><span class="line">IPADDR=10.1.5.130</span><br><span class="line">PREFIX=24</span><br><span class="line">GATEWAY=10.1.5.254</span><br><span class="line">DNS1=10.1.1.3</span><br><span class="line"></span><br><span class="line">#########################################</span><br><span class="line"></span><br><span class="line">[root@guest ~]# ifconfig</span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 10.1.5.141  netmask 255.255.255.0  broadcast 10.1.5.255</span><br><span class="line">        inet6 fe80::432b:25e4:8f2:328  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 52:54:00:12:db:6c  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 786  bytes 76712 (74.9 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 167  bytes 16793 (16.3 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 32  bytes 2592 (2.5 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 32  bytes 2592 (2.5 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@guest ~]# cat /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line">TYPE=&quot;Ethernet&quot;</span><br><span class="line">PROXY_METHOD=&quot;none&quot;</span><br><span class="line">BROWSER_ONLY=&quot;no&quot;</span><br><span class="line">BOOTPROTO=&quot;static&quot;</span><br><span class="line">DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6INIT=&quot;yes&quot;</span><br><span class="line">IPV6_AUTOCONF=&quot;yes&quot;</span><br><span class="line">IPV6_DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV6_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span><br><span class="line">HWADDR=&quot;52:54:00:12:db:6c&quot;</span><br><span class="line">NAME=&quot;eth0&quot;</span><br><span class="line">UUID=&quot;c43aa0f0-7327-4807-975b-9e1dc5e46332&quot;</span><br><span class="line">DEVICE=&quot;eth0&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br><span class="line">IPADDR=&quot;10.1.5.141&quot;</span><br><span class="line">PREFIX=&quot;24&quot;</span><br><span class="line">GATEWAY=&quot;10.1.5.254&quot;</span><br><span class="line">DNS1=&quot;10.1.1.3&quot;</span><br></pre></td></tr></table></figure>
<h2 id="原因-解決方法">原因 &amp; 解決方法</h2>
<p>The problem is that <strong>Docker (which is installed on host machine) changes the default policy for the FORWARD chain in iptables to DROP.</strong> 😑</p>
<p>To fix the issue, a rule to allow traffic has to be added. Running this command added the required rule:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># from host</span></span><br><span class="line">iptables -I FORWARD -i br0 -o br0 -j ACCEPT</span><br></pre></td></tr></table></figure>
<h2 id="Reference">Reference</h2>
<ul>
<li><a href="https://askubuntu.com/questions/1134115/kvm-guest-cant-access-internet">https://askubuntu.com/questions/1134115/kvm-guest-cant-access-internet</a></li>
<li><a href="https://www.reddit.com/r/linuxadmin/comments/bdy6sz/kvm_guest_cant_access_internet/">https://www.reddit.com/r/linuxadmin/comments/bdy6sz/kvm_guest_cant_access_internet/</a></li>
</ul>
]]></content>
      <categories>
        <category>DevOps</category>
        <category>KVM</category>
      </categories>
      <tags>
        <tag>KVM</tag>
      </tags>
  </entry>
  <entry>
    <title>[Kafka] 建立 Kafka Cluster</title>
    <url>/Kafka-Cluster/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd /opt</span><br><span class="line">$ wget &quot;http://ftp.tc.edu.tw/pub/Apache/kafka/2.4.1/kafka_2.12-2.4.1.tgz&quot;</span><br><span class="line">$ sudo tar zxvf kafka_2.12-2.4.1.tgz</span><br><span class="line">$ sudo mv kafka_2.12-2.4.1 kafka</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>建立儲存 log 的資料夾，並指定權限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo mkdir /var/lib/kafka</span><br><span class="line">$ sudo chown -R $(USER id -u):$(USER id -g) /opt/kafka</span><br><span class="line">$ sudo chown -R $(USER id -u):$(USER id -g) /var/lib/kafka</span><br></pre></td></tr></table></figure>
<p>編輯server.properties設定檔</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo vi /opt/kafka/config/server.properties</span><br></pre></td></tr></table></figure>
<p>修改以下參數</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#指定 cluster 中的 broker 的唯一 id</span><br><span class="line">broker.id=0 </span><br><span class="line"></span><br><span class="line">#指定監聽 ip &amp; 阜號</span><br><span class="line">listeners=INSIDE://[private ip]:9092,OUTSIDE://[private ip]:9094</span><br><span class="line">advertised.listeners= INSIDE://[private ip],OUTSIDE://[public ip]:9094</span><br><span class="line">listener.security.protocol.map= INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT</span><br><span class="line">inter.broker.listener.name= INSIDE</span><br><span class="line"></span><br><span class="line">#指定存放log的路徑</span><br><span class="line">log.dirs=/var/lib/kafka</span><br><span class="line"></span><br><span class="line">#指定預設的分區數</span><br><span class="line">num.partitions=3 </span><br><span class="line"></span><br><span class="line">#允許使用者刪除 topic</span><br><span class="line">delete.topic.enable = true</span><br><span class="line"></span><br><span class="line">#加入zookeeper 的位置</span><br><span class="line">zookeeper.connect=10.0.0.4:2181,10.0.0.5:2181,10.0.0.6:2181</span><br></pre></td></tr></table></figure>
<p>將KAFKA設為服務</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo vi /etc/systemd/system/kafka.service</span><br></pre></td></tr></table></figure>
<p>加入以下文字</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Requires=zookeeper.service</span><br><span class="line">After=zookeeper.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=root</span><br><span class="line">ExecStart=/bin/sh -c &quot;/opt/kafka/bin/kafka-server-start.sh /opt/kafka/config/server.properties &gt; /opt/kafka/kafka.log 2&gt;&amp;1&quot;</span><br><span class="line">ExecStop=/opt/kafka/bin/kafka-server-stop.sh</span><br><span class="line">Restart=on-abnormal</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<p>啟動 kafka</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl start kafka</span><br><span class="line">$ sudo systemctl enable kafka</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Big Data</category>
        <category>Kafka</category>
      </categories>
      <tags>
        <tag>BigData</tag>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>[KVM] virt-install 建立 CentOS 虛擬機</title>
    <url>/KVM-virt-install-CentOS/</url>
    <content><![CDATA[<h3 id="安裝-KVM-套件">安裝 KVM 套件</h3>
<p>檢查 CPU 是否支援虛擬化</p>
<span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lscpu | grep -i virtualization</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/KH80Y69.png" alt=""><br>
加入 qemu repo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y centos-release-qemu-ev</span><br></pre></td></tr></table></figure>
<p>安裝套件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y qemu-kvm-ev libvirt libvirt-python libguestfs-tools virt-install</span><br></pre></td></tr></table></figure>
<p>確認 kvm module 有正常載入，如果執行結果有 kvm_xxx(CPU系列）則說明 kvm 服務已經啟動</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsmod | grep kvm</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/BNCFa7v.png" alt=""></p>
<p>如果未啟動，可通過如下命令啟動</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start libvirtd</span><br></pre></td></tr></table></figure>
<p>將服務設為開機啟用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> libvirtd</span><br><span class="line">systemctl is-enabled libvirtd</span><br></pre></td></tr></table></figure>
<h3 id="配置-KVM-網絡橋接功能">配置 KVM 網絡橋接功能</h3>
<p>產生虛擬橋接器，並將實體網卡納入該 bridge 之下，使得將來 VM 可以使用 bridge 模式，具有獨立對外 IP。<br>
<img src="https://imgur.com/x72LCiP.png" alt=""></p>
<p>本機網路設定</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmcli con add <span class="built_in">type</span> bridge ifname br0</span><br><span class="line">nmcli connection show</span><br><span class="line"></span><br><span class="line"><span class="comment"># 10.1.5.1 為實體網卡個網路位置</span></span><br><span class="line">nmcli con modify bridge-br0 ipv4.method manual ipv4.address <span class="string">&quot;10.1.5.1/24&quot;</span> ipv4.gateway <span class="string">&quot;10.1.5.254&quot;</span> ipv4.dns <span class="string">&quot;10.1.1.3&quot;</span> autoconnect yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把原先使用的網卡 ens1f0 加在 bridge 裡</span></span><br><span class="line">nmcli con add <span class="built_in">type</span> bridge-slave ifname ens1f0 master bridge-br0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 啟用 bridge</span></span><br><span class="line">nmcli connection up bridge-br0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重啟網路</span></span><br><span class="line">systemctl restart network</span><br><span class="line">nmcli connection show</span><br></pre></td></tr></table></figure>
<p>KVM 網路設定</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 其中 uuid 的欄位可用 uuidgen 產生</span></span><br><span class="line">cat &lt;&lt; <span class="string">EOF &gt; br0.xml</span></span><br><span class="line"><span class="string">&lt;network&gt;</span></span><br><span class="line"><span class="string">  &lt;name&gt;br0&lt;/name&gt;</span></span><br><span class="line"><span class="string">  &lt;uuid&gt;f9eae5e5-6bdd-4c72-bd10-6b97b6452126&lt;/uuid&gt;</span></span><br><span class="line"><span class="string">  &lt;bridge name=&quot;br0&quot;/&gt;</span></span><br><span class="line"><span class="string">  &lt;forward mode=&#x27;bridge&#x27;/&gt;</span></span><br><span class="line"><span class="string">&lt;/network&gt;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增網卡並啟用</span></span><br><span class="line">virsh net-define br0.xml</span><br><span class="line">virsh net-start br0</span><br><span class="line">virsh net-autostart br0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 將原先的 default 網卡刪掉</span></span><br><span class="line">virsh net-undefine default</span><br><span class="line">virsh net-destroy default</span><br><span class="line">virsh net-list --all</span><br></pre></td></tr></table></figure>
<h3 id="開始創建-從-iso-建立">開始創建 (從 iso 建立)</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ virt-install --name centos7.9 \</span><br><span class="line">--disk path=/var/lib/libvirt/images/centos7.9,size=90,format=qcow2 \</span><br><span class="line">--vcpus 4 --memory 4096 --network bridge=br0 \</span><br><span class="line">--graphics none --os-type linux --os-variant centos7.0 \</span><br><span class="line">--location /var/lib/libvirt/images/CentOS-7-x86_64-Minimal-2009.iso \</span><br><span class="line">--extra-args <span class="string">&#x27;console=ttyS0&#x27;</span></span><br></pre></td></tr></table></figure>
<p>參數說明</p>
<ul>
<li>
<p><code>--disk</code> 指定該虛擬機使用的存儲，有多種介質可選。比如指定本地文件可以使用 path 選項，如果指定文件不存在還需要設置 size 參數。如果不配置磁盤可以使用 <code>--disk none</code></p>
</li>
<li>
<p><code>--graphics</code> 可選項，指定guest圖像顯示配置，如果不需要圖像顯示，可以使用 <code>--graphics none</code></p>
</li>
<li>
<p><code>--console</code> 可選項，virt-install 會默認配置合適的 console，可以不填。</p>
</li>
<li>
<p><code>--os-type</code> 是指定作業系統類型（可為 <code>linux</code> 或 <code>windows</code>）</p>
</li>
<li>
<p><code>--os-variant</code> 可選項，指定guest操作系統，用於優化配置。可用的選項可以使用 <code>osinfo-query</code> 指令查詢</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">osinfo-query os | grep CentOS</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>安裝源參數</p>
<ul>
<li><code>--location</code> 指定新創建虛擬機的安裝介質。使用該參數指定安裝介質時，默認是看不到guest安裝過程中的輸出文本的，需要另外配置參數<code>--extra-args 'console=ttyS0'</code></li>
<li><code>--import</code> 指定新創建虛擬機跳過安裝階段，使用第一個 <code>--disk</code></li>
</ul>
</li>
<li>
<p><code>--network</code> 網路</p>
<p>指定虛擬機連接的網絡配置，常用的兩種：</p>
<ul>
<li><code>bridge=BRIDGE</code><br>
指定連接到host上名為BRIDGE的虛擬網橋上。</li>
<li><code>network=NAME</code><br>
指定連接到virsh管控的名為NAME的network上。</li>
</ul>
</li>
</ul>
<p>下完 virt-install 後就會跳出 CentOS 的命令列安裝配置畫面，有 <code>[!]</code> 基本都是要配置，按照順序往下配置，按對應的數字以進行設定。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Installation</span><br><span class="line"></span><br><span class="line"> 1) [x] Language settings                 2) [!] Timezone settings</span><br><span class="line">        (English (United States))                (Timezone is not set.)</span><br><span class="line"> 3) [!] Installation source               4) [!] Software selection</span><br><span class="line">        (Processing...)                          (Processing...)</span><br><span class="line"> 5) [!] Installation Destination          6) [x] Kdump</span><br><span class="line">        (No disks selected)                      (Kdump is enabled)</span><br><span class="line"> 7) [ ] Network configuration             8) [!] Root password</span><br><span class="line">        (Not connected)                          (Password is not set.)</span><br><span class="line"> 9) [!] User creation</span><br><span class="line">        (No user will be created)</span><br><span class="line">  Please make your choice from above [&#x27;q&#x27; to quit | &#x27;b&#x27; to begin installation |</span><br><span class="line">  &#x27;r&#x27; to refresh]:</span><br></pre></td></tr></table></figure>
<ul>
<li>3 的安裝源請選擇 <code>2) local ISO file</code></li>
<li>5 Installation Destination 選擇安裝目的地並選擇 <code>2) Use All Space 使用所有空間</code>；最後分割方案選擇 <code>3) LVM 邏輯卷管理</code></li>
</ul>
<h3 id="開始創建-從已存在的-qcow2-image-建立">開始創建 (從已存在的 qcow2 image 建立)</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">virt-install --name centos \</span><br><span class="line">--vcpus 4 --memory 4096 \</span><br><span class="line">--disk /var/lib/libvirt/images/centos \</span><br><span class="line">--network bridge=br0 --boot hd</span><br></pre></td></tr></table></figure>
<h3 id="完成安裝後進入-VM-設置網路">完成安裝後進入 VM 設置網路</h3>
<p>通過 virsh console &lt;虛擬機器名稱&gt; 命令來連線虛擬機器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 檢視虛擬機器</span><br><span class="line">$ virsh list              # 檢視在執行的虛擬機器</span><br><span class="line">$ virsh list --all         # 檢視所有虛擬機器</span><br><span class="line"></span><br><span class="line"> Id    Name                           State</span><br><span class="line">----------------------------------------------------</span><br><span class="line"> 7     centos7.9                       running</span><br></pre></td></tr></table></figure>
<p>連線虛擬機器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ virsh console centos7.9</span><br></pre></td></tr></table></figure>
<p>配置虛擬機器網路，編輯 <code>vi /etc/sysconfig/network-scripts/ifcfg-eth0</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TYPE=Ethernet</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">PEERDNS=yes</span><br><span class="line">PEERROUTES=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_PEERDNS=yes</span><br><span class="line">IPV6_PEERROUTES=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">NAME=eth0</span><br><span class="line">UUID=adfa3b7d-bf60-47e6-8482-871dee686fb5</span><br><span class="line">DEVICE=eth0</span><br><span class="line">ONBOOT=yes</span><br><span class="line">IPADDR=10.1.5.1</span><br><span class="line">PREFIX=24</span><br><span class="line">GATEWAY=10.1.5.254</span><br><span class="line">DNS1=10.1.1.3</span><br></pre></td></tr></table></figure>
<p>重啟網路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ systemctl restart network</span><br></pre></td></tr></table></figure>
<h3 id="虛擬機的其他管理命令">虛擬機的其他管理命令</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">virsh start centos7.9     # 虛擬機器開啟（啟動）：</span><br><span class="line">virsh reboot centos7.9    # 虛擬機器重新啟動</span><br><span class="line">virsh shutdown centos7.9  # 虛擬機器關機</span><br><span class="line">virsh destroy centos7.9   # 強制關機（強制斷電）</span><br><span class="line">virsh suspend centos7.9   # 暫停（掛起）KVM 虛擬機器</span><br><span class="line">virsh resume centos7.9    # 恢復被掛起的 KVM 虛擬機器</span><br><span class="line">virsh undefine centos7.9  # 該方法只刪除配置檔案，磁碟檔案未刪除</span><br><span class="line">virsh autostart centos7.9 # 隨物理機啟動而啟動（開機啟動）</span><br><span class="line">virsh autostart --disable centos7.9 # 取消標記為自動開始（取消開機啟動）</span><br></pre></td></tr></table></figure>
<h3 id="clone-VM">clone VM</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@ula ~]# virt-clone --connect qemu:///system -o rocky --name rocky2 -f /var/lib/libvirt/images/rocky2.qcow2</span><br><span class="line">Allocating &#x27;rocky2.qcow2&#x27;</span><br><span class="line"></span><br><span class="line">Clone &#x27;rocky2&#x27; created successfully.</span><br><span class="line">[root@ula ~]#</span><br></pre></td></tr></table></figure>
<ul>
<li><code>--connect=URI</code>：連接到虛擬機管理程序libvirt 的 URI</li>
<li><code>-o ORIGINAL_GUEST</code> / <code>--original=ORIGINAL_GUEST</code>：原虛擬機名稱，原 VM 必須處於關機狀態</li>
<li><code>-n NEW_NAME</code> / <code>--name=NEW_NAME</code>：新的虛擬機名稱</li>
<li><code>--auto-clone</code>：從原來的虛擬機配置自動生成克隆名稱和存儲路徑。例如，原虛擬機名為VM01，那克隆的虛擬機名為 VM01-clone；原虛擬機的磁盤路徑為 /usr/src/VM01.img，克隆後的虛擬機磁盤路徑為 /usr/src/VM01-clone.img</li>
<li><code>-f NEW_DISKFILE</code> / <code>--file=NEW_DISKFILE</code>：指定新的虛擬機磁盤文件</li>
</ul>
<h6 id="Reference">Reference</h6>
<ul>
<li>關於更多 kvm 網路模式可以參考這篇分享 <a href="https://www.samyang.top/2018/12/kvm/">https://www.samyang.top/2018/12/kvm/</a></li>
<li><a href="https://www.itread01.com/content/1545319657.html">https://www.itread01.com/content/1545319657.html</a></li>
</ul>
]]></content>
      <categories>
        <category>DevOps</category>
        <category>KVM</category>
      </categories>
      <tags>
        <tag>KVM</tag>
      </tags>
  </entry>
  <entry>
    <title>[Kafka] server - client &amp; client - server SSL 加密</title>
    <url>/Kafka-SSL-Encryption/</url>
    <content><![CDATA[<p>Kafka 目前支持 SSL、SASL/Kerberos、SASL/PLAIN 三種認證機制，這篇文章將紀錄如何在 Kafka broker 與 clinet 端建立 TLS/SSL 連線。</p>
<span id="more"></span>
<p>另外關於 SASL 連線機制，可以參考 <a href="https://kafka.apache.org/25/documentation.html#security_sasl">官網文件</a> 或是 <a href="https://www.orchome.com/553">中文版文件</a>。</p>
<p>步驟如下：</p>
<h2 id="生成密鑰-證書-CA">生成密鑰/ 證書/ CA</h2>
<h3 id="在各個實例中生成-keystore">在各個實例中生成 keystore</h3>
<p>需要在集群中的每台機器上單獨生成，keystore 包含了兩個東西：</p>
<ul>
<li>含有公鑰(Public Key)/私鑰(Private Key) 的 Key pair</li>
<li>只包含公鑰的未簽名證書(Unsigned Certificate)</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ keytool -keystore broker1.keystore.jks \</span><br><span class="line">  -alias broker1 -validity 3650 -genkey -keyalg RSA</span><br></pre></td></tr></table></figure>
<p>產生過程中需輸入 keystore 的密碼以及證書的 Distinguished Name (DName)。其中最重要的是 <code>Common Name(CN)</code>，需為機器的 hostname；如果主機綁定了域名，則輸入完整包含域名的 FQDN。<br>
<img src="https://imgur.com/Y4sFl2r.png" alt=""></p>
<p>在其他 broker 以及 clinet 端重複以上動作。</p>
<div class="info">
<p>證書相當於一個 ID，來表明自己是誰（區分不同的服務器）。此時，這個證書還沒有被任何 CA（Certificate Authority，證書頒發機構）所認證（進行簽名）。證書可以通過下面兩種方式簽名：</p>
<ul>
<li>先自己生成一個證書，再讓 CA 簽名。(此篇將採用的方法)</li>
<li>直接從 CA 申請一個。</li>
</ul>
</div>
<hr>
<h3 id="在任一台機器中產生-CA">在任一台機器中產生 CA</h3>
<p>通常情況下，證書是要向 CA 申請的，但是如果參與者僅是自家客戶端，而非面向網際網路上的客戶端（例如瀏覽器），那麼可以自己生成一個 CA，然後讓這個 CA 去簽署其他證書。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ openssl req -new -x509 -keyout ca-key -out ca-cert -days 3650</span><br></pre></td></tr></table></figure>
<p>產生過程中需輸入 PEM 密碼，以及證書相關資訊。而後會產生 CA 密鑰 <code>ca-key</code> 以及公鑰 <code>ca-cert</code>。<br>
<img src="https://imgur.com/2ksa435.png" alt=""></p>
<h3 id="生成-truststore">生成 truststore</h3>
<p>truststore 包含了所有可以信賴的 CA。以下面腳本創建 truststore，並將上一步驟生成的 ca-cert 匯入。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">keytool -keystore ca.truststore.jks -alias CARoot -import -file ca-cert</span><br></pre></td></tr></table></figure>
<p>並將這一個 truststore 傳送到叢集的所有機器中以確保：</p>
<div class="warning">
<p>當 client 與 broker 溝通時，client 只要檢查 broker 端的證書，確認該證書是由自己擁有的 truststore 中的 CA 頒發的，就認為此 broker 是可信的。<br>
同理，當 broker 與 client 交互時，broker 只要檢查 client 端證書，確認該證書是由自己所有的 truststore 中的 CA 頒發的，就認為客戶端是可信的。</p>
</div>
<div class="info">
<p>如果用不同的 CA 簽署證書，那麼就要將對象端的證書，或者該 CA，加入到本地端的 truststore 中。<br>
這裡有一個信任鏈的關係：可以信任某一個實例的證書；也可以信任證書的頒發機構，即 CA，當信任 CA 時，就會信任所有由該 CA 頒發的證書。<br>
<strong>因此，在內部使用的叢集中，所有的伺服器只要信任同一個 CA，使用同一個truststore 就可以了（那麼所有持有由該 CA 簽名的證書的服務器就都是可信的了）。</strong></p>
</div>
<p><font color=carol>將 CA 以及 ca.truststore.jks 複製到其他 broker 以及 clinet 端，使其共用同一把 CA。</font></p>
<hr>
<h3 id="將各伺服器的證書導出並使用-CA-簽名">將各伺服器的證書導出並使用 CA 簽名</h3>
<p>從第一步驟的 keystore 中導出未簽名的證書</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">keytool -keystore broker1.keystore.jks -alias broker1 -certreq -file cert-broker1</span><br></pre></td></tr></table></figure>
<p>使用 CA 對導出的 <code>cert-broker1</code> 進行簽名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl x509 -req -CA ca-cert -CAkey ca-key -in cert-broker1 -out cert-signed-broker1 -days 3650 -CAcreateserial -passin pass:&lt;PEM password&gt;</span><br></pre></td></tr></table></figure>
<p>將 CA 證書以及簽名好的 <code>cert-signed-broker1</code> 證書導回至 <code>keystore</code><br>
<strong>注意先後順序</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ keytool -keystore broker1.keystore.jks -alias CARoot -import -file ca-cert</span><br><span class="line">$ keytool -keystore broker1.keystore.jks -alias broker1 -import -file cert-signed-broker1</span><br></pre></td></tr></table></figure>
<p>在其他 broker 以及 clinet 端重複以上動作。</p>
<p>最後架構中的金鑰結構會長得像下面這樣<br>
<img src="https://imgur.com/gMdBG1h.png" alt=""></p>
<hr>
<h2 id="配置-broker-端">配置 broker 端</h2>
<h3 id="修改-Kafka-的配置檔-server-properties">修改 Kafka 的配置檔 <code>server.properties</code></h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">listeners=PLAINTEXT://0.0.0.0:9092,SSL://0.0.0.0:9093</span><br><span class="line">advertised.listeners=PLAINTEXT://broker1:9092,SSL://broker1:9093</span><br><span class="line"></span><br><span class="line"># SSL 配置</span><br><span class="line">ssl.keystore.location=/opt/ssl/broker1.keystore.jks</span><br><span class="line">ssl.keystore.password=000000</span><br><span class="line">ssl.key.password=000000</span><br><span class="line">ssl.truststore.location=/opt/ssl/ca.truststore.jks</span><br><span class="line">ssl.truststore.password=000000</span><br><span class="line">ssl.keystore.type=JKS</span><br><span class="line">ssl.truststore.type=JKS</span><br><span class="line">ssl.client.auth=required</span><br><span class="line">ssl.secure.random.implementation=SHA1PRNG</span><br><span class="line">ssl.endpoint.identification.algorithm=</span><br></pre></td></tr></table></figure>
<ul>
<li>ssl.client.auth： <code>required</code> 這個選項則要求客戶端也必須持有經過 CA 簽名的證書； <code>requested</code> 要求進行客戶端身份認證但沒有證書的客戶端也可以連接；<code>none</code> 默認值，指服務端不須驗證客戶端。</li>
<li>ssl.secure.random.implementation：用來指定資料加密方法。<br>
JRE/JDK有默認的偽隨機數生成器（PRNG）用於加密操作，因此不需要使用 ssl.secure.random.implementation 來配置具體的實現方法。但是，某些實現方法是有性能問題的（特別是Linux系統上的默認選項：NativePRNG, 利用的是一個全局鎖），為以防 SSL 連接性能成為問題，請考慮明確設置使用的實現方法。 SHA1PRNG 方式的實現是非阻塞的，在高負載的情況下也能有很好的性能表現（單broker 在有副本的情況下達 50MB 每秒的生產消息）。</li>
<li>ssl.endpoint.identification.algorithm：kafka 2.0 開始的默認值是 https，即需要驗證主機名。如果不需要驗證主機名，那麼可以這麼設置 等於空即可。</li>
</ul>
<p>**另外還有一個選項 <code>security.inter.broker.protocol</code> 這邊沒有配置，如果要指定 broker 間也要使用 SSL，則將值設為 <code>SSL</code>（默認為　PLAINTEXT）。**因為集群內的所有 broker 都位於內網，所以這個例子沒有特別開啟，這也是上面為什麼 listeners 要同時配置 PLAINTEXT 和 SSL 的原因。</p>
<h3 id="啟動-Kafka-並測試連線">啟動 Kafka 並測試連線</h3>
<p>運行服務端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin/kafka-server-start.sh -daemon config/server.properties </span><br></pre></td></tr></table></figure>
<p>再通過下面的命令來驗證 SSL 連接是否運行正常</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl s_client -debug -connect localhost:9093 -tls1</span><br></pre></td></tr></table></figure>
<p>成功的話可以看到以下訊息<br>
<img src="https://imgur.com/FNmDaCa.png" alt=""></p>
<hr>
<h2 id="配置-client-端">配置 client 端</h2>
<p>新增 <code>client-ssl.properties</code> 檔案，並設置以下參數：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">security.protocol=SSL</span><br><span class="line">ssl.keystore.location=/opt/ssl/client1.keystore.jks</span><br><span class="line">ssl.keystore.password=000000</span><br><span class="line">ssl.truststore.location=/opt/ssl/ca.truststore.jks</span><br><span class="line">ssl.truststore.password=000000</span><br><span class="line">ssl.key.password=000000</span><br><span class="line">ssl.endpoint.identification.algorithm=</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="測試連線">測試連線</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin/kafka-console-producer --bootstrap-server broker1:9093 --topic test --producer.config client-ssl.properties</span><br><span class="line">bin/kafka-console-consumer --bootstrap-server broker1:9093 --topic test --consumer.config client-ssl.properties --from-beginning</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/rZR6yHh.png" alt=""></p>
<hr>
<h6 id="Reference">Reference</h6>
<ul>
<li><a href="https://kafka.apache.org/25/documentation.html#security">https://kafka.apache.org/25/documentation.html#security</a></li>
<li><a href="https://www.denglin.me/kafka-security-1/">https://www.denglin.me/kafka-security-1/</a></li>
<li><a href="http://www.tracefact.net/tech/108.html">http://www.tracefact.net/tech/108.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Big Data</category>
        <category>Kafka</category>
      </categories>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>[Kafka] 新增 broker 節點並平衡 topic</title>
    <url>/Kafka-topic-rebalancing/</url>
    <content><![CDATA[<p>在 Kafka 集群中增加 broker 非常方便，只需為其分配唯一的 broker ID，指定集群使用的 zookeeper connect 位址，然後在新服務器上啟動 Kafka。但是，<strong>舊有的 Topic 不會將 Partition 均勻分配到新的節點上，進而造成數據不平衡。</strong> 因此需要將一些現有數據遷移到這些新機器上進行 rebalancing。</p>
<p>Kafka 提供了 <code>kafka-reassign-partitions.sh</code> 工具來進行手動平均分配：</p>
<span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">This tool helps to moves topic partitions between replicas.</span><br><span class="line">Option                                  Description</span><br><span class="line">------                                  -----------</span><br><span class="line">--bootstrap-server &lt;String: Server(s)   the server(s) to use for</span><br><span class="line">  to use for bootstrapping&gt;               bootstrapping. REQUIRED if an</span><br><span class="line">                                          absolute path of the log directory</span><br><span class="line">                                          is specified for any replica in the</span><br><span class="line">                                          reassignment json file</span><br><span class="line">--broker-list &lt;String: brokerlist&gt;      The list of brokers to which the</span><br><span class="line">                                          partitions need to be reassigned in</span><br><span class="line">                                          the form &quot;0,1,2&quot;. This is required</span><br><span class="line">                                          if --topics-to-move-json-file is</span><br><span class="line">                                          used to generate reassignment</span><br><span class="line">                                          configuration</span><br><span class="line">--command-config &lt;String: Admin client  Property file containing configs to be</span><br><span class="line">  property file&gt;                          passed to Admin Client.</span><br><span class="line">--disable-rack-aware                    Disable rack aware replica assignment</span><br><span class="line">--execute                               Kick off the reassignment as specified</span><br><span class="line">                                          by the --reassignment-json-file</span><br><span class="line">                                          option.</span><br><span class="line">--generate                              Generate a candidate partition</span><br><span class="line">                                          reassignment configuration. Note</span><br><span class="line">                                          that this only generates a candidate</span><br><span class="line">                                          assignment, it does not execute it.</span><br><span class="line">--help                                  Print usage information.</span><br><span class="line">--reassignment-json-file &lt;String:       The JSON file with the partition</span><br><span class="line">  manual assignment json file path&gt;       reassignment configurationThe format</span><br><span class="line">                                          to use is -</span><br><span class="line">                                        &#123;&quot;partitions&quot;:</span><br><span class="line">                                                [&#123;&quot;topic&quot;: &quot;foo&quot;,</span><br><span class="line">                                                  &quot;partition&quot;: 1,</span><br><span class="line">                                                  &quot;replicas&quot;: [1,2,3],</span><br><span class="line">                                                  &quot;log_dirs&quot;: [&quot;dir1&quot;,&quot;dir2&quot;,&quot;dir3&quot;]</span><br><span class="line">                                          &#125;],</span><br><span class="line">                                        &quot;version&quot;:1</span><br><span class="line">                                        &#125;</span><br><span class="line">                                        Note that &quot;log_dirs&quot; is optional. When</span><br><span class="line">                                          it is specified, its length must</span><br><span class="line">                                          equal the length of the replicas</span><br><span class="line">                                          list. The value in this list can be</span><br><span class="line">                                          either &quot;any&quot; or the absolution path</span><br><span class="line">                                          of the log directory on the broker.</span><br><span class="line">                                          If absolute log directory path is</span><br><span class="line">                                          specified, the replica will be moved</span><br><span class="line">                                          to the specified log directory on</span><br><span class="line">                                          the broker.</span><br><span class="line">--replica-alter-log-dirs-throttle       The movement of replicas between log</span><br><span class="line">  &lt;Long: replicaAlterLogDirsThrottle&gt;     directories on the same broker will</span><br><span class="line">                                          be throttled to this value</span><br><span class="line">                                          (bytes/sec). Rerunning with this</span><br><span class="line">                                          option, whilst a rebalance is in</span><br><span class="line">                                          progress, will alter the throttle</span><br><span class="line">                                          value. The throttle rate should be</span><br><span class="line">                                          at least 1 KB/s. (default: -1)</span><br><span class="line">--throttle &lt;Long: throttle&gt;             The movement of partitions between</span><br><span class="line">                                          brokers will be throttled to this</span><br><span class="line">                                          value (bytes/sec). Rerunning with</span><br><span class="line">                                          this option, whilst a rebalance is</span><br><span class="line">                                          in progress, will alter the throttle</span><br><span class="line">                                          value. The throttle rate should be</span><br><span class="line">                                          at least 1 KB/s. (default: -1)</span><br><span class="line">--timeout &lt;Long: timeout&gt;               The maximum time in ms allowed to wait</span><br><span class="line">                                          for partition reassignment execution</span><br><span class="line">                                          to be successfully initiated</span><br><span class="line">                                          (default: 10000)</span><br><span class="line">--topics-to-move-json-file &lt;String:     Generate a reassignment configuration</span><br><span class="line">  topics to reassign json file path&gt;      to move the partitions of the</span><br><span class="line">                                          specified topics to the list of</span><br><span class="line">                                          brokers specified by the --broker-</span><br><span class="line">                                          list option. The format to use is -</span><br><span class="line">                                        &#123;&quot;topics&quot;:</span><br><span class="line">                                                [&#123;&quot;topic&quot;: &quot;foo&quot;&#125;,&#123;&quot;topic&quot;: &quot;foo1&quot;&#125;],</span><br><span class="line">                                        &quot;version&quot;:1</span><br><span class="line">                                        &#125;</span><br><span class="line">--verify                                Verify if the reassignment completed</span><br><span class="line">                                          as specified by the --reassignment-</span><br><span class="line">                                          json-file option. If there is a</span><br><span class="line">                                          throttle engaged for the replicas</span><br><span class="line">                                          specified, and the rebalance has</span><br><span class="line">                                          completed, the throttle will be</span><br><span class="line">                                          removed</span><br><span class="line">--version                               Display Kafka version.</span><br><span class="line">--zookeeper &lt;String: urls&gt;              REQUIRED: The connection string for</span><br><span class="line">                                          the zookeeper connection in the form</span><br><span class="line">                                          host:port. Multiple URLS can be</span><br><span class="line">                                          given to allow fail-over.</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="新增-kafka-broker-到-cluster-中">新增 kafka broker 到 cluster 中</h2>
<p>首先先到集群的 zookeeper 中開啟 zkCli 查看目前集群下有的 kafka broker<br>
<img src="https://imgur.com/FkFrL6U.png" alt=""><br>
準備一台新的節點，其中配置檔的 <code>id</code> 要寫不同於群集現有的 id，<code>zookeeper.connect</code> 填寫群集使用的 zookeeper。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">broker.id=3</span><br><span class="line">zookeeper.connect=10.1.5.31:2181,10.1.5.32:2181,10.1.5.33:2181/kafka</span><br></pre></td></tr></table></figure>
<p>啟用節點<br>
<img src="https://imgur.com/7bkElf4.png" alt=""><br>
回到 zkCli 查看 kafka broker id，就可以發現節點已經被加入叢集了！<br>
<img src="https://imgur.com/njWtLVh.png" alt=""></p>
<hr>
<h2 id="partition-reassign">partition reassign</h2>
<p>原有的 topic <code>test</code> 有三個 replication 以及三個 partition，ISR 如下：<br>
<img src="https://imgur.com/TvoSa8i.png" alt=""><br>
在新增 broker 節點後，可以使用 <a href="http://kafka-reassign-partitions.sh">kafka-reassign-partitions.sh</a> 重新分配 partition 的分布。</p>
<h3 id="1-建立-topics-json-檔案">1. 建立 <code>topics.json</code> 檔案</h3>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;topics&quot;</span>: [</span><br><span class="line">    &#123;<span class="attr">&quot;topic&quot;</span>:<span class="string">&quot;test1&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">&quot;topic&quot;</span>:<span class="string">&quot;test2&quot;</span>&#125; </span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中 <code>topics</code>是一個 array，可以在其中放置多個 topics。 但是在生產環境中最好一個接一個地進行 reassign，這樣就不會因為一個 topic 重新平衡失敗而影響整個集群。</p>
<h3 id="2-生成分配計畫">2. 生成分配計畫</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd /opt/kafka</span><br><span class="line">$ bin/kafka-reassign-partitions.sh --zookeeper 10.1.5.31:2181,10.1.5.32:2181,10.1.5.33:2181/kafka --topics-to-move-json-file topic.json  --broker-list  &quot;0,1,2,3&quot;  --generate</span><br></pre></td></tr></table></figure>
<ul>
<li>–generate: 根據給與的 Topic 列表和 Broker 列表生成遷移計劃。 generate 並不會真正進行消息遷移，而是將消息遷移計劃計算出來，供 execute 命令使用。<br>
<img src="https://imgur.com/KHNRdTr.png" alt=""></li>
</ul>
<p><code>Current partition replica assignment</code> 表示當前的消息存儲狀況。 <code>Proposed partition reassignment configuration</code>表示遷移後的消息存儲狀況。</p>
<h3 id="3-執行重分配計畫">3. 執行重分配計畫</h3>
<p>將上面產出的遷移列表 <code>Proposed partition reassignment configuration</code> 存入文件 reassignment.json 中，供 --execute 命令使用。<br>
<img src="https://imgur.com/8ovsqWl.png" alt=""><br>
執行計畫</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ bin/kafka-reassign-partitions.sh --zookeeper 10.1.5.31:2181,10.1.5.32:2181,10.1.5.33:2181/kafka --reassignment-json-file reassignment.json --execute</span><br></pre></td></tr></table></figure>
<ul>
<li>–execute: 根據 topic 遷移計劃進行遷移。</li>
<li>–throttle 為了避免遷移過程中影響 kafka 正常使用，可以加入這個參數限制遷移的流量，單位是 byte。<br>
<img src="https://imgur.com/undefined.png" alt=""></li>
</ul>
<h2 id="4-驗證進度">4. 驗證進度</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ bin/kafka-reassign-partitions.sh --zookeeper 10.1.5.31:2181,10.1.5.32:2181,10.1.5.33:2181/kafka --reassignment-json-file reassignment.json --verify</span><br></pre></td></tr></table></figure>
<ul>
<li>–verify: 檢查消息是否已經遷移完成。<br>
<img src="https://imgur.com/n4zrCwN.png" alt=""></li>
</ul>
<h2 id="5-查看-topic-副本狀況">5. 查看 topic 副本狀況</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ bin/kafka-topics.sh --describe --bootstrap-server 10.1.5.31:9092 --topic test</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/5mY3pG8.png" alt=""></p>
<h2 id="preferred-replica-election">preferred replica election</h2>
<p>關於優先副本的選舉可以保持預設值讓節點間自動平衡，在 broker 啟動時，因預設 <code>auto.leader.rebalance.enable</code> 的默認值為 true，故當 broker 在故障轉移操作時會啟動一個定時任務，每隔 <code>$&#123;leader. imbalance.check.interval.seconds&#125;</code> 秒 (默認是5分鐘) 觸發一次分區分配均衡操作，而只有在代理的不均衡的百分比達到 <code>$&#123;leader.imbalance.per.broker.percentage&#125;</code> (default 10，即不均衡比例達到 10%) 以上時才會真正執行分區重新分配操作。</p>
]]></content>
      <categories>
        <category>Big Data</category>
        <category>Kafka</category>
      </categories>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>[Kubernetes] Change MetalLB IP Range</title>
    <url>/Kubernetes-Change-MetalLB-IP-Range/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># note the old IPs allocated to the services</span></span><br><span class="line">kubectl get svc</span><br><span class="line"></span><br><span class="line"><span class="comment"># edit config</span></span><br><span class="line">kubectl edit cm -n metallb-system config</span><br><span class="line"></span><br><span class="line"><span class="comment"># delete the metallb pods</span></span><br><span class="line">kubectl -n metallb-system delete pod --all</span><br><span class="line"></span><br><span class="line"><span class="comment"># watch the pods come back up</span></span><br><span class="line">kubectl -n metallb-system get pods -w</span><br><span class="line"></span><br><span class="line"><span class="comment"># inspect new IPs of services</span></span><br><span class="line">kubectl get svc</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>or</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt; <span class="string">EOF &gt; new_config.yaml</span></span><br><span class="line"><span class="string">apiVersion: v1</span></span><br><span class="line"><span class="string">kind: ConfigMap</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  namespace: metallb-system</span></span><br><span class="line"><span class="string">  name: config</span></span><br><span class="line"><span class="string">data:</span></span><br><span class="line"><span class="string">  config: |</span></span><br><span class="line"><span class="string">    address-pools:</span></span><br><span class="line"><span class="string">    - name: default</span></span><br><span class="line"><span class="string">      protocol: layer2</span></span><br><span class="line"><span class="string">      addresses:</span></span><br><span class="line"><span class="string">      - 10.0.0.10-10.0.0.19</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># delete the old configmap</span></span><br><span class="line">kubectl -n metallb-system delete cm config</span><br><span class="line"></span><br><span class="line"><span class="comment"># apply the new configmap</span></span><br><span class="line">kubectl apply -f new_config.yaml</span><br></pre></td></tr></table></figure>
<h4 id="why-we-need-to-delete-all-metallb-pod">why we need to delete all metallb pod</h4>
<p>MetalLB rejects new configurations if the new configuration would break existing services. Your new configuration does not allow existing services to continue existing, so MetalLB ignored it. There are log entries in the controller and speaker pods about this.</p>
<p>To force MetalLB to accept an unsafe configuration, delete all the controller and speaker pods. When they restart, they’ll accept the new configuration and change all your services.</p>
<p><code>kubectl delete po -n metallb-system --all</code></p>
<h6 id="Reference">Reference</h6>
<ul>
<li><a href="https://github.com/metallb/metallb/issues/308">https://github.com/metallb/metallb/issues/308</a></li>
<li><a href="https://github.com/metallb/metallb/issues/348">https://github.com/metallb/metallb/issues/348</a></li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>MetalLB</tag>
      </tags>
  </entry>
  <entry>
    <title>[Kafka] Kafka at a Glance</title>
    <url>/Kafka/</url>
    <content><![CDATA[<p>Kafka 是由 LinkedIn 開發而後釋出給 Apache 的一個開源 streaming message queue (消息佇列)，由Scala和Java編寫，目前是 Hadoop ecosystem 中的一員。</p>
<span id="more"></span>
<p><img src="https://imgur.com/03l9i3Y.png" alt=""></p>
<p>以下簡單列出 Kafka 幾點特色：</p>
<ul>
<li>基於<strong>發布與訂閱</strong> (Publish &amp; Subscribe)</li>
<li>架構中有三個角色，<code>broker</code>, <code>producer</code> 以及 <code>consumer</code></li>
<li>Broker 為訊息系統本身，負責接收並儲存資料</li>
<li>Producer 負責發布消息到 broker</li>
<li>Consumer 負責從 borker 訂閱消息</li>
<li>Producer 以及 Consumer 於 broker 來說是 client</li>
<li>多個 brokers 可以組成一個 cluser，叢集具有<strong>負載平衡</strong>以及<strong>方便擴展</strong>而不會影響運作的特性</li>
</ul>
<p><img src="https://imgur.com/j6HnRWD.jpg" alt=""></p>
<ul>
<li>Kafka 在儲存、發布以及訂閱訊息時是透過 <code>Topic</code> 進行歸類</li>
<li>每一個 Topic 可包含一個或多個 <code>Partition</code>，partition 是資料實際儲存的地方，增加 partition 可以<strong>提高吞吐量</strong></li>
<li>可以透過設定副本 replication-factor 達到<strong>高可靠性</strong></li>
<li>資料儲存在硬碟，可指定存放的時間或是大小，達到<strong>持久性</strong></li>
</ul>
<h3 id="page-cache">page cache</h3>
<p>Linux內核會將系統中所有的空閒記憶體全部當做 page cache 來用，而page cache 中的所有 page 數據將一直保存在 page cache 中直到 CPU 根據特定的算法替換掉它們中的某些 page。<br>
當 produce 資料到 Kafka 時，會先將數據寫入 Page Cache 中，並將該 page 上有 dirty 標誌。當 consumer 向 Kafka 讀取資料時，會先在 Page Cache 中查找內容，如果有就直接返回，沒有的話就會從 disk 讀取文件再寫回 Page Cache。<br>
因此只要生產者與消費者的速度相差不大，消費者會直接讀取之前生產者寫入 Page Cache 的數據，大家在記憶體內裡完成接力，沒有磁碟訪問。<br>
比起在記憶體中維護一份消息數據的傳統做法，這既不會重複浪費一倍的記憶體，Page Cache 又不需要 GC，而且即使 Kafka 重啟了，Page Cache 還依然在。</p>
]]></content>
      <categories>
        <category>Big Data</category>
        <category>Kafka</category>
      </categories>
      <tags>
        <tag>Kafka</tag>
        <tag>page cache</tag>
      </tags>
  </entry>
  <entry>
    <title>[Kafka] 儲存機制與訊息格式</title>
    <url>/Kafka-%E5%84%B2%E5%AD%98%E6%A9%9F%E5%88%B6%E8%88%87%E8%A8%8A%E6%81%AF%E6%A0%BC%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="Partition-Segment">Partition &amp; Segment</h2>
<p>在 kafka 中，同一個 topic 下有多個不同的 partition，每個 partition 就是一個目錄。每個 partition（目錄）又會細分到多個大小相等的 segment 文件中，每個 segment 中的消息數量不一定相等。</p>
<span id="more"></span>
<p>segment 文件是由 2 部分組成，分別為 .index 和 .log 結尾的文件：</p>
<ul>
<li>index 結尾文件表示索引文件，用於索引 log 文件。</li>
<li>log 結尾文件表示數據文件。</li>
</ul>
<h3 id="Commit-Log">Commit Log</h3>
<p>Kafka 儲存訊息的檔案被它叫做 log，按照 Kafka 文件的說法是：</p>
<blockquote>
<p>Each partition is an ordered, immutable sequence of messages that is continually appended to—a commit log</p>
</blockquote>
<p>這反應出來的Kafka的行為是：訊息被不斷地append到檔案末尾。</p>
<p>這種簡單的log形式的檔案結構能夠更好地實現 Kafka 訴求的功能：高吞吐量、多副本、訊息持久化。</p>
<p>Kafka 中的數據單位是 message (record)，在Kafka Protocol 中，Message 具體的格式為</p>
<blockquote>
<p>Messages consist of a variable-length header, a variable-length opaque key byte array and a variable-length opaque value byte array.</p>
</blockquote>
<p>message format 的格式可以在 <a href="https://kafka.apache.org/documentation/#messageformat">kafka 文檔</a>中查找</p>
<p>消息格式版本 v2</p>
<p><img src="https://imgur.com/mopFRPT.png" alt=""></p>
<p>RecordBatch 裡包含很多records，record 包含 Header。</p>
<h4 id="RecordBatch">RecordBatch</h4>
<table>
<thead>
<tr>
<th>字段</th>
<th style="text-align:center">類型</th>
<th>說明</th>
</tr>
</thead>
<tbody>
<tr>
<td>baseOffset</td>
<td style="text-align:center">int64</td>
<td>當前RecordBatch起始位置。Record 中的offset delta與該baseOffset相加才得到真正的offset值</td>
</tr>
<tr>
<td>batchLength</td>
<td style="text-align:center">int32</td>
<td>RecordBatch 總長</td>
</tr>
<tr>
<td>partitionLeaderEpoch</td>
<td style="text-align:center">int32</td>
<td>標記 partition 中 leader replica 的元信息</td>
</tr>
<tr>
<td>magic</td>
<td style="text-align:center">int8</td>
<td>V2 版本魔術值為 2</td>
</tr>
<tr>
<td>crc</td>
<td style="text-align:center">int32</td>
<td>校驗碼， 效驗部分從開始到結束全部數據，但除了partitionLeaderEpoch值</td>
</tr>
<tr>
<td>attributes</td>
<td style="text-align:center">int16</td>
<td>消息屬性，0~2:表示壓縮類型第3位：時間戳類型第4位：是否是事務型記錄5表示ControlRecord，這類記錄總是單條出現，它只在broker內處理</td>
</tr>
<tr>
<td>lastOffsetDelta</td>
<td style="text-align:center">int32</td>
<td>RecordBatch 最後一個Record 的相對位移，用於broker 確認RecordBatch 中Records 的組裝正確性</td>
</tr>
<tr>
<td>firstTimestamp</td>
<td style="text-align:center">int64</td>
<td>RecordBatch 第一條Record 的時間戳</td>
</tr>
<tr>
<td>maxTimestamp</td>
<td style="text-align:center">int64</td>
<td>RecordBatch 中最大的時間戳，一般情況下是最後一條Record的時間戳，用於broker 判斷RecordBatch 中Records 的組裝是否正確</td>
</tr>
<tr>
<td>producerId</td>
<td style="text-align:center">int64</td>
<td>生產者編號，用於支持冪等性（Exactly Once 語義）</td>
</tr>
<tr>
<td>producerEpoch</td>
<td style="text-align:center">int16</td>
<td>同producerEpoch，支持冪等性</td>
</tr>
<tr>
<td>baseSequence</td>
<td style="text-align:center">int32</td>
<td>同上，支持冪等性，也用於效驗是否重複Record</td>
</tr>
<tr>
<td>records</td>
<td style="text-align:center">[record]</td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="Record">Record</h4>
<table>
<thead>
<tr>
<th>字段</th>
<th style="text-align:center">類型</th>
<th>說明</th>
</tr>
</thead>
<tbody>
<tr>
<td>length</td>
<td style="text-align:center">varints</td>
<td>消息中長度</td>
</tr>
<tr>
<td>attributes</td>
<td style="text-align:center">int8</td>
<td>unused，沒有使用了，但仍佔據了1B大小</td>
</tr>
<tr>
<td>timestamp delta</td>
<td style="text-align:center">varlong</td>
<td>時間戳增量。一般佔據8個字節</td>
</tr>
<tr>
<td>offset delta</td>
<td style="text-align:center">varint</td>
<td>位移增量</td>
</tr>
<tr>
<td>key length</td>
<td style="text-align:center">varint</td>
<td>key的長度</td>
</tr>
<tr>
<td>key</td>
<td style="text-align:center">byte[]</td>
<td>key的值</td>
</tr>
<tr>
<td>valuelen</td>
<td style="text-align:center">varint</td>
<td>value值的長度</td>
</tr>
<tr>
<td>value</td>
<td style="text-align:center">byte[]</td>
<td>value的實際值</td>
</tr>
<tr>
<td>headers</td>
<td style="text-align:center">[header]</td>
<td>頭部結構，支持應用級別的擴展</td>
</tr>
</tbody>
</table>
<p>Record 消息中的關鍵字，字段類型好多都是採用了varints，動態類型，這樣有利於kafka根據具體的值來確定需要幾個字節保存。</p>
<h2 id="序列化和反序列化">序列化和反序列化</h2>
<p>kafka 內部發送和接收消息的時候，使用的是 byte[] 字節數組的方式 (RPC底層也是用這種通訊格式)。但是我們在應用層其實可以使用更多的數據類型，比如 int，short， long，String等，這歸功於 kafka 的序列化和反序列化機制。</p>
<p>可以在 producer 的 config 設置指定要使用的編碼方式。</p>
<h3 id="Producer-Config-設定">Producer Config 設定</h3>
<p><em>key.serializer = org.apache.kafka.common.serialization.StringSerializer value.serializer = org.apache.kafka.common.serialization.StringSerializer</em></p>
<p>訊息的序列化功能，producer 在傳送時訊息可以是字串也可以是物件，在傳送時必須做序列化，除了 String 之外，預設還支援 ByteArray、ByteBuffer、Bytes、Double、Integer、Long，另外也可以實作自己的 serializer，但必須要 implement -<br>
<code>org.apache.kafka.common.serialization.Serializer</code>。<br>
可以參考這篇<a href="https://www.opencodez.com/java/implement-custom-value-serializer-apache-kafka.htm">文章</a>。</p>
<h6 id="Reference">Reference</h6>
<ul>
<li><a href="https://www.cnblogs.com/jiujuan/p/15024666.html">https://www.cnblogs.com/jiujuan/p/15024666.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Big Data</category>
        <category>Kafka</category>
      </categories>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>[Kubernetes]  ConfigMap 建立及掛載</title>
    <url>/Kubernetes-ConfigMap-create-mount/</url>
    <content><![CDATA[<h3 id="ConfigMap">ConfigMap</h3>
<p>ConfigMap 以 key-vaule 的方式用來描述系統相關設定，所有與應用程式相關的<strong>非敏感性</strong>未加密的資訊可放在 ConfigMap 內。而如有敏感性資料，則需透過 <code>Secret</code>。</p>
<span id="more"></span>
<h3 id="主要目的">主要目的</h3>
<p>主要目的是將應用程式與設定解耦，ConfigMap 與 Pod 將個別單獨存在於 k8s 叢集中，當 Pod 需要使用 ConfigMap 時才需要將 ConfigMap 掛載到 Pod 內使用。解耦的好處有：</p>
<ul>
<li>便於管理</li>
<li>彈性高，可掛載不同的 ConfigMap 到 Pod 內使用；或是同一個 ConfigMap 掛載到多個 Pod。</li>
</ul>
<h3 id="用法">用法</h3>
<p>Kubernetes 的 ConfigMap 透過 kubectl create 或 kubectl apply 來建立。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl create configmap [資源名字] [來源參數]</span><br><span class="line">$ kubectl apply condfigmap.yaml</span><br></pre></td></tr></table></figure>
<h4 id="使用-kubectl-create-建立">使用 kubectl create 建立</h4>
<p>使用 kubectl create 可以從檔案路徑、檔案或是 literal value 來建立 configMap。</p>
<ul>
<li>–from-file</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  建立名為 myConf、資料來源是某路徑下所有檔案的 configMap</span></span><br><span class="line">$ kubectl create configmap myConf --from-file=/path/<span class="keyword">for</span>/config/file/</span><br><span class="line"><span class="comment">#  建立名為 myConf、資料來源是一個檔案的 configMap</span></span><br><span class="line">$ kubectl create configmap myConf --from-file=/path/to/app.properties</span><br><span class="line"><span class="comment">#  建立名為 myConf、資料來源是多個檔案的 configMap</span></span><br><span class="line">$ kubectl create configmap myConf --from-file=/path/of/app1.properties --from-file=/path/of/app2.properties</span><br></pre></td></tr></table></figure>
<div class="info">
<p>如果是來源是檔案的話，則 configMap 中的 key 就會是檔名，value 則是檔案內容。</p>
</div>
<ul>
<li>–from-literal</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#  建立名為 myConf、包含指定鍵值對的 configMap</span><br><span class="line">$ kubectl create configmap myConf --from-literal=key1=config1</span><br><span class="line">$ kubectl create configmap myConf --from-literal=key1=config1 --from-literal=key2=config2</span><br></pre></td></tr></table></figure>
<ul>
<li>兩個共用</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl create configmap myConf --from-file=/path/of/config.conf \</span><br><span class="line">    --from-literal=key1=config1 \</span><br><span class="line">    --from-literal=key2=config2</span><br></pre></td></tr></table></figure>
<ul>
<li>–from-env-file<br>
使用環境變數表示的檔案。</li>
</ul>
<div class="warning">
<p>請注意，value 如果有 “” 則會視為是值的一部份。且如果在同個 create 中使用多個 --from-env-file 則指會應用最後一個。</p>
</div>
<h4 id="使用-kubectl-apply-yaml-檔案建立">使用 kubectl apply yaml 檔案建立</h4>
<p>準備 yaml 檔</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myConf</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">key1:</span> <span class="string">config1</span></span><br><span class="line">  <span class="attr">key2:</span> <span class="string">config2</span></span><br><span class="line">  <span class="attr">app.properties:</span> <span class="string">| </span></span><br><span class="line"><span class="string">    property.1 = value1 </span></span><br><span class="line"><span class="string">    property.2 = value2 </span></span><br><span class="line"><span class="string">    property.3 = value3</span></span><br></pre></td></tr></table></figure>
<p>佈署</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl apply -f configmap.yaml</span><br></pre></td></tr></table></figure>
<h3 id="查看-ConfigMap">查看 ConfigMap</h3>
<p>建立完成後可以使用 <code>kubectl get</code> 或是 <code>kubectl describe</code> 的擷取 configMap 的內容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl get configmaps myConf -o yaml</span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="number">2021-01-04T18:52:05Z</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myConf</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">resourceVersion:</span> <span class="string">&quot;516&quot;</span></span><br><span class="line">  <span class="attr">uid:</span> <span class="string">b4952dc3-d670-11e5-8cd0-68f728db1985</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">key1:</span> <span class="string">config1</span></span><br><span class="line">  <span class="attr">key2:</span> <span class="string">config2</span></span><br><span class="line">  <span class="attr">app.properties:</span> <span class="string">| </span></span><br><span class="line"><span class="string">    property.1 = value1 </span></span><br><span class="line"><span class="string">    property.2 = value2 </span></span><br><span class="line"><span class="string">    property.3 = value3</span></span><br></pre></td></tr></table></figure>
<h3 id="將-ConfigMap-掛載到-pod-使用">將 ConfigMap 掛載到 pod 使用</h3>
<h4 id="當成環境變數使用">當成環境變數使用</h4>
<p>pod 的 yaml 檔如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">testenv</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">tomcat:8</span></span><br><span class="line">      <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">      <span class="attr">command:</span> [ <span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo $(KEY1_ENV)&quot;</span> ]</span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">KEY1_ENV</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">configMapKeyRef:</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">myConf</span></span><br><span class="line">              <span class="attr">key:</span> <span class="string">key1</span></span><br></pre></td></tr></table></figure>
<p>將 pod 跑起來後，ConfigMap myConf 中的 key1 的 value 就會做為環境變數 KEY1_ENV 的值。</p>
<h4 id="掛載成-volume">掛載成 volume</h4>
<p>pod 的 yaml 檔如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">testvolume</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span></span><br><span class="line">      <span class="attr">image: tomcat:</span> <span class="number">8</span></span><br><span class="line">      <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">      <span class="attr">command:</span> [ <span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;cat /etc/config/keys&quot;</span> ]</span><br><span class="line">      <span class="attr">volumeMounts:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">        <span class="attr">mountPath:</span> <span class="string">/etc/config</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">      <span class="attr">configMap:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">myConf</span></span><br></pre></td></tr></table></figure>
<div class="info">
<p>使用 volume 將 ConfigMap 作為文件或目錄直接掛載，ConfigMap 中每一個 key-value 鍵值對都會生成一個文件，key 為文件名，value 為內容。</p>
</div>
<p>另一種方式，只掛載某個 key，並指定相對路徑。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">testvolume</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">tomcat:8</span></span><br><span class="line">      <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">      <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/etc/config</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">      <span class="attr">configMap:</span></span><br><span class="line">         <span class="attr">name:</span> <span class="string">myConf</span></span><br><span class="line">         <span class="attr">items:</span></span><br><span class="line">           <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">key1</span></span><br><span class="line">             <span class="attr">path:</span> <span class="string">/path/to/key1</span>  <span class="comment"># key1 會放在 mountPath /etc/config/path/to 下。</span></span><br><span class="line">           <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">app.properties</span></span><br><span class="line">             <span class="attr">path:</span> <span class="string">app.properties</span> <span class="comment"># 如果 path 與 key 相同，則會直接把 app.properties 文件放在 mountPath 下。</span></span><br></pre></td></tr></table></figure>
<h5 id="Reference">Reference</h5>
<ul>
<li><a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/">https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/</a></li>
<li><a href="https://www.cnblogs.com/pu20065226/p/10690628.html">https://www.cnblogs.com/pu20065226/p/10690628.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>ConfigMap</tag>
      </tags>
  </entry>
  <entry>
    <title>安裝 Kubernetes Dashboard - 單集群可視化管理</title>
    <url>/Kubernetes-Dashboard-Install/</url>
    <content><![CDATA[<p>Kubernetes Dashboard 是由官方維護的 Kubernetes 集群 WEB UI 管理工具，能查看 Kubernetes Cluster 上資源分佈與使用狀況，也可以創建或者修改 Kubernetes 資源，讓使用者透過 Web UI 介面取代指令的管理 Kubernetes。</p>
<span id="more"></span>
<h3 id="安裝">安裝</h3>
<p>安裝非常簡單，只要透過下面 command 即可部屬。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.5.1/aio/deploy/recommended.yaml</span><br></pre></td></tr></table></figure>
<p>確認安裝結果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@ula ~]# kubectl get all -n kubernetes-dashboard</span><br><span class="line">NAME                                             READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/dashboard-metrics-scraper-799d786dbf-zhvlc   1/1     Running   0          24s</span><br><span class="line">pod/kubernetes-dashboard-fb8648fd9-wd4t5         1/1     Running   0          24s</span><br><span class="line"></span><br><span class="line">NAME                                TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">service/dashboard-metrics-scraper   ClusterIP   10.111.121.48    &lt;none&gt;        8000/TCP   24s</span><br><span class="line">service/kubernetes-dashboard        ClusterIP   10.107.248.188   &lt;none&gt;        443/TCP    25s</span><br><span class="line"></span><br><span class="line">NAME                                        READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">deployment.apps/dashboard-metrics-scraper   1/1     1            1           24s</span><br><span class="line">deployment.apps/kubernetes-dashboard        1/1     1            1           25s</span><br><span class="line"></span><br><span class="line">NAME                                                   DESIRED   CURRENT   READY   AGE</span><br><span class="line">replicaset.apps/dashboard-metrics-scraper-799d786dbf   1         1         1       24s</span><br><span class="line">replicaset.apps/kubernetes-dashboard-fb8648fd9         1         1         1       24s</span><br></pre></td></tr></table></figure>
<h3 id="訪問">訪問</h3>
<p>將 kubernetes-dashboard 服務暴露 NodePort</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl edit svc -n kubernetes-dashboard kubernetes-dashboard</span><br></pre></td></tr></table></figure>
<p>將原本 <code>type: ClusterIP</code> 改成 <code>type: NodePort</code>。完成後就可以使用 <code>https://NodeIP:nodePort</code> 地址訪問 dashboard。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@ula ~]# kubectl get svc -n kubernetes-dashboard kubernetes-dashboard</span><br><span class="line">NAME                   TYPE       CLUSTER-IP       EXTERNAL-IP   PORT(S)         AGE</span><br><span class="line">kubernetes-dashboard   NodePort   10.107.248.188   &lt;none&gt;        443:31302/TCP   44m</span><br></pre></td></tr></table></figure>
<blockquote>
<p>由於 Dashboard 默認使用 https，其證書不受瀏覽器信任，所以訪問時加上 https 強制跳轉就可以了。<br>
<img src="https://imgur.com/Mw9Xl0U.png" alt=""></p>
</blockquote>
<h3 id="登入">登入</h3>
<p>登錄 Dashboard 支持 Kubeconfig 和 Token 兩種認證方式，Kubeconfig 中也依賴 token 字段，所以生成 token 這一步是必不可少的。下面紀錄使用 token 的方式登錄。</p>
<h4 id="建立-service-account-role-binding">建立 service account &amp; role binding</h4>
<p>準備 yaml 檔 sc-ula.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ula</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">rbac.authorization.kubernetes.io/autoupdate:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cluster-admin</span> <span class="comment"># k8s 預設建立的角色</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ula</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"></span><br><span class="line">  <span class="string">---</span></span><br><span class="line">  <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ula</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">kubernetes.io/cluster-service:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">    <span class="attr">addonmanager.kubernetes.io/mode:</span> <span class="string">Reconcile</span></span><br></pre></td></tr></table></figure>
<p>使用 kubectl apply 建立</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl apply -f sc-ula.yaml</span><br></pre></td></tr></table></figure>
<h4 id="取得-Server-Account-Token">取得 Server Account Token</h4>
<p>查看 service account secret</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">kubectl</span> <span class="string">get</span> <span class="string">sa</span> <span class="string">ula</span> <span class="string">-n</span> <span class="string">kube-system</span> <span class="string">-o=yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="string">&quot;2022-03-14T03:12:41Z&quot;</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ula</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">resourceVersion:</span> <span class="string">&quot;332586&quot;</span></span><br><span class="line">  <span class="attr">uid:</span> <span class="string">f048e242-5947-4945-8310-432628e635b7</span></span><br><span class="line"><span class="attr">secrets:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ula-token-qwddr</span></span><br></pre></td></tr></table></figure>
<p>取得 token 字段，並使用 base64 decode</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl get secret ula-token-qwddr -o jsonpath=&#123;.data.token&#125; -n kube-system | base64 -d</span><br><span class="line">eyJhbGciOiJSUzI1NiIsImtpZCI6IjVadWpvSGEtR2tMR2ZFMGVHaGloWjJNOFdRcn...............</span><br></pre></td></tr></table></figure>
<p>然後在 dashboard 登錄頁面上直接使用上面得到的 token 字符串即可登錄，這樣就可以擁有管理員權限操作整個 kubernetes 集群的對象，也可以新建一個指定操作權限的用戶。<br>
<img src="https://imgur.com/1FymCmE.png" alt=""></p>
<h3 id="Reference">Reference</h3>
<ul>
<li><a href="https://github.com/kubernetes/dashboard">https://github.com/kubernetes/dashboard</a></li>
<li><a href="https://kubernetes.io/zh/docs/tasks/access-application-cluster/web-ui-dashboard/">https://kubernetes.io/zh/docs/tasks/access-application-cluster/web-ui-dashboard/</a></li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>[Kubernetes] 使用 istio operator 安裝 Istio v1.11</title>
    <url>/Kubernetes-Install-Istio-v1.11/</url>
    <content><![CDATA[<h2 id="下載-Istio">下載 Istio</h2>
<span id="more"></span>
<h4 id="下載資源">下載資源</h4>
<p>用自動化工具下載並提取最新版本（Linux 或 macOS）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ curl -L https://istio.io/downloadIstio | sh -</span><br></pre></td></tr></table></figure>
<p>或是用指定參數下載指定的、不同處理器體系的版本。例如，下載 x86_64 架構的、1.6.8 版本的 Istio ，運行：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ curl -L https://istio.io/downloadIstio | ISTIO_VERSION=1.6.8 TARGET_ARCH=x86_64 sh -</span><br></pre></td></tr></table></figure>
<h4 id="進入-Istio-包目錄">進入 Istio 包目錄</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd istio-1.11.4</span><br></pre></td></tr></table></figure>
<p>安裝目錄包含：</p>
<ul>
<li><code>samples/</code> 目錄下的示例應用程序</li>
<li><code>bin/</code> 目錄下的 <code>[istioctl](https://www.bookstack.cn/read/istio-1.11-zh/af90c7c768b11bf8.md)</code> 客户端二進制文件</li>
</ul>
<h4 id="設定-istioctl">設定 istioctl</h4>
<p>將 <code>istioctl</code> 客户端加入執行路径（Linux or macOS）:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ export PATH=$PWD/bin:$PATH</span><br></pre></td></tr></table></figure>
<h2 id="部署-Istio-Operator">部署 Istio Operator</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ istioctl operator init</span><br></pre></td></tr></table></figure>
<p>此命令運行 Operator 在 istio-operator 命名空間中創建以下資源：</p>
<ul>
<li>Operator 自定義資源定義（CRD）</li>
<li>Operator 控制器的 deployment 對象</li>
<li>一個用來訪問 Operator 指標的服務</li>
<li>Istio Operator 運行必須的 RBAC 規則</li>
</ul>
<p>查看創建的資源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl get all -n istio-operator</span><br></pre></td></tr></table></figure>
<h2 id="安裝-Istio">安裝 Istio</h2>
<p>可以依據 profile 安裝指定的 istio 套件<br>
<img src="https://imgur.com/0Nzav1i.png" alt=""></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl create ns istio-system</span><br><span class="line">$ kubectl apply -f - &lt;&lt;EOF</span><br><span class="line">apiVersion: install.istio.io/v1alpha1</span><br><span class="line">kind: IstioOperator</span><br><span class="line">metadata:</span><br><span class="line">  namespace: istio-system</span><br><span class="line">  name: istiocontrolplane</span><br><span class="line">spec:</span><br><span class="line">  profile: demo</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<p>各種 profile 的 yaml 檔放置在 <code>./manifests/profiles</code> 下，可依照需求改內容參數。並使用 <code>$ kubectl apply -f xxx.yaml</code> 部屬。</p>
<h2 id="安裝-Addons-Component">安裝 Addons Component</h2>
<p>不同於以往 1.6 以前的版本的 istio yaml 檔可直接指定 addonComponents，在 1.11 版如果要安裝 Kiali、Jaeger 等 addon component，則需要另外部屬。<br>
<img src="https://imgur.com/ys9rKJn.png" alt=""></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 一次部屬所有 addons</span><br><span class="line">$ kubectl apply -f samples/addons</span><br><span class="line"># 單獨指定套件部屬</span><br><span class="line">$ kubectl apply -f samples/addons/kiali.yaml</span><br></pre></td></tr></table></figure>
<h5 id="Resource">Resource</h5>
<ul>
<li><a href="https://preliminary.istio.io/latest/zh/docs/setup/install/operator/">https://preliminary.istio.io/latest/zh/docs/setup/install/operator/</a></li>
<li><a href="https://istio.io/latest/docs/setup/getting-started/">https://istio.io/latest/docs/setup/getting-started/</a></li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>Istio</tag>
      </tags>
  </entry>
  <entry>
    <title>[Kubernetes] Minikube</title>
    <url>/Kubernetes-Minikube/</url>
    <content><![CDATA[<p>minikube 是一個由 Google 發布的部署單節點的 Kubernetes Cluster 的工具，可以安裝在本機上，支援 Windows 與 Mac Minikube 只有一個 Node (節點)。對於本地實驗可以避免節點不足的困擾；讓開發者可以在本機上輕易架設一個 Kubernetes Cluster，快速上手 Kubernetes 的指令與環境。</p>
<span id="more"></span>
<p>運作原理就是會在本機上建立一個 virtual machine，並且在這 VM 建立一個 signle-node Kubernetes Cluster。</p>
<p>minikube 適合用於開發環境測試，不會把它用在實際生產環境中。</p>
<h3 id="下載與部屬">下載與部屬</h3>
<p>Minikube 支援 Windows、MacOS、Linux，在這三種平台的本機端都可以安裝並執行 Minikube 。安裝及執行步驟，請參考官網：<a href="https://minikube.sigs.k8s.io/docs/start/">https://minikube.sigs.k8s.io/docs/start/</a></p>
<p>整體步驟如下：</p>
<ul>
<li>安裝Virtualization Software，如 <a href="http://virtualbox.org/">VirtualBox</a></li>
<li>安裝 <a href="https://kubernetes.io/docs/reference/kubectl/overview/">kubectl</a> 套件，用以和 K8S 集群交互溝通</li>
<li>從 <a href="https://github.com/kubernetes/minikube">Github</a> 下載 Minikube 套件</li>
<li>啟動 minikube 及 K8s 集群</li>
<li>使用 kubectl 操作集群及應用</li>
</ul>
<p>官網跟其他教學文寫得很詳細，在這裡就不一一列示了。</p>
<h6 id="Reference">Reference</h6>
<ul>
<li><a href="https://ithelp.ithome.com.tw/articles/10192490">https://ithelp.ithome.com.tw/articles/10192490</a></li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>Minikube</tag>
      </tags>
  </entry>
  <entry>
    <title>[Kubernetes] Object 基本對象介紹</title>
    <url>/Kubernetes-Object-%E5%9F%BA%E6%9C%AC%E5%B0%8D%E8%B1%A1%E4%BB%8B%E7%B4%B9/</url>
    <content><![CDATA[<h3 id="K8s-Obejcts">K8s Obejcts</h3>
<h4 id="常用的基本-objects：">常用的基本 objects：</h4>
<ul>
<li>Pod<br>
Pod 有兩種類型：普通 Pod 和靜態 Pod (static pod)。靜態 Pod 即不通過 K8S 調度和創建，直接在某個具體的 Node 機器上通過具體的文件來啟動。普通 Pod 則是由 K8S 創建、調度，同時數據存放在 etcd 中。</li>
</ul>
<span id="more"></span>
<ul>
<li>Service<br>
可以認為是 pod 的反向代理，負責接收客戶端請求，把請求轉給 pod。因為每個 pod 都有自己的內部 ip，但是 deployment 的 pod 的 ip 是有可能變的 (pod 掛掉或複製)，所以需要 service 來做類似中間者的抽象存在。Service 挑選、關聯 Pod 的方式為基於 Label Selector 進行定義。通過 <code>type</code> 在 <code>ServiceSpec</code>中指定可以以不同的方式公開服務：
<ul>
<li>ClusterIP (default)：只有內部 IP，只能從集群內訪問服務。</li>
<li>NodePort：工作於每個節點的主機 IP 之上，可以從集群外部訪問服務。ClusterIP 的超集。</li>
<li>LoadBalancer：在當前集群中創建一個外部負載平衡器，把外部請求負載均衡至多個Node 主機 IP 的 NodePort 之上，為該服務分配一個固定的外部 IP。NodePort 的超集。</li>
<li>ExternalName-externalName：通過在 Cluster 的 DNS Server 添加一筆 CName Record，使用指定名稱（在 yaml 中設定）公開服務，不使用代理 (kube-proxy)，而是透過 kube-dns。此類型在 kubernetes 1.7 版本有提供，但是要 kube-dns version 要在 1.14.9 以上，否則會遇到 Resolve External Name issue。主要是為了讓不同 namespace 中的 Service 可以利用 ExternalName 設定的外部名稱連到其它的 namespace 中的 Service。</li>
</ul>
</li>
<li>Label<br>
標籤用於區分對象，使用標籤引用對象而不再是 IP。Label 以鍵值對的形式存在，每個對象可以有多個標籤，通過標籤可以關聯對象。</li>
<li>Volume<br>
共享 Pod 中使用的數據。</li>
<li>Namespace<br>
可以抽象理解為一群對象的集合。</li>
</ul>
<h4 id="High-level-objects-Controllers">High-level objects (Controllers)</h4>
<p>建立在基本對象的基礎上，提供了附加的功能和便利性：</p>
<ul>
<li>ReplicaSet：確保運行指定數量的 pod，官方建議使用 Deployment 來自動管理。</li>
<li>Deployment：最常見的部屬 Pod 的方法，可以用來創建 replicaSet。支持版本記錄、rolling update/back、暫停升級等高級特性。</li>
<li>StatefulSet：用於管理具有持久性存儲的有狀態應用程序。
<ul>
<li>有序部屬、有序擴展：即 Pod 是有順序的，在部署或者擴展的時候要依據定義的順序依次依次進行（即從 0 到 N-1 ，在下一個 Pod 運行之前所有之前的 Pod 必須都是 Running 和 Ready 狀態），基於 init containers 來實現。所以 pod name 固定且會帶一個有序的序號(app-0, app-1…)。</li>
<li>持久性儲存：基於 pvc 實現，pod 重新調度後仍會跟 volume 保持關聯， volume 不會隨 pod 刪除而刪除。</li>
<li>穩定網路標誌：基於 Headless Service（即沒有 Cluster IP 的 Service）來實現，Pod 重新調度後其 PodName 和 HostName 不變。</li>
</ul>
</li>
<li>DaemonSet：保證在每個 Node 上都運行一個容器副本，常用來部署一些集群的日誌、監控或者其他系統管理應用。</li>
<li>Job：一次性任務，運行完後Pod銷毀，不再自動重建。</li>
<li>CronJob：定時任務。</li>
</ul>
<h6 id="Resource">Resource</h6>
<ul>
<li><a href="https://www.cnblogs.com/ccbloom/p/11311286.html#%E5%9F%BA%E7%A1%80%E5%AF%B9%E8%B1%A1">https://www.cnblogs.com/ccbloom/p/11311286.html#基础对象</a></li>
<li><a href="https://www.cnblogs.com/baoshu/p/13124881.html">https://www.cnblogs.com/baoshu/p/13124881.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>[Kubernetes] Unable to connect to the server: x509: certificate has expired or is not yet valid</title>
    <url>/Kubernetes-Unable-to-connect-to-the-server-x509-certificate-has-expired-or-is-not-yet-valid/</url>
    <content><![CDATA[<p>在下 <code>kubectl</code> 時出現 <code>Unable to connect to the server: x509: certificate has expired or is not yet valid</code> 的錯誤，原因是 kubernetes apiserver 證書已過期，kubernetes 的 apiServer 與 kubelet 的訪問授權證書是一年，官方表示通過這種方式，讓用戶不斷的升級版本。</p>
<span id="more"></span>
<p>目前有幾種解決方式：</p>
<ul>
<li>重新生成證書取代過期的證書 (本次作法)</li>
<li>升級集群以自動更新證書</li>
<li>部屬一套新的環境，將業務遷移過去</li>
<li>去掉證書驗證功能 (不安全且不科學，需要自己改 source code)</li>
</ul>
<h3 id="查看證書的有效日期">查看證書的有效日期</h3>
<p>透過 <code>openssl</code> 直接查證書內容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ openssl x509 -<span class="keyword">in</span> /etc/kubernetes/pki/apiserver.crt -noout -text | grep Not</span><br><span class="line">            Not Before: Nov 17 04:48:20 2020 GMT</span><br><span class="line">            Not After : Nov 17 04:48:20 2021 GMT</span><br></pre></td></tr></table></figure>
<p>或是透過 <code>kubeadm</code> 檢查 Kubernetes 環境證書</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubeadm alpha certs check-expiration</span><br><span class="line">[check-expiration] Reading configuration from the cluster...</span><br><span class="line">[check-expiration] FYI: You can look at this config file with <span class="string">&#x27;kubectl -n kube-system get cm kubeadm-config -oyaml&#x27;</span></span><br><span class="line">[check-expiration] Error reading configuration from the Cluster. Falling back to default configuration</span><br><span class="line"></span><br><span class="line">W1118 09:51:35.880390    7092 configset.go:348] WARNING: kubeadm cannot validate component configs <span class="keyword">for</span> API groups [kubelet.config.k8s.io kubeproxy.config.k8s.io]</span><br><span class="line">CERTIFICATE                EXPIRES                  RESIDUAL TIME   CERTIFICATE AUTHORITY   EXTERNALLY MANAGED</span><br><span class="line">admin.conf                 Nov 17, 2021 04:48 UTC   &lt;invalid&gt;                               no</span><br><span class="line">apiserver                  Nov 17, 2021 04:48 UTC   &lt;invalid&gt;       ca                      no</span><br><span class="line">apiserver-etcd-client      Nov 17, 2021 04:48 UTC   &lt;invalid&gt;       etcd-ca                 no</span><br><span class="line">apiserver-kubelet-client   Nov 17, 2021 04:48 UTC   &lt;invalid&gt;       ca                      no</span><br><span class="line">controller-manager.conf    Nov 17, 2021 04:48 UTC   &lt;invalid&gt;                               no</span><br><span class="line">etcd-healthcheck-client    Nov 17, 2021 04:48 UTC   &lt;invalid&gt;       etcd-ca                 no</span><br><span class="line">etcd-peer                  Nov 17, 2021 04:48 UTC   &lt;invalid&gt;       etcd-ca                 no</span><br><span class="line">etcd-server                Nov 17, 2021 04:48 UTC   &lt;invalid&gt;       etcd-ca                 no</span><br><span class="line">front-proxy-client         Nov 17, 2021 04:48 UTC   &lt;invalid&gt;       front-proxy-ca          no</span><br><span class="line">scheduler.conf             Nov 17, 2021 04:48 UTC   &lt;invalid&gt;                               no</span><br><span class="line"></span><br><span class="line">CERTIFICATE AUTHORITY   EXPIRES                  RESIDUAL TIME   EXTERNALLY MANAGED</span><br><span class="line">ca                      Nov 15, 2030 04:48 UTC   8y              no</span><br><span class="line">etcd-ca                 Nov 15, 2030 04:48 UTC   8y              no</span><br><span class="line">front-proxy-ca          Nov 15, 2030 04:48 UTC   8y              no</span><br></pre></td></tr></table></figure>
<p>經查看 k8s master 組件證書都過期了。</p>
<h3 id="更新證書">更新證書</h3>
<ol>
<li>備份舊有的配置文件與證書</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cp -rf /etc/kubernetes /etc/kubernets.bak</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>更新證書</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubeadm alpha certs renew all</span><br><span class="line">[renew] Reading configuration from the cluster...</span><br><span class="line">[renew] FYI: You can look at this config file with <span class="string">&#x27;kubectl -n kube-system get cm kubeadm-config -oyaml&#x27;</span></span><br><span class="line">[renew] Error reading configuration from the Cluster. Falling back to default configuration</span><br><span class="line"></span><br><span class="line">W1118 11:11:52.322016   26585 configset.go:348] WARNING: kubeadm cannot validate component configs <span class="keyword">for</span> API groups [kubelet.config.k8s.io kubeproxy.config.k8s.io]</span><br><span class="line">certificate embedded <span class="keyword">in</span> the kubeconfig file <span class="keyword">for</span> the admin to use and <span class="keyword">for</span> kubeadm itself renewed</span><br><span class="line">certificate <span class="keyword">for</span> serving the Kubernetes API renewed</span><br><span class="line">certificate the apiserver uses to access etcd renewed</span><br><span class="line">certificate <span class="keyword">for</span> the API server to connect to kubelet renewed</span><br><span class="line">certificate embedded <span class="keyword">in</span> the kubeconfig file <span class="keyword">for</span> the controller manager to use renewed</span><br><span class="line">certificate <span class="keyword">for</span> liveness probes to healthcheck etcd renewed</span><br><span class="line">certificate <span class="keyword">for</span> etcd nodes to communicate with each other renewed</span><br><span class="line">certificate <span class="keyword">for</span> serving etcd renewed</span><br><span class="line">certificate <span class="keyword">for</span> the front proxy client renewed</span><br><span class="line">certificate embedded <span class="keyword">in</span> the kubeconfig file <span class="keyword">for</span> the scheduler manager to use renewed</span><br></pre></td></tr></table></figure>
<ol>
<li>重新生成配置文件</li>
</ol>
<p>這些配置文件中包含證書，所以需要重新生成</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rm -rf /etc/kubernetes/*.conf</span><br><span class="line">$ kubeadm init phase kubeconfig all --apiserver-advertise-address 10.1.5.21</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>更新配置身份認證的 <code>$HOME/.kube/config</code> 檔案</li>
</ol>
<p>將重新生成於 <code>/etc/kubernetes</code> 下的 <code>admin.conf</code> 檔案覆蓋原先的 <code>~/.kube/config</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">$ chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>重新啟動 kubelet &amp; docker service</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl restart kubelet</span><br><span class="line">$ systemctl restart docker</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>重新使用 kubectl 訪問集群</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get nodes</span><br><span class="line">NAME    STATUS   ROLES    AGE    VERSION</span><br><span class="line">k8sm1   Ready    master   365d   v1.17.13</span><br><span class="line">k8sm2   Ready    master   365d   v1.17.13</span><br><span class="line">k8sm3   Ready    master   365d   v1.17.13</span><br><span class="line">k8sw1   Ready    &lt;none&gt;   365d   v1.17.13</span><br><span class="line">k8sw2   Ready    &lt;none&gt;   365d   v1.17.13</span><br><span class="line">k8sw3   Ready    &lt;none&gt;   365d   v1.17.13</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>如果是多 master，上面的步驟在每個 master 都要做</li>
</ol>
<h3 id="Reference">Reference</h3>
<ul>
<li><a href="https://stackoverflow.com/questions/56320930/renew-kubernetes-pki-after-expired">https://stackoverflow.com/questions/56320930/renew-kubernetes-pki-after-expired</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1832411">https://cloud.tencent.com/developer/article/1832411</a></li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes namespace 一直 delete 不成功的原因 (卡在 terminating status)</title>
    <url>/Kubernetes-namespace-delete-terminating-status/</url>
    <content><![CDATA[<p>最近在刪除 namespace 的時候總是會卡在 Terminating 的狀態，一直不疑有他的直接使用網路上常看的解決方法將 spec.finalizers 清空。但因為每次刪、每次卡，就連完全無任何資源的命名空間也是卡！仔細看後才發現原來是有其他元件錯誤，進而造成影響。</p>
<span id="more"></span>
<h3 id="原因排查">原因排查</h3>
<p>先使用清空 finalizer 的方法強制刪除 namespace，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl proxy</span><br><span class="line">Starting to serve on 127.0.0.1:8001</span><br></pre></td></tr></table></figure>
<p>另開一個 terminal</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF | curl -X PUT \</span><br><span class="line">  localhost:8001/api/v1/namespaces/test/finalize \</span><br><span class="line">  -H &quot;Content-Type: application/json&quot; \</span><br><span class="line">  --data-binary @-</span><br><span class="line">&#123;</span><br><span class="line">  &quot;kind&quot;: &quot;Namespace&quot;,</span><br><span class="line">  &quot;apiVersion&quot;: &quot;v1&quot;,</span><br><span class="line">  &quot;metadata&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;test&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;spec&quot;: &#123;</span><br><span class="line">    &quot;finalizers&quot;: null</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<p>會回傳下面結果</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;kind&quot;:</span> <span class="string">&quot;Namespace&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;apiVersion&quot;:</span> <span class="string">&quot;v1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;metadata&quot;:</span> &#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;:</span> <span class="string">&quot;test&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;uid&quot;:</span> <span class="string">&quot;353766ea-be97-4ccf-9275-0b39bd651afe&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;resourceVersion&quot;:</span> <span class="string">&quot;1359585&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;creationTimestamp&quot;:</span> <span class="string">&quot;2022-03-21T04:18:38Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;deletionTimestamp&quot;:</span> <span class="string">&quot;2022-03-21T04:18:51Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;labels&quot;:</span> &#123;</span><br><span class="line">      <span class="attr">&quot;kubernetes.io/metadata.name&quot;:</span> <span class="string">&quot;test&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;managedFields&quot;:</span> [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;manager&quot;:</span> <span class="string">&quot;kubectl-create&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;operation&quot;:</span> <span class="string">&quot;Update&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;apiVersion&quot;:</span> <span class="string">&quot;v1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;time&quot;:</span> <span class="string">&quot;2022-03-21T04:18:38Z&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;fieldsType&quot;:</span> <span class="string">&quot;FieldsV1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;fieldsV1&quot;:</span> &#123;</span><br><span class="line">          <span class="attr">&quot;f:metadata&quot;:</span> &#123;</span><br><span class="line">            <span class="attr">&quot;f:labels&quot;:</span> &#123;</span><br><span class="line">              <span class="string">&quot;.&quot;</span><span class="string">:</span> &#123;&#125;,</span><br><span class="line">              <span class="attr">&quot;f:kubernetes.io/metadata.name&quot;:</span> &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;manager&quot;:</span> <span class="string">&quot;kube-controller-manager&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;operation&quot;:</span> <span class="string">&quot;Update&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;apiVersion&quot;:</span> <span class="string">&quot;v1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;time&quot;:</span> <span class="string">&quot;2022-03-21T04:18:57Z&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;fieldsType&quot;:</span> <span class="string">&quot;FieldsV1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;fieldsV1&quot;:</span> &#123;</span><br><span class="line">          <span class="attr">&quot;f:status&quot;:</span> &#123;</span><br><span class="line">            <span class="attr">&quot;f:conditions&quot;:</span> &#123;</span><br><span class="line">              <span class="string">&quot;.&quot;</span><span class="string">:</span> &#123;&#125;,</span><br><span class="line">              <span class="string">&quot;k:&#123;\&quot;type\&quot;:\&quot;NamespaceContentRemaining\&quot;&#125;&quot;</span><span class="string">:</span> &#123;</span><br><span class="line">                <span class="string">&quot;.&quot;</span><span class="string">:</span> &#123;&#125;,</span><br><span class="line">                <span class="attr">&quot;f:lastTransitionTime&quot;:</span> &#123;&#125;,</span><br><span class="line">                <span class="attr">&quot;f:message&quot;:</span> &#123;&#125;,</span><br><span class="line">                <span class="attr">&quot;f:reason&quot;:</span> &#123;&#125;,</span><br><span class="line">                <span class="attr">&quot;f:status&quot;:</span> &#123;&#125;,</span><br><span class="line">                <span class="attr">&quot;f:type&quot;:</span> &#123;&#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="string">&quot;k:&#123;\&quot;type\&quot;:\&quot;NamespaceDeletionContentFailure\&quot;&#125;&quot;</span><span class="string">:</span> &#123;</span><br><span class="line">                <span class="string">&quot;.&quot;</span><span class="string">:</span> &#123;&#125;,</span><br><span class="line">                <span class="attr">&quot;f:lastTransitionTime&quot;:</span> &#123;&#125;,</span><br><span class="line">                <span class="attr">&quot;f:message&quot;:</span> &#123;&#125;,</span><br><span class="line">                <span class="attr">&quot;f:reason&quot;:</span> &#123;&#125;,</span><br><span class="line">                <span class="attr">&quot;f:status&quot;:</span> &#123;&#125;,</span><br><span class="line">                <span class="attr">&quot;f:type&quot;:</span> &#123;&#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="string">&quot;k:&#123;\&quot;type\&quot;:\&quot;NamespaceDeletionDiscoveryFailure\&quot;&#125;&quot;</span><span class="string">:</span> &#123;</span><br><span class="line">                <span class="string">&quot;.&quot;</span><span class="string">:</span> &#123;&#125;,</span><br><span class="line">                <span class="attr">&quot;f:lastTransitionTime&quot;:</span> &#123;&#125;,</span><br><span class="line">                <span class="attr">&quot;f:message&quot;:</span> &#123;&#125;,</span><br><span class="line">                <span class="attr">&quot;f:reason&quot;:</span> &#123;&#125;,</span><br><span class="line">                <span class="attr">&quot;f:status&quot;:</span> &#123;&#125;,</span><br><span class="line">                <span class="attr">&quot;f:type&quot;:</span> &#123;&#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="string">&quot;k:&#123;\&quot;type\&quot;:\&quot;NamespaceDeletionGroupVersionParsingFailure\&quot;&#125;&quot;</span><span class="string">:</span> &#123;</span><br><span class="line">                <span class="string">&quot;.&quot;</span><span class="string">:</span> &#123;&#125;,</span><br><span class="line">                <span class="attr">&quot;f:lastTransitionTime&quot;:</span> &#123;&#125;,</span><br><span class="line">                <span class="attr">&quot;f:message&quot;:</span> &#123;&#125;,</span><br><span class="line">                <span class="attr">&quot;f:reason&quot;:</span> &#123;&#125;,</span><br><span class="line">                <span class="attr">&quot;f:status&quot;:</span> &#123;&#125;,</span><br><span class="line">                <span class="attr">&quot;f:type&quot;:</span> &#123;&#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="string">&quot;k:&#123;\&quot;type\&quot;:\&quot;NamespaceFinalizersRemaining\&quot;&#125;&quot;</span><span class="string">:</span> &#123;</span><br><span class="line">                <span class="string">&quot;.&quot;</span><span class="string">:</span> &#123;&#125;,</span><br><span class="line">                <span class="attr">&quot;f:lastTransitionTime&quot;:</span> &#123;&#125;,</span><br><span class="line">                <span class="attr">&quot;f:message&quot;:</span> &#123;&#125;,</span><br><span class="line">                <span class="attr">&quot;f:reason&quot;:</span> &#123;&#125;,</span><br><span class="line">                <span class="attr">&quot;f:status&quot;:</span> &#123;&#125;,</span><br><span class="line">                <span class="attr">&quot;f:type&quot;:</span> &#123;&#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;subresource&quot;:</span> <span class="string">&quot;status&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;spec&quot;:</span> &#123;&#125;,</span><br><span class="line">  <span class="attr">&quot;status&quot;:</span> &#123;</span><br><span class="line">    <span class="attr">&quot;phase&quot;:</span> <span class="string">&quot;Terminating&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;conditions&quot;:</span> [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;:</span> <span class="string">&quot;NamespaceDeletionDiscoveryFailure&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;:</span> <span class="string">&quot;True&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;lastTransitionTime&quot;:</span> <span class="string">&quot;2022-03-21T04:18:56Z&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;reason&quot;:</span> <span class="string">&quot;DiscoveryFailed&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;message&quot;:</span> <span class="string">&quot;Discovery failed for some groups, 1 failing: unable to retrieve                                                                                         the complete list of server APIs: metrics.k8s.io/v1beta1: the server is currently un                                                                                        able to handle the request&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;:</span> <span class="string">&quot;NamespaceDeletionGroupVersionParsingFailure&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;:</span> <span class="string">&quot;False&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;lastTransitionTime&quot;:</span> <span class="string">&quot;2022-03-21T04:18:57Z&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;reason&quot;:</span> <span class="string">&quot;ParsedGroupVersions&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;message&quot;:</span> <span class="string">&quot;All legacy kube types successfully parsed&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;:</span> <span class="string">&quot;NamespaceDeletionContentFailure&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;:</span> <span class="string">&quot;False&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;lastTransitionTime&quot;:</span> <span class="string">&quot;2022-03-21T04:18:57Z&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;reason&quot;:</span> <span class="string">&quot;ContentDeleted&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;message&quot;:</span> <span class="string">&quot;All content successfully deleted, may be waiting on finalization                                                                                        &quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;:</span> <span class="string">&quot;NamespaceContentRemaining&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;:</span> <span class="string">&quot;False&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;lastTransitionTime&quot;:</span> <span class="string">&quot;2022-03-21T04:18:57Z&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;reason&quot;:</span> <span class="string">&quot;ContentRemoved&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;message&quot;:</span> <span class="string">&quot;All content successfully removed&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;:</span> <span class="string">&quot;NamespaceFinalizersRemaining&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;:</span> <span class="string">&quot;False&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;lastTransitionTime&quot;:</span> <span class="string">&quot;2022-03-21T04:18:57Z&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;reason&quot;:</span> <span class="string">&quot;ContentHasNoFinalizers&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;message&quot;:</span> <span class="string">&quot;All content-preserving finalizers finished&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到最後的 Terminating 的區塊有解釋原因。</p>
<h3 id="解決方法">解決方法</h3>
<p>按照原因解決即可成功刪除 namespace，本文遇到的問題是因為安裝 metric server 時失敗，可以看到 apiservice 其中有出現 false 狀態。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl get apiservice</span><br><span class="line">NAME                                   SERVICE                      AVAILABLE                  AGE</span><br><span class="line">v1.                                    Local                        True                       9d</span><br><span class="line">v1.admissionregistration.k8s.io        Local                        True                       9d</span><br><span class="line">v1.apiextensions.k8s.io                Local                        True                       9d</span><br><span class="line">v1.apps                                Local                        True                       9d</span><br><span class="line">v1.authentication.k8s.io               Local                        True                       9d</span><br><span class="line">v1.authorization.k8s.io                Local                        True                       9d</span><br><span class="line">v1.autoscaling                         Local                        True                       9d</span><br><span class="line">v1.batch                               Local                        True                       9d</span><br><span class="line">v1.certificates.k8s.io                 Local                        True                       9d</span><br><span class="line">v1.coordination.k8s.io                 Local                        True                       9d</span><br><span class="line">v1.crd.projectcalico.org               Local                        True                       9d</span><br><span class="line">v1.discovery.k8s.io                    Local                        True                       9d</span><br><span class="line">v1.events.k8s.io                       Local                        True                       9d</span><br><span class="line">v1.monitoring.coreos.com               Local                        True                       3d23h</span><br><span class="line">v1.networking.k8s.io                   Local                        True                       9d</span><br><span class="line">v1.node.k8s.io                         Local                        True                       9d</span><br><span class="line">v1.policy                              Local                        True                       9d</span><br><span class="line">v1.rbac.authorization.k8s.io           Local                        True                       9d</span><br><span class="line">v1.scheduling.k8s.io                   Local                        True                       9d</span><br><span class="line">v1.storage.k8s.io                      Local                        True                       9d</span><br><span class="line">v1alpha1.kafka.strimzi.io              Local                        True                       3h3m</span><br><span class="line">v1alpha1.monitoring.coreos.com         Local                        True                       3d23h</span><br><span class="line">v1beta1.batch                          Local                        True                       9d</span><br><span class="line">v1beta1.discovery.k8s.io               Local                        True                       9d</span><br><span class="line">v1beta1.events.k8s.io                  Local                        True                       9d</span><br><span class="line">v1beta1.flowcontrol.apiserver.k8s.io   Local                        True                       9d</span><br><span class="line">v1beta1.kafka.strimzi.io               Local                        True                       3h3m</span><br><span class="line">v1beta1.metrics.k8s.io                 kube-system/metrics-server   False (MissingEndpoints)   3d1h</span><br><span class="line">v1beta1.node.k8s.io                    Local                        True                       9d</span><br><span class="line">v1beta1.policy                         Local                        True                       9d</span><br><span class="line">v1beta1.storage.k8s.io                 Local                        True                       9d</span><br><span class="line">v1beta2.core.strimzi.io                Local                        True                       3h3m</span><br><span class="line">v1beta2.flowcontrol.apiserver.k8s.io   Local                        True                       9d</span><br><span class="line">v1beta2.kafka.strimzi.io               Local                        True                       3h3m</span><br><span class="line">v2.autoscaling                         Local                        True                       9d</span><br><span class="line">v2beta1.autoscaling                    Local                        True                       9d</span><br><span class="line">v2beta2.autoscaling                    Local                        True                       9d</span><br></pre></td></tr></table></figure>
<p>先暫時移除臨時裝的 metric server</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">helm uninstall metrics-server --namespace kube-system</span><br></pre></td></tr></table></figure>
<p>就可以成功 delete 了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@node ~]# kubectl create ns test</span><br><span class="line">namespace/test created</span><br><span class="line">[root@node ~]#</span><br><span class="line">[root@node ~]# kubectl delete ns test</span><br><span class="line">namespace &quot;test&quot; deleted</span><br><span class="line">[root@node ~#</span><br></pre></td></tr></table></figure>
<div class="warning">
<p>另外關於 metric-server 的 debug，紀錄在另外一篇<a href="https://ulahsieh.github.io/helm-install-Metrics-Server/">文章</a>。</p>
</div>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>[Kubernetes] 解決 scheduler and controller-manager unhealthy state</title>
    <url>/Kubernetes-scheduler-and-controller-manager-unhealthy-state/</url>
    <content><![CDATA[<h4 id="Problem">Problem</h4>
<p>在嘗試更新 Kubernetes 時，下了下面的 command 取得目前集群的組件狀態：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl get cs</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>發現 controller-mamager 和 scheduler 有 unhealthy 的狀態：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NAME                 STATUS      MESSAGE                                                                                     ERROR</span><br><span class="line">controller-manager   Unhealthy   Get http://127.0.0.1:10252/healthz: dial tcp 127.0.0.1:10252: connect: connection refused</span><br><span class="line">scheduler            Unhealthy   Get http://127.0.0.1:10251/healthz: dial tcp 127.0.0.1:10251: connect: connection refused</span><br><span class="line">etcd-0               Healthy     &#123;&quot;health&quot;:&quot;true&quot;</span><br></pre></td></tr></table></figure>
<h4 id="Reason">Reason</h4>
<p>這兩個 pod 的非安全端口沒有開啟，健康檢查時報錯，但是由於本身服務是正常的，只是健康檢查的端口沒啟，所以不影響正常使用。</p>
<h4 id="Solution">Solution</h4>
<p>在所有 Master nodes 上修改下面檔案:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/kubernetes/manifests/kube-scheduler.yaml</span><br><span class="line">$ vim /etc/kubernetes/manifests/kube-controller-manager.yaml</span><br></pre></td></tr></table></figure>
<p>刪掉或註釋掉 <code>- --port=0</code> (spec-&gt;containers-&gt;command) 這行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo vi /etc/kubernetes/manifests/kube-controller-manager.yaml</span><br></pre></td></tr></table></figure>
<p>重啟 kubelet 服務</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl restart kubelet.service</span><br></pre></td></tr></table></figure>
<p>這時10251，10252端口就開啟了，健康檢查狀態也正常了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master1 ~]<span class="comment"># netstat -tulpn | grep &#x27;10251\|10252&#x27;</span></span><br><span class="line">tcp6       0      0 :::10251                :::*                    LISTEN      11863/kube-schedule</span><br><span class="line">tcp6       0      0 :::10252                :::*                    LISTEN      11902/kube-controll</span><br></pre></td></tr></table></figure>
<h6 id="Reference">Reference</h6>
<ul>
<li><a href="https://www.cnblogs.com/wuliping/p/13780147.html">https://www.cnblogs.com/wuliping/p/13780147.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>[Kubernetes] 架構, 節點及組件介紹</title>
    <url>/Kubernetes_basic/</url>
    <content><![CDATA[<h2 id="簡介">簡介</h2>
<p>官方定義:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Kubernetes is an open-source system for automating deployment, scaling, and management of containerized applications.</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>Kubernetes 又稱為 k8s，最初由 google 用 golang 開發而後釋出的專案。用於操作自動化容器，包括部署，調度和節點集群間擴展。</p>
<h2 id="架構">架構</h2>
<p><img src="https://imgur.com/0Innvot.png" alt=""><br>
上圖為一個簡易的 Kubernetes Cluster，通常一個 Cluster 中會有多個 Master 作為備援，但為了簡化我們只顯示一個。</p>
<h2 id="運作方式">運作方式</h2>
<p>使用者透過 User Command（kubectl）建立 Pod 時經過使用者身份的認證後，再將指令傳遞到 Master Node 中的 API Server，API Server 會把指令備份到 etcd 。接下來 controller-manager 會從 API Server 收到需要創建一個新的 Pod 的訊息，並檢查如果資源許可，就會建立一個新的 Pod。最後 Scheduler 在定期訪問 API Server 時，會詢問 controller-manager 是否有建置新的 Pod，如果發現新建立的 Pod 時，Scheduler 就會負責把 Pod 配送到最適合的一個 Node 上面。</p>
<h2 id="節點與組件">節點與組件</h2>
<h3 id="Master-Node">Master Node</h3>
<p>為 Kubernetes 叢集的控制台，負責管理集群、協調所有活動，包含的元件如下：</p>
<h4 id="API-Server">API Server</h4>
<p>API Server 管理 Kubernetes 的所有 api interface，用來和集群中的各節點通訊並進行操作。</p>
<h4 id="Scheduler">Scheduler</h4>
<p>Scheduler 是 Pods 調度員，監視新建立但還沒有被指定要跑在哪個 Worker Node 上的 Pod，並根據每個 Node 上面資源去協調出一個最適合放置的對象給該 Pod。</p>
<h4 id="Controller-Manager">Controller Manager</h4>
<p>負責管理並運行 Kubernetes controller 的組件，controller 是許多負責監視 Cluster 狀態的 Process，又可分為下列不同的種類</p>
<ul>
<li>Node controller - 負責通知與回應節點的狀態</li>
<li>Replication controller - 負責每個複寫系統內維持設定的 Pod 數量</li>
<li>End-Point controller - 負責端點的服務發布</li>
<li>Service Account &amp; Token controller - 負責創建服務帳戶與新生成的 Namespace 的 API 存取 Token</li>
</ul>
<h4 id="etcd">etcd</h4>
<p>用來存放 Kubernetes Cluster 的資料作為備份，當 Master 因為某些原因而故障時，我們可以透過 etcd 幫我們還原 Kubernetes 的狀態。</p>
<h3 id="Worker-Node">Worker Node</h3>
<p>為 Kubernetes 的 runtime 執行環境，包含的元件如下：</p>
<h4 id="Pod">Pod</h4>
<p>Kubernetes pod 是 Kubernetes 管理的最小單元，裡面包含一個或多個 container，可視為一個應用程式的邏輯主機。 同一個 Pod 中的 Containers 共享相同資源及網路，彼此透過 local port number 溝通。pod 運行在私有隔離的網絡上，默認情況下在同一集群的其他 pod 和 service 中可見，但是外部不可見，需要藉助 service 暴露給外部。</p>
<h4 id="Kubelet">Kubelet</h4>
<p>Kubelet 接受 API server 的命令，用來啟動 pod 並監測狀態，確保所有 container 都在運行。它每隔幾秒鐘向 master node 提供一次 heartbeat。如果 replication controller 未收到該消息，則將該節點標記為不正常。</p>
<h4 id="Kube-Proxy">Kube Proxy</h4>
<p>進行網路連線的 forwarding，負責將 request 轉發到正確的 container。</p>
<h6 id="Resource">Resource</h6>
<ul>
<li><a href="https://blog.sensu.io/how-kubernetes-works">https://blog.sensu.io/how-kubernetes-works</a></li>
<li><a href="https://medium.com/@C.W.Hu/kubernetes-basic-concept-tutorial-e033e3504ec0">https://medium.com/@C.W.Hu/kubernetes-basic-concept-tutorial-e033e3504ec0</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10202135">https://ithelp.ithome.com.tw/articles/10202135</a></li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>[Kubernetes] k8s v1.20 nfs-client-provisioner 創建 pvc 時停在 Pending</title>
    <url>/Kubernetes-v1.2-nfs-pvc-Pending/</url>
    <content><![CDATA[<p>上次將 K8s 集群從 1.7 升級到 1.20 之後，在創建 pvc 時，發現狀態會一直停留在 Pending，詳細資訊如下：</p>
<span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master1 telegraf]<span class="comment"># kubectl get pvc</span></span><br><span class="line">NAME   STATUS    VOLUME   CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class="line"><span class="built_in">test</span>   Pending                                      nfs            5s</span><br><span class="line">[root@master1 telegraf]<span class="comment"># kubectl describe pvc test</span></span><br><span class="line">Name:          <span class="built_in">test</span></span><br><span class="line">Namespace:     default</span><br><span class="line">StorageClass:  nfs</span><br><span class="line">Status:        Pending</span><br><span class="line">Volume:</span><br><span class="line">Labels:        &lt;none&gt;</span><br><span class="line">Annotations:   volume.beta.kubernetes.io/storage-provisioner: cluster.local/nfs-sc-0-nfs-client-provisioner</span><br><span class="line">Finalizers:    [kubernetes.io/pvc-protection]</span><br><span class="line">Capacity:</span><br><span class="line">Access Modes:</span><br><span class="line">VolumeMode:    Filesystem</span><br><span class="line">Used By:       &lt;none&gt;</span><br><span class="line">Events:</span><br><span class="line">  Type    Reason                Age                From                         Message</span><br><span class="line">  ----    ------                ----               ----                         -------</span><br><span class="line">  Normal  ExternalProvisioning  10s (x5 over 50s)  persistentvolume-controller  waiting <span class="keyword">for</span> a volume to be created, either                                                        by external provisioner <span class="string">&quot;cluster.local/nfs-sc-0-nfs-client-provisioner&quot;</span> or manually created by system administrator</span><br></pre></td></tr></table></figure>
<p>查了原因可能是因為 selfLink 為空，無法建立參考。<br>
Kubernetes v1.20 開始，根據 <a href="https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.20.md#other-cleanup-or-flake-2">change log</a> 說明，默認刪除了 metadata.selfLink 字段，然而部分應用仍然依賴於此功能，例如 nfs-client-provisioner。如果仍然要繼續使用這些應用，需要重新啟用selfLink。</p>
<h4 id="解決方式如下：">解決方式如下：</h4>
<p>修改 kube-apiserver 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/kubernetes/manifests/kube-apiserver.yaml</span><br></pre></td></tr></table></figure>
<p>在 command 下的參數加上 <code>--feature-gates=RemoveSelfLink=false</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">command:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">kube-apiserver</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--advertise-address=10.1.5.141</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--allow-privileged=true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--au...</span></span><br><span class="line">    <span class="string">.</span></span><br><span class="line">    <span class="string">.</span></span><br><span class="line">    <span class="string">.</span></span><br><span class="line">    <span class="string">**-</span> <span class="string">--feature-gates=RemoveSelfLink=false**</span></span><br></pre></td></tr></table></figure>
<p>儲存編輯後，kube-apiserver 便會自動重啟。</p>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>[Linux] LVM- 擴大根目錄 &amp; 移除 pv 碟</title>
    <url>/Linux-LVM-extend-root-remove-pv/</url>
    <content><![CDATA[<h3 id="前言">前言</h3>
<p>結果上次因為 LVM 分的根目錄空間不夠，仗著硬碟多就直接不管空間過剩的 /home，直接找一顆 sdc 掛在相同的根目錄 lv 中。後來系統打算拿一些硬碟做 RAID5，才發現我的系統碟(根目錄)用的是 sda 跟 sdc，跳過了 sdb，強迫症驅使下決定把 sdc 的 pv 移除!!</p>
<span id="more"></span>
<hr>
<h3 id="xfsdump">xfsdump</h3>
<p>XFS 是 CentOS 7 預裝的 OS 的檔案系統，在 LVM 中 XFS 只能擴大不能縮小，所以需要利用 xfsdump 備份資料。</p>
<p>目前掛載情況如下，預計把根目錄減掉 5.5T；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@pc100 /]# df -h</span><br><span class="line">Filesystem               Size  Used Avail Use% Mounted on</span><br><span class="line">devtmpfs                  95G     0   95G   0% /dev</span><br><span class="line">tmpfs                     95G     0   95G   0% /dev/shm</span><br><span class="line">tmpfs                     95G   11M   95G   1% /run</span><br><span class="line">tmpfs                     95G     0   95G   0% /sys/fs/cgroup</span><br><span class="line">/dev/mapper/centos-root   10T   53G  9.9T   1% /</span><br><span class="line">/dev/sda2               1014M  187M  828M  19% /boot</span><br><span class="line">/dev/sda1                200M   12M  189M   6% /boot/efi</span><br><span class="line">tmpfs                     19G     0   19G   0% /run/user/0</span><br><span class="line">/dev/mapper/centos-home  1.0T   33M  1.0T   1% /home</span><br><span class="line">/dev/sdb1                5.5T   33M  5.5T   1% /data</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="安裝xfsdump工具">安裝xfsdump工具</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ yum install xfsdump -y</span><br></pre></td></tr></table></figure>
<h3 id="備份根目錄">備份根目錄</h3>
<p>將根目錄備份到 <code>/data</code> 下。注意，<code>/data</code> 需與根目錄在不同硬碟，因為根目錄需重建。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@pc100 /]<span class="comment"># xfsdump -f /data/root.dump /</span></span><br><span class="line">xfsdump: using file dump (drive_simple) strategy</span><br><span class="line">xfsdump: version 3.1.7 (dump format 3.0) - <span class="built_in">type</span> ^C <span class="keyword">for</span> status and control</span><br><span class="line"></span><br><span class="line"> ============================= dump label dialog ==============================</span><br><span class="line"></span><br><span class="line">please enter label <span class="keyword">for</span> this dump session (timeout <span class="keyword">in</span> 300 sec)</span><br><span class="line"> -&gt; root_dump  <span class="comment">##### 指定備份會話標籤</span></span><br><span class="line">session label entered: <span class="string">&quot;root_dump&quot;</span></span><br><span class="line"></span><br><span class="line"> --------------------------------- end dialog ---------------------------------</span><br><span class="line"></span><br><span class="line">xfsdump: level 0 dump of pc100:/</span><br><span class="line">xfsdump: dump date: Fri Dec  4 03:42:56 2020</span><br><span class="line">xfsdump: session id: 4d68cf3f-ea74-46cb-bf06-dc205f92309a</span><br><span class="line">xfsdump: session label: <span class="string">&quot;root_dump&quot;</span></span><br><span class="line">xfsdump: ino map phase 1: constructing initial dump list</span><br><span class="line">xfsdump: ino map phase 2: skipping (no pruning necessary)</span><br><span class="line">xfsdump: ino map phase 3: skipping (only one dump stream)</span><br><span class="line">xfsdump: ino map construction complete</span><br><span class="line">xfsdump: estimated dump size: 56621816960 bytes</span><br><span class="line">xfsdump: /var/lib/xfsdump/inventory created</span><br><span class="line"></span><br><span class="line"> ============================= media label dialog =============================</span><br><span class="line"></span><br><span class="line">please enter label <span class="keyword">for</span> media <span class="keyword">in</span> drive 0 (timeout <span class="keyword">in</span> 300 sec)</span><br><span class="line"> -&gt; root</span><br><span class="line">media label entered: <span class="string">&quot;root&quot;</span> <span class="comment">#### 指定設備標籤，就是對要備份的設備做一個描述</span></span><br><span class="line"></span><br><span class="line"> --------------------------------- end dialog ---------------------------------</span><br><span class="line"></span><br><span class="line">xfsdump: creating dump session media file 0 (media 0, file 0)</span><br><span class="line">xfsdump: dumping ino map</span><br><span class="line">xfsdump: dumping directories</span><br><span class="line">xfsdump: dumping non-directory files</span><br><span class="line">xfsdump: ending media file</span><br><span class="line">xfsdump: media file size 56380840688 bytes</span><br><span class="line">xfsdump: dump size (non-dir files) : 56341771264 bytes</span><br><span class="line">xfsdump: dump complete: 973 seconds elapsed</span><br><span class="line">xfsdump: Dump Summary:</span><br><span class="line">xfsdump:   stream 0 /data/root.dump OK (success)</span><br><span class="line">xfsdump: Dump Status: SUCCESS</span><br><span class="line">[root@pc100 /]<span class="comment">#</span></span><br><span class="line">[root@pc100 /]<span class="comment">#</span></span><br><span class="line">[root@pc100 /]<span class="comment"># ll -h /data/root.dump</span></span><br><span class="line">-rw-r--r--. 1 root root 53G Dec  4 03:59 /data/root.dump</span><br></pre></td></tr></table></figure>
<h3 id="進入-Rescue-Mode">進入 Rescue Mode</h3>
<p>使用安裝光碟，重開機後進入 <code>Rescue Mode</code>。<br>
<img src="https://imgur.com/TTuTYmD.png" alt=""><br>
<img src="https://imgur.com/hD802Pc.png" alt=""><br>
進入後按 <code>3</code> 進入 Shell。<br>
<img src="https://imgur.com/y6uAHJG.png" alt=""></p>
<h3 id="縮容">縮容</h3>
<p>輸入 lvm 進入 lvm 界面。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh-4.2# lvm    # 進入 lvm</span><br><span class="line">lvm&gt; pvs       # 依次掃描 pv, vg, lv</span><br><span class="line">lvm&gt; vgs</span><br><span class="line">lvm&gt; lvs</span><br><span class="line">lvm&gt; lvchange -ay /dev/mapper/centos-root # 啟用根目錄所在的 lv，-a 是啟用 y 是 yes，需啟用 (allocatable=YES) 才能在 shell 中使用該 lv。</span><br><span class="line">lvm&gt; quit      # 返回 shell</span><br></pre></td></tr></table></figure>
<p>縮小根目錄的 lv。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh-4.2# lvreduce -L 4T /dev/mapper/centos-root</span><br><span class="line">sh-4.2# pvs    # 可以發現已經有空間釋出</span><br><span class="line">sh-4.2# vgs</span><br><span class="line">sh-4.2# lvs</span><br></pre></td></tr></table></figure>
<p>開始移除 pv</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh-4.2# pvmove /dev/sdc1           # 需要看到 no data to move for xxx，非常重要，否則會造成數據遺失</span><br><span class="line">sh-4.2# pvchange -xn /dev/sdc1     # 註銷</span><br><span class="line">sh-4.2# pvdisplay                  # 可以發現 /dev/sdc1 的 allocatable 的值為 NO</span><br><span class="line">sh-4.2# vgreduce centos /dev/sdc1  # 將 pv 從 vg 中刪除</span><br><span class="line">sh-4.2# pvremove /dev/sdc1         # 刪除 pv</span><br></pre></td></tr></table></figure>
<h3 id="重新格式化根目錄">重新格式化根目錄</h3>
<p>將 /dev/mapper/centos-root 進行 xfs 格式化，並重新掛載</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh-4.2# mkfs.xfs /dev/mapper/centos-root</span><br><span class="line">sh-4.2# mount /dev/mapper/centos-root /</span><br><span class="line">sh-4.2# xfsrestore /data/root.dump /</span><br></pre></td></tr></table></figure>
<p>離開 shell 重新開機即可。</p>
<h6 id="Reference">Reference</h6>
<ul>
<li><a href="https://www.dotblogs.com.tw/I_know_why_I_am/2020/10/01/042546">https://www.dotblogs.com.tw/I_know_why_I_am/2020/10/01/042546</a></li>
</ul>
<hr>
<p>不負責聲明；；；；</p>
<p>中間不小心迷失方向失敗了，又不好恢復做之前的原狀，就索性重灌了。把前三個硬碟 (sda,sdb,sdc) 都拉進系統碟，重灌結束後發現根目錄一樣分配的很少，其他空間都放到 /home 下面了。所以要乖乖地:</p>
<ul>
<li>把 /home 縮小</li>
<li>刪除不要用的 pv</li>
<li>最後挪剩下的空間給根目錄</li>
<li>重建兩個目錄的檔案系統</li>
</ul>
<h4 id="備份-home">備份 /home</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ tar -zcvf /tmp/home.tar.gz /home</span><br></pre></td></tr></table></figure>
<h4 id="卸載-home">卸載 /home</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ umount /home</span><br></pre></td></tr></table></figure>
<h4 id="減少-dev-mapper-centos-home-的-lv-大小">減少 /dev/mapper/centos-home 的 lv 大小</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ lvreduce -L 100G /dev/mapper/centos-home</span><br></pre></td></tr></table></figure>
<h4 id="移除-pv">移除 pv</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pvmove /dev/sdc1           # 需要看到 no data to move for xxx，非常重要，否則會造成數據遺失</span><br><span class="line">$ pvchange -xn /dev/sdc1     # 註銷</span><br><span class="line">$ pvdisplay                  # 可以發現 /dev/sdc1 的 allocatable 的值為 NO</span><br><span class="line">$ vgreduce centos /dev/sdc1  # 將 pv 從 vg 中刪除</span><br><span class="line">$ pvremove /dev/sdc1         # 刪除 pv</span><br></pre></td></tr></table></figure>
<h4 id="重建-file-system">重建 file system</h4>
<p>擴展根目錄並擴大文件系統</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ lvextend -l +100%FREE /dev/mapper/centos-root</span><br><span class="line">$ xfs_growfs /dev/mapper/centos-root</span><br></pre></td></tr></table></figure>
<p>重建 /home 目錄並掛載再還原</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mkfs.xfs -f /dev/mapper/centos-home</span><br><span class="line">$ mount /dev/mapper/centos-home /home/</span><br><span class="line">$ tar -zxvf /tmp/home.tar.gz -C /home/</span><br><span class="line">$ rm -rf /tmp/home.tar.gz</span><br></pre></td></tr></table></figure>
<h6 id="Reference-2">Reference</h6>
<ul>
<li><a href="https://blog.csdn.net/weixin_38850930/article/details/106805131">https://blog.csdn.net/weixin_38850930/article/details/106805131</a></li>
</ul>
]]></content>
      <categories>
        <category>OS</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>LVM</tag>
      </tags>
  </entry>
  <entry>
    <title>佈署 LAMP (Apache + MariaDB + PHP Web Server on Linux)</title>
    <url>/LAMP-Apache-MariaDB-PHP-on-Linux/</url>
    <content><![CDATA[<h2 id="系統環境">系統環境</h2>
<ul>
<li>CentOS 7.9</li>
<li>PHP 7.2.34</li>
<li>Apache/2.4.6</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@ewrula ~]# httpd -v</span><br><span class="line">Server version: Apache/2.4.6 (CentOS)</span><br><span class="line">Server built:   Jan 25 2022 14:08:43</span><br></pre></td></tr></table></figure>
<ul>
<li>MariaDB 5.5.68</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@ewrula ~]# mysql -V</span><br><span class="line">mysql Ver 15.1 Distrib 5.5.68-MariaDB, for Linux (x86_64) using readline 5.1</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="安裝">安裝</h2>
<h3 id="Apache">Apache</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y httpd</span><br><span class="line">systemctl start httpd</span><br><span class="line">systemctl <span class="built_in">enable</span> httpd</span><br></pre></td></tr></table></figure>
<p>安裝完畢並啟動後 Apache 已經可以存取了</p>
<p><img src="https://imgur.com/I2Y1EXP.png" alt=""></p>
<h3 id="MariaDB">MariaDB</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install mariadb-server mariadb</span><br><span class="line">systemctl start mariadb</span><br><span class="line">systemctl <span class="built_in">enable</span> mariadb</span><br></pre></td></tr></table></figure>
<p>設定 MariaDB 的 root 密碼：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin/mysql_secure_installation</span><br></pre></td></tr></table></figure>
<p>會跳出提示，預設是空密碼，故請按照指示 enter for none</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Enter current password <span class="keyword">for</span> root (enter <span class="keyword">for</span> none):</span><br><span class="line">OK, successfully used password, moving on...</span><br><span class="line"></span><br><span class="line">Setting the root password ensures that nobody can <span class="built_in">log</span> into the MariaDB</span><br><span class="line">root user without the proper authorization.</span><br><span class="line"></span><br><span class="line">New password: password</span><br><span class="line">Re-enter new password: password</span><br><span class="line">Password updated successfully!</span><br><span class="line">Reloading privilege tables..</span><br><span class="line"> ... Success!</span><br></pre></td></tr></table></figure>
<p>測試連線 MariaDB：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>
<h3 id="php-7-2">php 7.2</h3>
<p>目前 php 最高的穩定版本是 7.2，若直接採用 CentOS 中的 yum 安裝 <code>yum -y install php</code>，版本是5.4，因此需要手動更新 rpm。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm  </span><br><span class="line">rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</span><br></pre></td></tr></table></figure>
<p>7.2 版本名為 72w，除了 php 庫外還需安裝其他常用套件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install php72w php72w-bcmath php72w-cli php72w-common php72w-dba php72w-devel php72w-embedded php72w-enchant php72w-fpm php72w-gd php72w-imap php72w-interbase php72w-intl php72w-ldap php72w-mbstring php72w-mcrypt php72w-mysqlnd php72w-odbc php72w-opcache php72w-pdo php72w-pdo_dblib php72w-pear php72w-pecl-apcu php72w-pecl-apcu-devel php72w-pecl-imagick php72w-pecl-imagick-devel php72w-pecl-xdebug php72w-pgsql php72w-phpdbg php72w-process php72w-pspell php72w-recode php72w-snmp php72w-soap php72w-tidy php72w-xml php72w-xmlrpc</span><br></pre></td></tr></table></figure>
<p>查看已安裝套件:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@ewrula ~]# php -m</span><br><span class="line">[PHP Modules]</span><br><span class="line">apcu</span><br><span class="line">bcmath</span><br><span class="line">bz2</span><br><span class="line">calendar</span><br><span class="line">Core</span><br><span class="line">ctype</span><br><span class="line">curl</span><br><span class="line">date</span><br><span class="line">dba</span><br><span class="line">dom</span><br><span class="line">enchant</span><br><span class="line">exif</span><br><span class="line">fileinfo</span><br><span class="line">filter</span><br><span class="line">ftp</span><br><span class="line">gd</span><br><span class="line">gettext</span><br><span class="line">gmp</span><br><span class="line">hash</span><br><span class="line">iconv</span><br><span class="line">imagick</span><br><span class="line">imap</span><br><span class="line">interbase</span><br><span class="line">intl</span><br><span class="line">json</span><br><span class="line">ldap</span><br><span class="line">libxml</span><br><span class="line">mbstring</span><br><span class="line">mysqli</span><br><span class="line">mysqlnd</span><br><span class="line">odbc</span><br><span class="line">openssl</span><br><span class="line">pcntl</span><br><span class="line">pcre</span><br><span class="line">PDO</span><br><span class="line">pdo_dblib</span><br><span class="line">PDO_Firebird</span><br><span class="line">pdo_mysql</span><br><span class="line">PDO_ODBC</span><br><span class="line">pdo_pgsql</span><br><span class="line">pdo_sqlite</span><br><span class="line">pgsql</span><br><span class="line">Phar</span><br><span class="line">posix</span><br><span class="line">pspell</span><br><span class="line">readline</span><br><span class="line">recode</span><br><span class="line">Reflection</span><br><span class="line">session</span><br><span class="line">shmop</span><br><span class="line">SimpleXML</span><br><span class="line">snmp</span><br><span class="line">soap</span><br><span class="line">sockets</span><br><span class="line">SPL</span><br><span class="line">sqlite3</span><br><span class="line">standard</span><br><span class="line">sysvmsg</span><br><span class="line">sysvsem</span><br><span class="line">sysvshm</span><br><span class="line">tidy</span><br><span class="line">tokenizer</span><br><span class="line">wddx</span><br><span class="line">xdebug</span><br><span class="line">xml</span><br><span class="line">xmlreader</span><br><span class="line">xmlrpc</span><br><span class="line">xmlwriter</span><br><span class="line">xsl</span><br><span class="line">Zend OPcache</span><br><span class="line">zip</span><br><span class="line">zlib</span><br><span class="line"></span><br><span class="line">[Zend Modules]</span><br><span class="line">Xdebug</span><br><span class="line">Zend OPcache</span><br><span class="line"></span><br><span class="line">[root@ewrula ~]#</span><br></pre></td></tr></table></figure>
<h2 id="配置">配置</h2>
<h3 id="設定防火牆">設定防火牆</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --permanent --add-port=80/tcp</span><br><span class="line">firewall-cmd --zone=public --permanent --add-port=443/tcp</span><br><span class="line">service firewalld restart</span><br></pre></td></tr></table></figure>
<h3 id="設定-apache-conf-檔">設定 apache conf 檔</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/httpd/conf/httpd.conf</span><br></pre></td></tr></table></figure>
<p>主要要設定網頁路徑所在，詳細的設定項說明可以參考鳥哥的<a href="https://linux.vbird.org/linux_server/redhat6.1/linux_26wwwapache.php">文章</a></p>
<h3 id="權限設定">權限設定</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chown -R apache.apache /var/www/blog</span><br><span class="line">chmod -R 755 /var/www/blog</span><br><span class="line">sudo chcon -t httpd_sys_rw_content_t /var/www/blog -R</span><br></pre></td></tr></table></figure>
<h3 id="重啟-server">重啟 server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart httpd</span><br></pre></td></tr></table></figure>
<h2 id="解決-QueryException-2002-SQLSTATE-HY000-2002-Permission-denied-的錯誤">解決 QueryException (2002) SQLSTATE[HY000] [2002] Permission denied 的錯誤</h2>
<p>這是 SELinux 對 httpd 運行服務的安全控管機制，請先查詢 httpd 運行時的設定</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">getsebool -a | grep httpd</span><br></pre></td></tr></table></figure>
<p>如果 httpd_can_network_connect_db 的設定是 Off (關閉)，請透過下列指令予以開啟</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">setsebool -P httpd_can_network_connect_db 1</span><br></pre></td></tr></table></figure>
<p>執行過程：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ewrula ewr]<span class="comment"># getsebool -a | grep httpd</span></span><br><span class="line">httpd_anon_write --&gt; off</span><br><span class="line">httpd_builtin_scripting --&gt; on</span><br><span class="line">httpd_can_check_spam --&gt; off</span><br><span class="line">httpd_can_connect_ftp --&gt; off</span><br><span class="line">httpd_can_connect_ldap --&gt; off</span><br><span class="line">httpd_can_connect_mythtv --&gt; off</span><br><span class="line">httpd_can_connect_zabbix --&gt; off</span><br><span class="line">httpd_can_network_connect --&gt; off</span><br><span class="line">httpd_can_network_connect_cobbler --&gt; off</span><br><span class="line">httpd_can_network_connect_db --&gt; off</span><br><span class="line">httpd_can_network_memcache --&gt; off</span><br><span class="line">httpd_can_network_relay --&gt; off</span><br><span class="line">httpd_can_sendmail --&gt; off</span><br><span class="line">httpd_dbus_avahi --&gt; off</span><br><span class="line">httpd_dbus_sssd --&gt; off</span><br><span class="line">httpd_dontaudit_search_dirs --&gt; off</span><br><span class="line">httpd_enable_cgi --&gt; on</span><br><span class="line">httpd_enable_ftp_server --&gt; off</span><br><span class="line">httpd_enable_homedirs --&gt; off</span><br><span class="line">httpd_execmem --&gt; off</span><br><span class="line">httpd_graceful_shutdown --&gt; on</span><br><span class="line">httpd_manage_ipa --&gt; off</span><br><span class="line">httpd_mod_auth_ntlm_winbind --&gt; off</span><br><span class="line">httpd_mod_auth_pam --&gt; off</span><br><span class="line">httpd_read_user_content --&gt; off</span><br><span class="line">httpd_run_ipa --&gt; off</span><br><span class="line">httpd_run_preupgrade --&gt; off</span><br><span class="line">httpd_run_stickshift --&gt; off</span><br><span class="line">httpd_serve_cobbler_files --&gt; off</span><br><span class="line">httpd_setrlimit --&gt; off</span><br><span class="line">httpd_ssi_exec --&gt; off</span><br><span class="line">httpd_sys_script_anon_write --&gt; off</span><br><span class="line">httpd_tmp_exec --&gt; off</span><br><span class="line">httpd_tty_comm --&gt; off</span><br><span class="line">httpd_unified --&gt; off</span><br><span class="line">httpd_use_cifs --&gt; off</span><br><span class="line">httpd_use_fusefs --&gt; off</span><br><span class="line">httpd_use_gpg --&gt; off</span><br><span class="line">httpd_use_nfs --&gt; off</span><br><span class="line">httpd_use_openstack --&gt; off</span><br><span class="line">httpd_use_sasl --&gt; off</span><br><span class="line">httpd_verify_dns --&gt; off</span><br><span class="line">[root@ewrula ewr]<span class="comment"># setsebool -P httpd_can_network_connect_db 1</span></span><br><span class="line">[root@ewrula ewr]<span class="comment">#</span></span><br><span class="line">[root@ewrula ewr]<span class="comment">#</span></span><br><span class="line">[root@ewrula ewr]<span class="comment">#</span></span><br><span class="line">[root@ewrula ewr]<span class="comment"># getsebool -a | grep httpd</span></span><br><span class="line">httpd_anon_write --&gt; off</span><br><span class="line">httpd_builtin_scripting --&gt; on</span><br><span class="line">httpd_can_check_spam --&gt; off</span><br><span class="line">httpd_can_connect_ftp --&gt; off</span><br><span class="line">httpd_can_connect_ldap --&gt; off</span><br><span class="line">httpd_can_connect_mythtv --&gt; off</span><br><span class="line">httpd_can_connect_zabbix --&gt; off</span><br><span class="line">httpd_can_network_connect --&gt; off</span><br><span class="line">httpd_can_network_connect_cobbler --&gt; off</span><br><span class="line">httpd_can_network_connect_db --&gt; on</span><br><span class="line">httpd_can_network_memcache --&gt; off</span><br><span class="line">httpd_can_network_relay --&gt; off</span><br><span class="line">httpd_can_sendmail --&gt; off</span><br><span class="line">httpd_dbus_avahi --&gt; off</span><br><span class="line">httpd_dbus_sssd --&gt; off</span><br><span class="line">httpd_dontaudit_search_dirs --&gt; off</span><br><span class="line">httpd_enable_cgi --&gt; on</span><br><span class="line">httpd_enable_ftp_server --&gt; off</span><br><span class="line">httpd_enable_homedirs --&gt; off</span><br><span class="line">httpd_execmem --&gt; off</span><br><span class="line">httpd_graceful_shutdown --&gt; on</span><br><span class="line">httpd_manage_ipa --&gt; off</span><br><span class="line">httpd_mod_auth_ntlm_winbind --&gt; off</span><br><span class="line">httpd_mod_auth_pam --&gt; off</span><br><span class="line">httpd_read_user_content --&gt; off</span><br><span class="line">httpd_run_ipa --&gt; off</span><br><span class="line">httpd_run_preupgrade --&gt; off</span><br><span class="line">httpd_run_stickshift --&gt; off</span><br><span class="line">httpd_serve_cobbler_files --&gt; off</span><br><span class="line">httpd_setrlimit --&gt; off</span><br><span class="line">httpd_ssi_exec --&gt; off</span><br><span class="line">httpd_sys_script_anon_write --&gt; off</span><br><span class="line">httpd_tmp_exec --&gt; off</span><br><span class="line">httpd_tty_comm --&gt; off</span><br><span class="line">httpd_unified --&gt; off</span><br><span class="line">httpd_use_cifs --&gt; off</span><br><span class="line">httpd_use_fusefs --&gt; off</span><br><span class="line">httpd_use_gpg --&gt; off</span><br><span class="line">httpd_use_nfs --&gt; off</span><br><span class="line">httpd_use_openstack --&gt; off</span><br><span class="line">httpd_use_sasl --&gt; off</span><br><span class="line">httpd_verify_dns --&gt; off</span><br><span class="line">[root@ewrula ewr]<span class="comment"># systemctl restart httpd</span></span><br></pre></td></tr></table></figure>
<h2 id="Reference">Reference</h2>
<ul>
<li><a href="https://ithelp.ithome.com.tw/questions/10186688">https://ithelp.ithome.com.tw/questions/10186688</a></li>
</ul>
]]></content>
      <categories>
        <category>Programming</category>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>[Linux] LVM</title>
    <url>/Linux-LVM/</url>
    <content><![CDATA[<p>LVM (Logical Volume Manager) 邏輯磁碟管理器，是 Linux 系統 kernel 所提供的功能，在硬碟的分割區上建立邏輯層，可以彈性調整磁碟、分割區與檔案系統的大小。</p>
<span id="more"></span>
<h3 id="LVM-層級">LVM 層級</h3>
<p>將實體分割區變成 Physical Volume (PV)，由 PV 組成虛擬硬碟 Virtual Group (VG)，VG 可以分割成數個虛擬分割區 Logical Volume (LV)，然後在 LV 上建立檔案系統，可以當成一般檔案系統使用。<br>
<img src="https://imgur.com/Kd6bDCl.png" alt=""></p>
<h3 id="LVM-實作">LVM 實作</h3>
<ul>
<li>安裝</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ yum install -y lvm2</span><br></pre></td></tr></table></figure>
<ul>
<li>列出磁碟資訊</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ fdisk -l</span><br></pre></td></tr></table></figure>
<ul>
<li>分割磁碟</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ fdisk /dev/sdb</span><br></pre></td></tr></table></figure>
<p>進入對話框後，依提示作相對應的選擇。</p>
<ol>
<li>n # 開始分割</li>
<li>按 enter # default is p for primary</li>
<li>按 enter # 預設分一區</li>
<li>按 enter # 預設開頭可行的磁區</li>
<li>按 enter # 預設結尾可行的磁區</li>
<li>t # 更動型態</li>
<li>輸入 LVM 的 Hex Code 8e00</li>
<li>w # 寫入磁區設定並離開</li>
</ol>
<p>更新 Linux Kernel 分割表資訊</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ partprobe</span><br></pre></td></tr></table></figure>
<ul>
<li>建立 Pysical Volume (PV)<br>
使用 <code>pvcreate</code> 標記指定磁碟分區為要使用的 LVM PV。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pvcreate /dev/sdb1</span><br><span class="line">$ pvcreate /dev/sdb1 /dev/sdc1 # 或建立多個 pv</span><br></pre></td></tr></table></figure>
<ul>
<li>建立 Virtual Group (VG)</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vgcreate vgName /dev/sdb1</span><br><span class="line"></span><br><span class="line"># 或多個 PV 建成一個 VG</span><br><span class="line">$ vgcreate vgName /dev/sdb1 /dev/sdc1</span><br></pre></td></tr></table></figure>
<ul>
<li>建立 Logical Volume (LV)
<ul>
<li>-n (to set the LV name)</li>
<li>-L (LV Size in bytes)</li>
<li>the VG name for the LV</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ lvcreate -n lvName -L 100M vgName</span><br></pre></td></tr></table></figure>
<p>查詢已建立虛擬磁區</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ lvdisplay</span><br></pre></td></tr></table></figure>
<div class="info">
<p>不同的工具會使用不同的 LV 路徑，傳統名稱 /dev/vgName/lvName 或 kernel device mapper 名稱 /dev/mapper/vgname-lvname。</p>
</div>
<ul>
<li>格式化虛擬磁區<br>
格式化為 xfs 文件系統</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mkfs.xfs /dev/vgName/lvName</span><br></pre></td></tr></table></figure>
<ul>
<li>掛載<br>
在目錄中創建新的 LV，再將磁區掛載上去。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mkdir data</span><br><span class="line">$ mount /dev/vgName/lvName /data</span><br></pre></td></tr></table></figure>
<p>確認一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ df -h</span><br></pre></td></tr></table></figure>
<p>把 mount point 記錄到 fstab 檔案下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vi /etc/fstab</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/dev/vgName/lvName    /data    xfs    defaults    0   0</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<h3 id="把原有的-lvm-目錄增大">把原有的 lvm 目錄增大</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 擴大 LV</span><br><span class="line">$　lvextend -L +1T /dev/vgName/lvName</span><br><span class="line"># 擴大檔案系統</span><br><span class="line">$ resize2fs /dev/vgName/lvName</span><br></pre></td></tr></table></figure>
<h5 id="Reference">Reference</h5>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/%E9%82%8F%E8%BC%AF%E6%8D%B2%E8%BB%B8%E7%AE%A1%E7%90%86%E5%93%A1">https://zh.wikipedia.org/wiki/邏輯捲軸管理員</a></li>
<li><a href="https://www.sysonion.de/centos-logical-volume-management-lvm/">https://www.sysonion.de/centos-logical-volume-management-lvm/</a></li>
<li><a href="https://sc8log.blogspot.com/2017/03/linux-lvm-lvm.html">https://sc8log.blogspot.com/2017/03/linux-lvm-lvm.html</a></li>
</ul>
]]></content>
      <categories>
        <category>OS</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>LVM</tag>
      </tags>
  </entry>
  <entry>
    <title>[Linux] 分割 &amp; 格式化 &amp; 掛載硬碟</title>
    <url>/Linux-disk-format/</url>
    <content><![CDATA[<p>新硬碟放入機器後要做三件事情，分割、格式化、掛載，才可以開始儲存資料；</p>
<span id="more"></span>
<h3 id="查看硬碟狀態">查看硬碟狀態</h3>
<p>查看目前電腦中的硬碟</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ root@srv1:/# ls /dev/sd*</span><br><span class="line">/dev/sda  /dev/sda1  /dev/sda2  /dev/sdb  /dev/sdc</span><br></pre></td></tr></table></figure>
<p>列出目前系統硬碟掛載狀態</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ df -h</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@srv1:/# df -h</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">udev             32G     0   32G   0% /dev</span><br><span class="line">tmpfs           6.3G  2.2M  6.3G   1% /run</span><br><span class="line">/dev/sda2       458G   36G  399G   9% /</span><br><span class="line">tmpfs            32G     0   32G   0% /dev/shm</span><br><span class="line">tmpfs           5.0M     0  5.0M   0% /run/lock</span><br><span class="line">tmpfs            32G     0   32G   0% /sys/fs/cgroup</span><br><span class="line">tmpfs           6.3G     0  6.3G   0% /run/user/1000</span><br></pre></td></tr></table></figure>
<h3 id="硬碟分割類型">硬碟分割類型</h3>
<p>硬碟分割有兩種模式：</p>
<ol>
<li>傳統 BIOS/MBR</li>
<li>新型 UEFI/GPT (目前有圖形介面的 BIOS 皆屬之)</li>
</ol>
<h4 id="BIOS-MBR">BIOS/MBR</h4>
<p>主開機紀錄（Master Boot Record，MBR）是電腦開機後存取硬碟時首先會讀取的第一個磁區。<br>
開機過程是 BIOS → MBR → 啟動 OS。</p>
<h4 id="UEFI-GPT">UEFI/GPT</h4>
<p>統一可延伸韌體介面（Unified Extensible Firmware Interface，UEFI），傳統 BIOS 的改良，GPT（GUID Partition Table）就是取代 MBR 的新的磁碟分割表。<br>
開機過程是 UEFI → GPT → 啟動 OS。</p>
<h2 id="進入正題">進入正題</h2>
<h3 id="分割">分割</h3>
<h4 id="小於-2TB-硬碟用-MBR">小於 2TB 硬碟用 MBR</h4>
<p>使用 <code>fdisk</code> 分割，後面接要分割的硬碟。進入後下 <code>m</code> 列出指令簡介；</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">root@srv1:/<span class="comment"># fdisk /dev/sdb</span></span><br><span class="line"></span><br><span class="line">Welcome to fdisk (util-linux 2.34).</span><br><span class="line">Changes will remain <span class="keyword">in</span> memory only, until you decide to write them.</span><br><span class="line">Be careful before using the write <span class="built_in">command</span>.</span><br><span class="line"></span><br><span class="line">Device does not contain a recognized partition table.</span><br><span class="line">Created a new DOS disklabel with disk identifier 0x587447ca.</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): m</span><br><span class="line"></span><br><span class="line">Help:</span><br><span class="line"></span><br><span class="line">  DOS (MBR)</span><br><span class="line">   a   toggle a bootable flag</span><br><span class="line">   b   edit nested BSD disklabel</span><br><span class="line">   c   toggle the dos compatibility flag</span><br><span class="line"></span><br><span class="line">  Generic</span><br><span class="line">   d   delete a partition</span><br><span class="line">   F   list free unpartitioned space</span><br><span class="line">   l   list known partition types</span><br><span class="line">   n   add a new partition</span><br><span class="line">   p   <span class="built_in">print</span> the partition table</span><br><span class="line">   t   change a partition <span class="built_in">type</span></span><br><span class="line">   v   verify the partition table</span><br><span class="line">   i   <span class="built_in">print</span> information about a partition</span><br><span class="line"></span><br><span class="line">  Misc</span><br><span class="line">   m   <span class="built_in">print</span> this menu</span><br><span class="line">   u   change display/entry units</span><br><span class="line">   x   extra functionality (experts only)</span><br><span class="line"></span><br><span class="line">  Script</span><br><span class="line">   I   load disk layout from sfdisk script file</span><br><span class="line">   O   dump disk layout to sfdisk script file</span><br><span class="line"></span><br><span class="line">  Save &amp; Exit</span><br><span class="line">   w   write table to disk and <span class="built_in">exit</span></span><br><span class="line">   q   quit without saving changes</span><br><span class="line"></span><br><span class="line">  Create a new label</span><br><span class="line">   g   create a new empty GPT partition table</span><br><span class="line">   G   create a new empty SGI (IRIX) partition table</span><br><span class="line">   o   create a new empty DOS partition table</span><br><span class="line">   s   create a new empty Sun partition table</span><br></pre></td></tr></table></figure>
<p>使用 <code>p</code> 印出目前已被分隔的硬碟，使用 <code>n</code> 開始分割，因為只要分割一個，所以一直按 enter 保持預設選項。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Command (m for help): p</span><br><span class="line">Disk /dev/sdb: 465.78 GiB, 500107862016 bytes, 976773168 sectors</span><br><span class="line">Disk model: ST3500418AS</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel type: dos</span><br><span class="line">Disk identifier: 0x587447ca</span><br><span class="line"></span><br><span class="line">Command (m for help): n</span><br><span class="line">Partition type</span><br><span class="line">   p   primary (0 primary, 0 extended, 4 free)</span><br><span class="line">   e   extended (container for logical partitions)</span><br><span class="line">Select (default p):</span><br><span class="line"></span><br><span class="line">Using default response p.</span><br><span class="line">Partition number (1-4, default 1):</span><br><span class="line">First sector (2048-976773167, default 2048):</span><br><span class="line">Last sector, +/-sectors or +/-size&#123;K,M,G,T,P&#125; (2048-976773167, default 976773167):</span><br><span class="line"></span><br><span class="line">Created a new partition 1 of type &#x27;Linux&#x27; and of size 465.8 GiB.</span><br></pre></td></tr></table></figure>
<p>最後記得下 <code>w</code> 使分割生效。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Command (m for help): w</span><br><span class="line">The partition table has been altered.</span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line">Syncing disks.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="大於-2TB-硬碟用-GPT">大於 2TB 硬碟用 GPT</h4>
<p>因為手邊沒有大於 2T 的硬碟，這邊列出進入的畫面以及用法，大致上跟 fdisk 差不多。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@srv1:/# gdisk /dev/sdb</span><br><span class="line">GPT fdisk (gdisk) version 1.0.5</span><br><span class="line"></span><br><span class="line">Partition table scan:</span><br><span class="line">  MBR: not present</span><br><span class="line">  BSD: not present</span><br><span class="line">  APM: not present</span><br><span class="line">  GPT: not present</span><br><span class="line"></span><br><span class="line">Creating new GPT entries.</span><br><span class="line"></span><br><span class="line">Command (? for help): ?</span><br><span class="line">b       back up GPT data to a file</span><br><span class="line">c       change a partition&#x27;s name</span><br><span class="line">d       delete a partition</span><br><span class="line">i       show detailed information on a partition</span><br><span class="line">l       list known partition types</span><br><span class="line">n       add a new partition</span><br><span class="line">o       create a new empty GUID partition table (GPT)</span><br><span class="line">p       print the partition table</span><br><span class="line">q       quit without saving changes</span><br><span class="line">r       recovery and transformation options (experts only)</span><br><span class="line">s       sort partitions</span><br><span class="line">t       change a partition&#x27;s type code</span><br><span class="line">v       verify disk</span><br><span class="line">w       write table to disk and exit</span><br><span class="line">x       extra functionality (experts only)</span><br><span class="line">?       print this menu</span><br></pre></td></tr></table></figure>
<h3 id="格式化">格式化</h3>
<p>格式化意即建置檔案系統 (make filesystem)，使用 mkfs 指令，按下 tab 鍵後可以發現有許多可以指定的檔案系統，最常用的是 ext4 以及 xfs。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@srv1:/# mkfs</span><br><span class="line">mkfs         mkfs.btrfs   mkfs.ext2    mkfs.ext4    mkfs.minix   mkfs.ntfs    mkfs.xfs</span><br><span class="line">mkfs.bfs     mkfs.cramfs  mkfs.ext3    mkfs.fat     mkfs.msdos   mkfs.vfat</span><br></pre></td></tr></table></figure>
<p>以下將使用 ext4 來格式化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@srv1:/# mkfs.ext4 [option] 硬碟名稱</span><br><span class="line">選項與參數：</span><br><span class="line">-b  ：設定 block 的大小，有 1K, 2K, 4K 的容量。</span><br><span class="line">-I  ：inode-size，指定 inode 大小。</span><br><span class="line">等等的還有很多參數，默認配置文件在 /etc/mke2fs.conf 設置。</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@srv1:/# mkfs.ext4 /dev/sdb1</span><br><span class="line">mke2fs 1.45.5 (07-Jan-2020)</span><br><span class="line">Creating filesystem with 122096385 4k blocks and 30531584 inodes</span><br><span class="line">Filesystem UUID: 06b9962b-ce9e-486c-9038-110d89564419</span><br><span class="line">Superblock backups stored on blocks:</span><br><span class="line">        32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208,</span><br><span class="line">        4096000, 7962624, 11239424, 20480000, 23887872, 71663616, 78675968,</span><br><span class="line">        102400000</span><br><span class="line"></span><br><span class="line">Allocating group tables: done</span><br><span class="line">Writing inode tables: done</span><br><span class="line">Creating journal (262144 blocks): done</span><br><span class="line">Writing superblocks and filesystem accounting information: done</span><br><span class="line"></span><br><span class="line">root@srv1:/#</span><br></pre></td></tr></table></figure>
<h3 id="掛載硬碟">掛載硬碟</h3>
<p>在 Linux 下面的磁碟掛載設定都是寫在 <code>/etc/fstab</code> 中，先看一下裡面內容；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># /etc/fstab: static file system information.</span><br><span class="line">#</span><br><span class="line"># Use &#x27;blkid&#x27; to print the universally unique identifier for a</span><br><span class="line"># device; this may be used with UUID= as a more robust way to name devices</span><br><span class="line"># that works even if disks are added and removed. See fstab(5).</span><br><span class="line">#</span><br><span class="line"># &lt;file system&gt; &lt;mount point&gt;   &lt;type&gt;  &lt;options&gt;       &lt;dump&gt;  &lt;pass&gt;</span><br><span class="line"># / was on /dev/sda2 during curtin installation</span><br><span class="line">/dev/disk/by-uuid/2106ed6e-8db6-4a23-af57-02accf7f2bbb / ext4 defaults 0 0</span><br><span class="line">/swap.img       none    swap    sw      0       0</span><br></pre></td></tr></table></figure>
<p>用 <code>blkid</code> 指令列出所有磁碟的 UUID：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@nexmasa-srv1:/# blkid</span><br><span class="line">/dev/sda1: PARTUUID=&quot;ffba582c-4540-40b0-8881-8262b0fe846a&quot;</span><br><span class="line">/dev/sda2: UUID=&quot;2106ed6e-8db6-4a23-af57-02accf7f2bbb&quot; TYPE=&quot;ext4&quot; PARTUUID=&quot;a4c6e542-de4e-41ad-94c1-8cfcc3fc743b&quot;</span><br><span class="line">/dev/sdb1: UUID=&quot;fb78cf8d-9b15-408d-b005-ee8eb60231a7&quot; TYPE=&quot;ext4&quot; PARTUUID=&quot;cbcd5e7c-01&quot;</span><br><span class="line">root@nexmasa-srv1:/#</span><br></pre></td></tr></table></figure>
<p>把欲掛載硬碟的 UUID 記起來，並寫到 <code>/etc/fstab</code> 中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UUID=fb78cf8d-9b15-408d-b005-ee8eb60231a7 /mnt/newdisk ext4 defaults 0 0</span><br></pre></td></tr></table></figure>
<p><strong>並重新開機，就大功告成了!</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@srv1:/# df -h</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">udev             32G     0   32G   0% /dev</span><br><span class="line">tmpfs           6.3G  2.2M  6.3G   1% /run</span><br><span class="line">/dev/sda2       458G   36G  399G   9% /</span><br><span class="line">tmpfs            32G     0   32G   0% /dev/shm</span><br><span class="line">tmpfs           5.0M     0  5.0M   0% /run/lock</span><br><span class="line">tmpfs            32G     0   32G   0% /sys/fs/cgroup</span><br><span class="line">tmpfs           6.3G     0  6.3G   0% /run/user/1000</span><br><span class="line">/dev/sdb1       458G   73M  435G   1% /mnt/newdisk</span><br></pre></td></tr></table></figure>
<h6 id="Reference">Reference</h6>
<ul>
<li><a href="https://www.netadmin.com.tw/netadmin/zh-tw/technology/23D09E63D4CD46349410CDA0E36FC465">https://www.netadmin.com.tw/netadmin/zh-tw/technology/23D09E63D4CD46349410CDA0E36FC465</a></li>
<li><a href="https://www.claytontan.net/2020/01/10/%E7%A3%81%E7%A2%9F%E5%88%86%E5%89%B2-mbr-vs-gpt/">https://www.claytontan.net/2020/01/10/磁碟分割-mbr-vs-gpt/</a></li>
<li><a href="https://blog.gtwang.org/linux/linux-add-format-mount-harddisk/">https://blog.gtwang.org/linux/linux-add-format-mount-harddisk/</a></li>
</ul>
]]></content>
      <categories>
        <category>OS</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>[Linux] RAID 介紹及實作 (HW RAID &amp; SW RAID)</title>
    <url>/Linux-RAID-intro-HW-RAID-SW-RAID/</url>
    <content><![CDATA[<p>RAID（Redundant Array of Independent Disks) 磁碟陣列，多個硬碟組合成為一個邏輯磁區(作業系統只會把它當作一個硬碟)。<br>
<img src="https://imgur.com/rJFbWVv.png" alt=""><br>
RAID 一般分類成 Software RAID 與 Hardware RAID。</p>
<span id="more"></span>
<hr>
<h2 id="Hardware-RAID">Hardware RAID</h2>
<p>Hardware RAID 用專屬 RAID 運算晶片，晶片位於介面卡或直接嵌入在主機板上。作業系統只需要驅動 RAID 晶片即可運作，RAID 任務分工是由 RAID 晶片做，較不影響CPU。</p>
<h2 id="ATA-SATA-RAID-BIOS-RAID-Fake-RAID">ATA(SATA) RAID / BIOS RAID / Fake RAID</h2>
<p>這類型 RAID 介於 Software RAID 與 Hardware RAID 之間，算是半個 Hardware RAID，通常由主機板晶片來「幫忙」RAID 運算，因此有 Fake RAID（假 RAID）之稱。<br>
要啟動這個 RAID 功能，要先在 BIOS 畫面設定以後，再使作業系統能夠正確辨識裝置即可。因為這款 RAID 要在 BIOS 內開啟，所以亦有人稱之為 BIOS RAID。</p>
<h2 id="SATA-RAID-設定">SATA RAID 設定</h2>
<p>若不確定系統是否內建 RAID card，可以使用下面 command 確認：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ lspci -vv | grep -i raid</span><br><span class="line">00:1f.2 RAID bus controller: Intel Corporation 631xESB/632xESB SATA RAID Controller (rev 09)</span><br></pre></td></tr></table></figure>
<h3 id="步驟概覽">步驟概覽</h3>
<ul>
<li>在 BIOS 中啟用 RAID。</li>
<li>進入 RAID configuration utility。</li>
<li>創建 RAID。</li>
</ul>
<h4 id="進入-BIOS">進入 BIOS</h4>
<p>進入 BIOS ，進入 <code>Advance</code> &gt; <code>SATA Configuration</code>，將 <code>Configure SATA as</code> 從 AHCI 更改為 <code>RAID</code>。其中要確認系統碟是否存在在 SATA，要確保 <code>SATA/sSATA RAID Boot Select</code> 的選項為系統碟所在的地方，或是直接選 <code>Both</code>。<br>
保存設置，並離開 BIOS。</p>
<h4 id="進入-RAID-Configuration-Utility">進入 RAID Configuration Utility</h4>
<p>RAID configuration utility 將在 BIOS 發布之前出現。畫面應該會先出現 RAID Volumes 以及 HDD 的列表。在該步驟中，按 <code>CTRL-I</code> 進入 RAID Configuration Utility。此工具能夠創建 RAID，修改 RAID（如果已創建）、刪除 RAID 或是將 HDD 還原回非 RAID。</p>
<h4 id="開始創建">開始創建</h4>
<p>選擇 <code>CREATE VOLUME MENU</code> ，鍵入 Volume Name、選擇 RAID 的類型（取決於選擇的 HDD 的數量）、選擇要使用的 HDD（從 2 個到全部，如果有更多的話），和最終大小。一旦完成創建 RAID 並重新引導，便完成了。</p>
<h4 id="進入系統">進入系統</h4>
<p>在設完 RAID 的後，通常開機都無法直接進入作業系統反而是進入 grub rescue。<br>
建完 hw raid 後進入系統<br>
lsblk 便可以看到建好的 raid (ex. /dev/md126)<br>
格式化 raid<br>
mkfs.ext4 /dev/md126<br>
查看 blkid<br>
寫入 /etc/fstab<br>
建立 mountpoint /data<br>
mount -av<br>
df -h</p>
<hr>
<h2 id="Software-RAID">Software RAID</h2>
<p>Software RAID 是由作業系統來提供 RAID 功能，會耗用較多 CPU 運算資源，所以要運行最好是雙 CPU 以上且高時脈等級主機，不然當遇到大量運算時，整體效能會大打折扣。Linux 上 Software RAID 技術已是相當成熟，使用裝置 /dev/md0、/dev/md1、/dev/md2 依此類推，MD 表示 Mutiple Device。</p>
<h2 id="Software-RAID-設定">Software RAID 設定</h2>
<h3 id="步驟概覽-2">步驟概覽</h3>
<ul>
<li>準備並分割好兩顆硬碟</li>
<li>安裝 mdadm utility</li>
<li>使用 mdadm 建立 RAID array</li>
<li>為 RAID 設備創建文件系統</li>
</ul>
<h4 id="準備並分割好兩顆硬碟">準備並分割好兩顆硬碟</h4>
<p>請注意需將 partition type 設置為 <code>Linux raid autodetect</code>。<br>
p.s. 硬碟分割之前的<a href="https://ulahsieh.github.io/Linux-disk-format.html">文章</a>就有記錄過了，這邊就不贅述。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo fdisk -l</span><br><span class="line">Disk /dev/sda: 120.0 GB, 120034123776 bytes</span><br><span class="line">139 heads, 49 sectors/track, 34421 cylinders, total 234441648 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk identifier: 0x2d0f2eb3</span><br><span class="line"></span><br><span class="line">Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/sda1            2048    20973567    10485760   fd  Linux raid autodetect</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/sdb: 120.0 GB, 120034123776 bytes</span><br><span class="line">139 heads, 49 sectors/track, 34421 cylinders, total 234441648 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk identifier: 0xe69ef1f5</span><br><span class="line"></span><br><span class="line">Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/sdb1            2048    20973567    10485760   fd  Linux raid autodetect</span><br><span class="line"></span><br><span class="line">Disk /dev/sdc: 120.0 GB, 120034123776 bytes</span><br><span class="line">139 heads, 49 sectors/track, 34421 cylinders, total 234441648 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk identifier: 0xe69ef1f5</span><br><span class="line"></span><br><span class="line">Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/sdc1            2048    20973567    10485760   fd  Linux raid autodetect</span><br></pre></td></tr></table></figure>
<h4 id="安裝-mdadm-utility">安裝 mdadm utility</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ubuntu</span><br><span class="line">$ sudo apt install mdadm</span><br><span class="line"></span><br><span class="line">CentOS</span><br><span class="line">$ sudo yum install mdadm</span><br></pre></td></tr></table></figure>
<h4 id="使用-mdadm-建立-RAID-array">使用 mdadm 建立 RAID array</h4>
<p>檢查硬碟是否有現有的 RAID 在使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo madam --examine /dev/sdb /dev/sdc</span><br><span class="line">$ sudo madam --examine /dev/sdb1 /dev/sdc1</span><br></pre></td></tr></table></figure>
<p>建立 RAID1 邏輯磁區，名為 <code>/dev/md0</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo mdadm --create /dev/md0 --level=1 --raid-devices=2 /dev/sdb1 /dev/sdc1</span><br></pre></td></tr></table></figure>
<div class="info">
<p>如果出現 “Device or resource busy”，則需要重開機。</p>
</div>
<p>確認結果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cat /proc/mdstat</span><br><span class="line">Personalities : [raid1] </span><br><span class="line">md0 : active raid1 sdb1[1] sdc1[0]</span><br><span class="line">      10484664 blocks super 1.2 [2/2] [UU]</span><br><span class="line">      [========&gt;............]  resync = 42.3% (4440832/10484664) finish=0.4min speed=201856K/sec</span><br></pre></td></tr></table></figure>
<p>檢查陣列 -D(–detail)，查詢指定 MD 詳細狀態訊息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo mdadm -D /dev/md0</span><br><span class="line">/dev/md0:</span><br><span class="line">        Version : 1.2</span><br><span class="line">  Creation Time : Tue Dec 1 17:49:50 2020</span><br><span class="line">     Raid Level : raid1</span><br><span class="line">     Array Size : 10484664 (10.00 GiB 10.74 GB)</span><br><span class="line">  Used Dev Size : 10484664 (10.00 GiB 10.74 GB)</span><br><span class="line">   Raid Devices : 2</span><br><span class="line">  Total Devices : 2</span><br><span class="line">    Persistence : Superblock is persistent</span><br><span class="line"></span><br><span class="line">    Update Time : Tue Dec 1 17:49:50 2020</span><br><span class="line">          State : active, resyncing</span><br><span class="line"> Active Devices : 2</span><br><span class="line">Working Devices : 2</span><br><span class="line"> Failed Devices : 0</span><br><span class="line">  Spare Devices : 0</span><br><span class="line"></span><br><span class="line"> Rebuild Status : 62% complete</span><br><span class="line"></span><br><span class="line">           Name : localhost.localdomain:0  (local to host localhost.localdomain)</span><br><span class="line">           UUID : 3a8605c3:bf0bc5b3:823c9212:7b935117</span><br><span class="line">         Events : 11</span><br><span class="line"></span><br><span class="line">    Number   Major   Minor   RaidDevice State</span><br><span class="line">       0       8        1        0      active sync   /dev/sdb1</span><br><span class="line">       1       8       17        1      active sync   /dev/sdc1</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>檢查</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo mdadm -E /dev/sdb1</span><br><span class="line">/dev/sdb1:</span><br><span class="line">          Magic : a92b4efc</span><br><span class="line">        Version : 1.2</span><br><span class="line">    Feature Map : 0x0</span><br><span class="line">     Array UUID : 3a8605c3:bf0bc5b3:823c9212:7b935117</span><br><span class="line">           Name : localhost.localdomain:0  (local to host localhost.localdomain)</span><br><span class="line">  Creation Time : Tue Dec 1 17:49:50 2020</span><br><span class="line">     Raid Level : raid1</span><br><span class="line">   Raid Devices : 2</span><br><span class="line"></span><br><span class="line"> Avail Dev Size : 20969472 (10.00 GiB 10.74 GB)</span><br><span class="line">     Array Size : 20969328 (10.00 GiB 10.74 GB)</span><br><span class="line">  Used Dev Size : 20969328 (10.00 GiB 10.74 GB)</span><br><span class="line">    Data Offset : 2048 sectors</span><br><span class="line">   Super Offset : 8 sectors</span><br><span class="line">          State : active</span><br><span class="line">    Device UUID : 10384215:18a75991:4f09b97b:1960b8cd</span><br><span class="line"></span><br><span class="line">    Update Time : Tue Dec 1 17:49:50 2020</span><br><span class="line">       Checksum : ea435554 - correct</span><br><span class="line">         Events : 18</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   Device Role : Active device 0</span><br><span class="line">   Array State : AA (&#x27;A&#x27; == active, &#x27;.&#x27; == missing)</span><br></pre></td></tr></table></figure>
<h4 id="為-RAID-設備創建文件系統">為 RAID 設備創建文件系統</h4>
<p>為 /dev/md0 創建 ext4 文件系統，並掛載到 /mnt/raid1 下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo mkfs.ext4 /dev/md0</span><br><span class="line">$ sudo mkdir /mnt/raid1</span><br><span class="line">$ mount /dev/md0 /mnt/raid1/</span><br><span class="line">$ df -h # 查看是否掛載成功</span><br></pre></td></tr></table></figure>
<p>添加到 /etc/fstab 文件中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo vim /etc/fstab</span><br><span class="line"># 加入 /dev/md0 /mnt/raid1 ext4 deaults 0 0</span><br></pre></td></tr></table></figure>
<p>使用 mount -a 來檢查 fstab 的條目是否有誤。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mount -av</span><br></pre></td></tr></table></figure>
<h4 id="編輯-mdadm-conf-設定檔">編輯 mdadm.conf  設定檔</h4>
<p>不同作業系統存放的位置不同，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/mdadm.conf         # Centos 7</span><br><span class="line">/etc/mdadm/mdadm.conf   # Ubuntu / Debian</span><br></pre></td></tr></table></figure>
<p>在檔案中保存 RAID 設定，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo mdadm --detail --scan --verbose &gt; /etc/mdadm.conf</span><br><span class="line">$ cat /etc/mdadm.conf</span><br><span class="line">ARRAY /dev/md0 level=raid1 num-devices=2 metadata=1.2 spares=1 name=localhost.localdomain:0 UUID=c7a2743d:f1e0d872:b2ad29cd:e2bee48c</span><br><span class="line">      devices=/dev/sdb1,/dev/sdc1</span><br></pre></td></tr></table></figure>
<p>更新 initramfs 使 mdadm 配置保存在啟動配置過程中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo update-initramfs -u</span><br></pre></td></tr></table></figure>
<h4 id="刪除-RAID-Array">刪除 RAID Array</h4>
<p>刪除邏輯磁區</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo mdadm --stop /dev/md0</span><br><span class="line">mdadm: stopped /dev/md0</span><br></pre></td></tr></table></figure>
<p>刪除 superblock，刪除後就 partition 就可以用來做新的 RAID。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo mdadm --zero-superblock /dev/sdb1</span><br><span class="line">$ sudo mdadm --zero-superblock /dev/sdc1</span><br></pre></td></tr></table></figure>
<p><strong>並註解掉原本在 <code>mdm.conf</code> 以及 <code>/etc/fstab</code> 的 md 資料。</strong></p>
<h5 id="Reference">Reference</h5>
<ul>
<li><a href="https://zh.m.wikipedia.org/zh-tw/RAID">https://zh.m.wikipedia.org/zh-tw/RAID</a></li>
<li><a href="https://superuser.com/questions/580717/how-do-i-set-up-hardware-raid">https://superuser.com/questions/580717/how-do-i-set-up-hardware-raid</a></li>
<li><a href="https://support.us.ovhcloud.com/hc/en-us/articles/360004809700-How-to-Configure-RAID-from-the-BIOS">https://support.us.ovhcloud.com/hc/en-us/articles/360004809700-How-to-Configure-RAID-from-the-BIOS</a></li>
<li><a href="https://registerboy.pixnet.net/blog/post/16190824-raid-">https://registerboy.pixnet.net/blog/post/16190824-raid-</a></li>
<li><a href="https://www.thomas-krenn.com/en/wiki/Linux_Software_RAID_Information">https://www.thomas-krenn.com/en/wiki/Linux_Software_RAID_Information</a></li>
<li><a href="https://www.linuxbabe.com/linux-server/linux-software-raid-1-setup">https://www.linuxbabe.com/linux-server/linux-software-raid-1-setup</a></li>
</ul>
]]></content>
      <categories>
        <category>OS</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>RAID</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 吃掉了記憶體 ?!</title>
    <url>/Linux-%E5%90%83%E6%8E%89%E4%BA%86%E8%A8%98%E6%86%B6%E9%AB%94/</url>
    <content><![CDATA[<h3 id="前言">前言</h3>
<p>在觀察用於儲存 k8s 的 nfs server 時，發現記憶體的 cache/buffer 值非常高，但細看 top 卻無任何應用程式佔用記憶體空間。查了一下網路，發現是 linux 系統本身的機制。</p>
<span id="more"></span>
<h3 id="原因">原因</h3>
<p>Linux 會借用未使用的記憶體來做磁碟快取，可以讓應用載入更快並且執行更加流暢，提高 IO 性能。如果有其他應用要用到記憶體時，系統會從磁碟快取中拿走一塊被借用的記憶體，不會用到 swap。</p>
<h3 id="free-命令的記憶體空間解析">free 命令的記憶體空間解析</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@nfs ~]<span class="comment"># free -h</span></span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           188G        6.4G        1.0G        138M        181G        181G</span><br><span class="line">Swap:          4.0G          0B        4.0G</span><br><span class="line">[root@nfs ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<ul>
<li>total 記憶體總數</li>
<li>used 已經使用的記憶體</li>
<li>free 空閒的記憶體數</li>
<li>shared 多個進程共享的記憶體總額</li>
<li>buffer 作為 buffer cache 的緩存</li>
<li>cache 作為 page cache 的緩存</li>
<li>available = free + buff/cache</li>
</ul>
<p><img src="https://imgur.com/jSqUSOV.png" alt=""><br>
上表中 something 代表的正是 free 命令中 <code>buffers/cached</code> 使用的記憶體。由於這個記憶體實際上是從作業系統的角度使用的，所以如果用戶想要使用它，那麼它可以被用戶的應用快速地回收和使用。</p>
<h3 id="buffer-cache">buffer &amp; cache</h3>
<h4 id="buffer-cache-緩衝">buffer cache 緩衝</h4>
<p>Buffer cache 也叫塊緩衝，是對物理磁盤上的一個磁盤塊進行的緩衝，其大小爲通常爲 1k。它是爲了緩衝寫操作然後一次性將很多改動寫入硬盤，避免頻繁寫硬盤，提高寫入效率。</p>
<h4 id="page-cache-快取">page cache 快取</h4>
<p>page cache 頁緩衝/文件緩衝，由若干個磁盤塊組成(也即由若干個bufferCache組成，物理上不一定連續)，通常為 4K、在 64 位系統上爲 8k。它是爲了給讀操作提供緩衝，避免頻繁讀硬盤，提高讀取效率。</p>
<p>簡單說來，buffer cache 用來緩存磁盤數據、優化磁盤的 I/O；page cache 用來緩存文件數據、優化文件系統的 I/O。在有文件系統的情況下，對文件操作，那麼數據會緩存到 page cache，如果直接採用 dd 等工具對磁盤進行讀寫，那麼數據會緩存到 buffer cache。</p>
<h3 id="如何清除-cache">如何清除 cache</h3>
<p><strong>一般來說使用者是不需要去管這些 cache 何時會被清除的</strong>，所以 Linux 也沒有專門的指令來做這件事，不過依然有提供一個 proc file system 介面 <code>/proc/sys/vm/drop_caches</code>，可以強制 kernel 清理快取。drop_caches 的值可以是 0-3 之間的數字，代表不同涵義：</p>
<p>0：不釋放(系統默認值)；不釋放内存，由操作系統自動管理<br>
1：釋放 pagecache.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># sync &amp;&amp; echo 1 &gt; /proc/sys/vm/drop_caches</span><br></pre></td></tr></table></figure>
<p>2：釋放 dentries(目錄緩存) 和 inodes (文件元數據)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># sync &amp;&amp; echo 2 &gt; /proc/sys/vm/drop_caches</span><br></pre></td></tr></table></figure>
<p>3：釋放所有緩存 pagecache, dentries and inodes.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># sync &amp;&amp; echo 3 &gt; /proc/sys/vm/drop_caches</span><br></pre></td></tr></table></figure>
<p>基本上執行這些指令沒有什麼好處，所以除非你很明確知道你想幹嘛（例如為了避免 cache 影響實驗結果），否則建議不要隨便手動清除快取記憶體。另外，也<strong>建議在做這個動作前先執行 <code>sync</code> 讓檔案寫入操作先完成，否則可能會造成意想不到的結果。</strong></p>
<h3 id="Reference">Reference</h3>
<ul>
<li><a href="https://www.linuxatemyram.com/">https://www.linuxatemyram.com/</a></li>
<li><a href="https://medium.com/hungys-blog/clear-linux-memory-cache-manually-90bec95ea003">https://medium.com/hungys-blog/clear-linux-memory-cache-manually-90bec95ea003</a></li>
</ul>
]]></content>
      <categories>
        <category>OS</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>[MongoDB] Install MongoDB Replica Set with Docker</title>
    <url>/MongoDB-Install-MongoDB-Replica-Set-with-Docker/</url>
    <content><![CDATA[<h3 id="Replica-Set-Installation">Replica Set Installation</h3>
<span id="more"></span>
<h4 id="Pre-requisties">Pre-requisties</h4>
<p>確認是否安裝 Docker，並確認 docker daemon 是否有跑起來</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker -v</span><br><span class="line">$ docker images</span><br></pre></td></tr></table></figure>
<p>下載最新版的官方 mongo image</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker pull mongo</span><br></pre></td></tr></table></figure>
<h4 id="架構">架構</h4>
<p><img src="https://imgur.com/Q9CMsDT.png" alt=""></p>
<h4 id="開始安裝">開始安裝</h4>
<h5 id="設置網路">設置網路</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@test ~]# docker network ls</span><br><span class="line">NETWORK ID     NAME            DRIVER    SCOPE</span><br><span class="line">cd9c58204dfa   bridge          bridge    local</span><br><span class="line">3954d16a34fc   host            host      local</span><br><span class="line">146f0c7f58e7   none            null      local</span><br></pre></td></tr></table></figure>
<h5 id="新增網路">新增網路</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker network create mongo-cluster</span><br></pre></td></tr></table></figure>
<h5 id="跑-container">跑 container</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker run -d --name mongo1 --network mongo-cluster -p 30001:30001 -v mongo1:/data/db mongo:latest mongod --replSet myReplica --port 30001 --dbpath /data/db</span><br><span class="line">$ docker run -d --name mongo2 --network mongo-cluster -p 30002:30002 -v mongo2:/data/db mongo:latest mongod --replSet myReplica --port 30002 --dbpath /data/db</span><br><span class="line">$ docker run -d --name mongo3 --network mongo-cluster -p 30003:30003 -v mongo3:/data/db mongo:latest mongod --replSet myReplica --port 30003 --dbpath /data/db</span><br></pre></td></tr></table></figure>
<h5 id="進入-container-設置-replication">進入 container 設置 replication</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker exec -it mongo1 mongo --port 30001</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; rs.initiate(&#123;&quot;_id&quot;:&quot;myReplica&quot;,&quot;members&quot;:[&#123;&quot;_id&quot;:0,&quot;host&quot;:&quot;mongo1:30001&quot;&#125;,&#123;&quot;_id&quot;:1,&quot;host&quot;:&quot;mongo2:30002&quot;&#125;,&#123;&quot;_id&quot;:2,&quot;host&quot;:&quot;mongo3:30003&quot;&#125;]&#125;)</span><br></pre></td></tr></table></figure>
<p>第一個參數的 <code>_id</code> 必須與跑 mongod 的 --replSet 參數相同，第二個參數 <code>members</code> 需列出所有欲加入 replica set 的 node。而因為所有 container 都加在 mongo-cluster 的 docker network，所以可以直接使用 container name 辨別。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;ok&quot; : 1,</span><br><span class="line">&quot;$clusterTime&quot; : &#123;</span><br><span class="line">&quot;clusterTime&quot; : Timestamp(1608026586, 1),</span><br><span class="line">&quot;signature&quot; : &#123;</span><br><span class="line">&quot;hash&quot; : BinData(0,&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA=&quot;),</span><br><span class="line">&quot;keyId&quot; : NumberLong(0)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;operationTime&quot; : Timestamp(1608026586, 1)</span><br><span class="line">&#125;</span><br><span class="line">myReplica:SECONDARY&gt;</span><br><span class="line">myReplica:PRIMARY&gt;</span><br></pre></td></tr></table></figure>
<p>成功初始化群集後，應該可以看到回傳的訊息顯示 <code>ok = 1</code>。並且 shell 最前面會先變成 <code>myReplica:SECONDARY&gt;</code>，再按一下 enter，就能成功變成 <code>myReplica:PRIMARY&gt;</code>。先是 SECONDARY 的原因是因為還沒選出 PRIMARY。</p>
<h5 id="開始寫資料">開始寫資料</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; use test</span><br><span class="line">&gt; db.col1.insert(&#123;hello:&#x27;world&#x27;&#125;)</span><br><span class="line">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class="line">&gt; db.col1.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;87362127767493de37ff95ed&quot;), &quot;hello&quot; : &quot;world&quot; &#125;</span><br></pre></td></tr></table></figure>
<p>再試試看連到第二台 MongoDB 找資料室不是已經備份成功了。在使用 Secondary 資料庫搜尋前，需要先下 <code>db2.setSlaveOk ()</code> 讓 shell 知道我們有意要用非 primary 資料庫查詢。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; db2 = (new Mongo(&#x27;mongo2:30002&#x27;)).getDB(&#x27;test&#x27;)</span><br><span class="line">test</span><br><span class="line">&gt; db2.setSlaveOk()</span><br><span class="line">&gt; db2.col1.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(87362127767493de37ff95ed&quot;), &quot;hello&quot; : &quot;world&quot;  &#125;</span><br></pre></td></tr></table></figure>
<h6 id="Reference">Reference</h6>
<ul>
<li><a href="https://www.sohamkamani.com/blog/2016/06/30/docker-mongo-replica-set/">https://www.sohamkamani.com/blog/2016/06/30/docker-mongo-replica-set/</a></li>
</ul>
]]></content>
      <categories>
        <category>Database</category>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
        <tag>Replica Set</tag>
      </tags>
  </entry>
  <entry>
    <title>[MongoDB] Install MongoDB Shell</title>
    <url>/MongoDB-Install-Only-Shell/</url>
    <content><![CDATA[<h3 id="Install-Mongo-Shell-Only-on-Linux">Install Mongo Shell Only on Linux</h3>
<span id="more"></span>
<p>mongo shell 已經包含在 MongoDB 服務器中。如果已經安裝了 DB，則 mongo shell 將安裝在與服務器 binary 文件相同的位置。 但如果只想從 MongoDB 服務器外單獨下載 mongo shell，可以按照以下步驟將 shell 作為獨立程序安裝：</p>
<h3 id="下載">下載</h3>
<p>進入 <a href="https://www.mongodb.com/try/download/community">MongoDB Coummunity Download Center</a>，依照作業系統版本選擇 mongo shell，並把連結<strong>複製</strong>起來。<br>
<img src="https://imgur.com/gijHvpl.png" alt=""></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ wget https://fastdl.mongodb.org/linux/mongodb-shell-linux-x86_64-rhel70-4.4.2.tgz</span><br><span class="line">$ tar tzxvf mongodb-shell-linux-x86_64-rhel70-4.4.2.tgz</span><br></pre></td></tr></table></figure>
<h3 id="複製-mongo-執行檔到執行目錄">複製 mongo 執行檔到執行目錄</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd mongodb-shell-linux-x86_64-rhel70-4.4.2/bin</span><br><span class="line">$ cp mongo /usr/local/bin</span><br><span class="line">$ mongo</span><br><span class="line">MongoDB shell version v4.4.2</span><br><span class="line">connecting to: mongodb://127.0.0.1:27017/?compressors=disabled&amp;gssapiServiceName=mongodb</span><br><span class="line">Error: couldn&#x27;t connect to server 127.0.0.1:27017, connection attempt failed: SocketException: Error connecting to 127.0.0.1:27017 :: caused by :: Connection refused :</span><br><span class="line">connect@src/mongo/shell/mongo.js:374:17</span><br><span class="line">@(connect):2:6</span><br><span class="line">exception: connect failed</span><br><span class="line">exiting with code 1</span><br></pre></td></tr></table></figure>
<p>就成功了！（p.s. 錯誤是因為本機 127.0.0.1:27017 沒裝 MongoDB）</p>
<h5 id="Reference">Reference</h5>
<ul>
<li><a href="https://docs.mongodb.com/manual/mongo/">https://docs.mongodb.com/manual/mongo/</a></li>
</ul>
]]></content>
      <categories>
        <category>Database</category>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>[MongoDB] Introduction and Installation on Bare Metal</title>
    <url>/MongoDB-Introduction-and-Install-on-BareMetal/</url>
    <content><![CDATA[<p>文件導向式(document-oriented)資料庫，儲存文件（document）或物件（object），沒有 row 的概念，取而代之的是 document。</p>
<span id="more"></span>
<h3 id="Features">Features</h3>
<ul>
<li>schema-less：擁有彈性的 schema</li>
<li>易於橫向擴展，document 的數據模型能很容易在多台伺服器之間進行數據分割。</li>
<li>性能：MongoDB 能預分配，以利用額外的空間換取穩定，同時盡可能把多的內存用作 cache，試圖為每次查詢自動選擇正確的索引。查詢(使用索引)、插入(自動分片)等操作的速度很快。</li>
<li>Map/Reduce 的聚合（aggregation）功能：更多可能性，且提供方便的資料分組、處理與二次加工等操作</li>
<li>副本（Replication）&amp; 容錯移轉（failover）：提供資料的高可用性（HA, High Availability）</li>
</ul>
<h3 id="缺點">缺點</h3>
<p>不支援事務操作 : 所以通常不適合應用在銀行或會計這種系統上，因為不包證一致性。<br>
占用比較多空間 : 主要是有兩個原因，首先是它會預分配空間，為了提高效能，而第二個原因是欄位所占用的空間。</p>
<h3 id="儲存架構">儲存架構</h3>
<h4 id="document">document</h4>
<p>Document 是 mongodb 的核心，它就是 Key-Value 的對應組合。資料的儲存架構是以類似 JSON 的資料結構 <strong>BSON</strong>(Binary JSON) 儲存，每筆資料的 key 和 value 都是區分大小寫。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     _id: <span class="string">&quot;948794777&quot;</span>,</span><br><span class="line">     name: <span class="string">&quot;Robby&quot;</span>,</span><br><span class="line">     age: <span class="number">30</span>,</span><br><span class="line">     email: <span class="string">&quot;Robby&quot;</span>,</span><br><span class="line">     skill: [</span><br><span class="line">            &#x27;javascript&#x27;,</span><br><span class="line">            &#x27;java&#x27;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>_id：雖然稱為 NoSQL，但系統會自動幫你產生</li>
<li>key 區分大小寫，且不能相同</li>
</ul>
<h4 id="collection">collection</h4>
<p>Collection 是一組 Document，如果把它用來與關聯式資料庫比較，他就是 Table 裡面存放了很多 Row (document)。Collection 是動態的，一個 collection 裡的document 可以是各種類型。如下；</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123; id : <span class="number">1</span>, name : <span class="string">&quot;mark&quot;</span> &#125;</span><br><span class="line">&#123; age : <span class="number">100</span> &#125;</span><br></pre></td></tr></table></figure>
<h3 id="在-Ubuntu-18-04-上安裝-MongoDB-4-4-Community-Edition">在 Ubuntu 18.04 上安裝 MongoDB 4.4 Community Edition</h3>
<div class="info">
<p>MongoDB 4.4 Community Edition 僅支援 64-bit 的 20.04、18.04、16.04 Ubuntu 版本。<br>
官方的套件是由 MongoDB Inc. 維護的 mongodb-org，並且會在 repo 中保持最新版本。而 Ubuntu 提供的套件是 mongodb 非為官方套件，在安裝官方套件前須前解除安裝。</p>
</div>
<h4 id="導入-apt-使用的公鑰">導入 apt 使用的公鑰</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ wget -qO - https://www.mongodb.org/static/pgp/server-4.4.asc | sudo apt-key add -</span><br></pre></td></tr></table></figure>
<p>如果成功會返回 <code>OK</code>；失敗的話請先安裝 <code>gnupg</code>，<code>sudo apt-get install gnupg -y</code>。</p>
<h4 id="新增-MongoDB-的-list-file">新增 MongoDB 的 list file</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ echo &quot;deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.4 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-4.4.list</span><br></pre></td></tr></table></figure>
<p>成功後會在 /etc/apt/sources.list.d 下建立 mongodb-org-4.4.list 清單。</p>
<h4 id="更新-apt-並安裝-mongo">更新 apt 並安裝 mongo</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install -y mongodb-org</span><br></pre></td></tr></table></figure>
<p>安裝過程會自動創建使用者 <code>mongodb</code> 以及數據目錄 <code>/var/lib/mongodb</code> 以及日誌目錄 <code>/var/log/mongodb</code>。如果要更改使用 mongod 進程的使用者的話，則這兩個目錄的權限也要修改。</p>
<h4 id="固定版本">固定版本</h4>
<p>為了防止在 apt update 時將最新版本下載更新，所以可以選擇將 package 固定在當前安裝的版本上。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ echo &quot;mongodb-org hold&quot; | sudo dpkg --set-selections &amp;&amp; echo &quot;mongodb-org-server hold&quot; | sudo dpkg --set-selections &amp;&amp; echo &quot;mongodb-org-shell hold&quot; | sudo dpkg --set-selections &amp;&amp; echo &quot;mongodb-org-mongos hold&quot; | sudo dpkg --set-selections &amp;&amp; echo &quot;mongodb-org-tools hold&quot; | sudo dpkg --set-selections</span><br></pre></td></tr></table></figure>
<h4 id="設定-ulimit">設定 ulimit</h4>
<p>大多數類 Unix 操作系統都限制 process 可使用的系統資源。這些限制可能會對 MongoDB 的運作造成停擺。在 4.4 版如果 ulimt 的 open file 數值小於 64000 會直接報 startup error 的錯誤。<br>
先使用 ps 查看 mongo 的使用者名稱，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ps aux | grep mongod</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/SAZKb1H.png" alt=""></p>
<p>修改 <code>limit.conf</code> 檔案</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo vi /etc/security/limits.conf</span><br></pre></td></tr></table></figure>
<p>加入以下條件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongodb soft fsize unlimited</span><br><span class="line">mongodb hard fsize unlimited</span><br><span class="line">mongodb soft cpu unlimited</span><br><span class="line">mongodb hard cpu unlimited</span><br><span class="line">mongodb soft as unlimited</span><br><span class="line">mongodb hard as unlimited</span><br><span class="line">mongodb soft memlock unlimited</span><br><span class="line">mongodb hard memlock unlimited</span><br><span class="line">mongodb soft nofile 64000</span><br><span class="line">mongodb hard nofile 64000</span><br><span class="line">mongodb soft nproc 64000</span><br><span class="line">mongodb hard nproc 64000</span><br></pre></td></tr></table></figure>
<p>之後重登入使用者，並可以使更改生效。</p>
<h4 id="mongod-conf">mongod.conf</h4>
<p>設置檔在啟動時生效。如果在運行 MongoDB 實例時更改配置文件，則必須重新啟動服務以使更改生效。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Where and how to store data.</span><br><span class="line">storage:</span><br><span class="line">  dbPath: /var/lib/mongodb</span><br><span class="line">  journal:</span><br><span class="line">    enabled: true</span><br><span class="line"></span><br><span class="line"># where to write logging data.</span><br><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  logAppend: true</span><br><span class="line">  path: /var/log/mongodb/mongod.log</span><br><span class="line"></span><br><span class="line"># network interfaces</span><br><span class="line">net:</span><br><span class="line">  port: 27017</span><br><span class="line">  bindIp: 127.0.0.1</span><br><span class="line">  # 綁定監聽的 ip，默認 127.0.0.1，只能通過本地連接。若不限制 IP，務必確保認證安全，多個 IP 用逗號分隔。</span><br><span class="line"></span><br><span class="line"># how the process runs</span><br><span class="line">processManagement:</span><br><span class="line">  timeZoneInfo: /usr/share/zoneinfo</span><br></pre></td></tr></table></figure>
<h4 id="啟動-mongodb-service">啟動 mongodb service</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl daemon-reload</span><br><span class="line">$ sudo systemctl start mongod</span><br></pre></td></tr></table></figure>
<p>確認啟用狀態</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl status mongod</span><br></pre></td></tr></table></figure>
<p>確保 MongoDB 會在系統重啟後自動啟動</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl enable mongod</span><br></pre></td></tr></table></figure>
<h4 id="進入-mongoDB">進入 mongoDB</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mongo</span><br></pre></td></tr></table></figure>
<p>如果要有指定特定 port 進入 shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mongo --port 3000</span><br></pre></td></tr></table></figure>
<p>如果要連到 remote mongoDB</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 使用 connection string進入</span><br><span class="line">$ mongo &quot;mongodb://10.1.5.10:27017&quot;</span><br><span class="line"># 或是使用參數</span><br><span class="line">$ mongo --host 10.1.5.10:27017</span><br><span class="line"># 或是使用參數</span><br><span class="line">$ mongo --host 10.1.5.10 --port 27017</span><br></pre></td></tr></table></figure>
<p>使用驗證連到 mongo shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 使用 connection string 登入</span><br><span class="line">$ mongo &quot;mongodb://alice@10.1.5.10:27017/?authSource=admin&quot;</span><br><span class="line"># 或是使用參數登入</span><br><span class="line">mongo --username alice --password --authenticationDatabase admin --host 10.1.5.10 --port 27017</span><br></pre></td></tr></table></figure>
<p>不需要在 command line 裡把密碼打出來，shell 會自動跳出密碼輸入提示。</p>
<h6 id="Reference">Reference</h6>
<ul>
<li><a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/">https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10184679">https://ithelp.ithome.com.tw/articles/10184679</a></li>
</ul>
]]></content>
      <categories>
        <category>Database</category>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>[MongoDB] 無法使用 replicaSet 連線問題</title>
    <url>/MongoDB-cannot-connect-with-replicaSet/</url>
    <content><![CDATA[<h3 id="前言">前言</h3>
<p>用 docker 跑三個 mongoDB 的 container，做成 replica set cluster。但卻遇到從外面的 shell (跑在本機或其他 server) 加上 replica set 的名字時無法連線的問題 (<code>mongo --host myReplica/mongo1</code> 失敗)。而不加 replica set 卻都能成功連線 (<code>mongo --host mongo1:30001</code> 成功)。</p>
<span id="more"></span>
<h3 id="原因">原因</h3>
<p>外部連線的 hostname 跟 port 與 mongodb 內部的 replica set configuration 不同</p>
<h3 id="解決辦法">解決辦法</h3>
<p>參考 <a href="https://github.com/bitnami/bitnami-docker-mongodb/issues/84">這篇 issue</a> 後發現有兩種做法，一種是在建立 container 的時候為每個角色指定環境變數 (如 <code>MONGODB_REPLICA_SET_MODE=primary</code>)。但這個做法總覺得哪裡怪怪的，不太確定在環境變數指定 primary 或 secondary 後，當 primary 掛掉時環境變數固定會不會造成什麼影響。</p>
<p>所以我就用第二種方法，把 container 內的 mongod 的 port 與外面 export 的 port 設成一樣的。然後連線前在 /etc/hosts 中設定對應的 hostname。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">-p 30001:30001 \</span><br><span class="line">--name mongo1 \</span><br><span class="line">--network mongo-cluster \</span><br><span class="line">mongo mongod --replSet myReplica --port 30001</span><br></pre></td></tr></table></figure>
<p>這樣子 <code>rs.conf().members</code> 的 ip &amp; port 才和外面會一樣。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@test ~]# mongo --host myReplica/mongo1:30001,mongo2:30002,mongo3:30003</span><br><span class="line">myReplica:PRIMARY&gt; rs.conf().members</span><br><span class="line">[</span><br><span class="line">        &#123;</span><br><span class="line">                &quot;_id&quot; : 0,</span><br><span class="line">                &quot;host&quot; : &quot;mongo1:30001&quot;,</span><br><span class="line">                &quot;arbiterOnly&quot; : false,</span><br><span class="line">                &quot;buildIndexes&quot; : true,</span><br><span class="line">                &quot;hidden&quot; : false,</span><br><span class="line">                &quot;priority&quot; : 1,</span><br><span class="line">                &quot;tags&quot; : &#123;</span><br><span class="line"></span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;slaveDelay&quot; : NumberLong(0),</span><br><span class="line">                &quot;votes&quot; : 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">                &quot;_id&quot; : 1,</span><br><span class="line">                &quot;host&quot; : &quot;mongo2:30002&quot;,</span><br><span class="line">                &quot;arbiterOnly&quot; : false,</span><br><span class="line">                &quot;buildIndexes&quot; : true,</span><br><span class="line">                &quot;hidden&quot; : false,</span><br><span class="line">                &quot;priority&quot; : 1,</span><br><span class="line">                &quot;tags&quot; : &#123;</span><br><span class="line"></span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;slaveDelay&quot; : NumberLong(0),</span><br><span class="line">                &quot;votes&quot; : 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">                &quot;_id&quot; : 2,</span><br><span class="line">                &quot;host&quot; : &quot;mongo3:30003&quot;,</span><br><span class="line">                &quot;arbiterOnly&quot; : false,</span><br><span class="line">                &quot;buildIndexes&quot; : true,</span><br><span class="line">                &quot;hidden&quot; : false,</span><br><span class="line">                &quot;priority&quot; : 1,</span><br><span class="line">                &quot;tags&quot; : &#123;</span><br><span class="line"></span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;slaveDelay&quot; : NumberLong(0),</span><br><span class="line">                &quot;votes&quot; : 1</span><br><span class="line">        &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h4 id="Reference">Reference</h4>
<ul>
<li>文中的 github issue 連結 <a href="https://github.com/bitnami/bitnami-docker-mongodb/issues/84">https://github.com/bitnami/bitnami-docker-mongodb/issues/84</a></li>
<li>這篇也解釋得很清楚，可以參考參考 <a href="https://serverfault.com/questions/895355/docker-container-unable-to-connect-to-mongodb-replica-set">https://serverfault.com/questions/895355/docker-container-unable-to-connect-to-mongodb-replica-set</a></li>
</ul>
]]></content>
      <categories>
        <category>Database</category>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Kubernetes 上佈署 MongoDB</title>
    <url>/MongoDB/</url>
    <content><![CDATA[<p>紀錄一下 mongodb 的 kubernetes 佈署檔，分為 standalone 以及 replica set，會宣告 persistent volume 以儲存永久性資料 (如 database 資料、index 以及設定檔)。</p>
<span id="more"></span>
<p>**假設已建立以 nfs 為基底的 storage class。</p>
<h3 id="Standalone">Standalone</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-mongo-pvc</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">test-mongo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">10Gi</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">nfs</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mongodb</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">test-mongo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">mongodb</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">mongodb</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mongodb</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">mongo:latest</span></span><br><span class="line">          <span class="attr">command:</span> [<span class="string">&quot;mongod&quot;</span>, <span class="string">&quot;--bind_ip_all&quot;</span>, <span class="string">&quot;--noauth&quot;</span>, <span class="string">&quot;--dbpath&quot;</span>, <span class="string">&quot;/data/db&quot;</span>]</span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">27017</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">mongodb</span></span><br><span class="line">            <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mongodb-data</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/data/db</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mongodb-data</span></span><br><span class="line">          <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">            <span class="attr">claimName:</span> <span class="string">test-mongo-pvc</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mongodb</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">test-mongo</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">mongodb</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">27017</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">mongo-port</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">27017</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">mongodb</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br></pre></td></tr></table></figure>
<h3 id="Replicaset">Replicaset</h3>
<p>(待補充)</p>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Mongodb 可能是讓機器 OOM crash 的元兇 ?!</title>
    <url>/Mongodb-OOM-crash/</url>
    <content><![CDATA[<h3 id="問題">問題</h3>
<p>手上有三台各有 160GB 的機器，但卻會在跑一段時間後輪流死當。觀察記憶體消耗之後，發現兇手就是 MongoDB!!!</p>
<span id="more"></span>
<p><img src="https://imgur.com/HyeoJGH.png" alt=""></p>
<h3 id="原因">原因</h3>
<p>MongoDB 使用記憶體映射存儲引擎 (Memory Mapped Storage Engine) WiredTiger，是 MongoDB 3.2 版之後的默認引擎，它會把磁盤 IO 操作轉換成記憶體操作，如果是讀操作，記憶體中的數據起到緩存的作用，如果是寫操作，記憶體還可以把隨機的寫操作轉換成順序的寫操作，總之可以大幅度提升性能。<br>
截自 <a href="https://docs.mongodb.com/manual/core/wiredtiger/#memory-use">Mongodb doucument</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">With WiredTiger, MongoDB utilizes both the WiredTiger internal cache and the filesystem cache.</span><br><span class="line">Starting in MongoDB 3.4, the default WiredTiger internal cache size is the larger of either:</span><br><span class="line">- 50% of (RAM - 1 GB), or</span><br><span class="line">- 256 MB.</span><br></pre></td></tr></table></figure>
<p>因為伺服器記憶體大小為 160GB，一個 Mongodb 就可能會占掉近 80GB 的記憶體。 此時服務器上若還有跑其他 Mongodb 或應用程序的話，就會導致記憶體不足而退出。</p>
<h3 id="解決方法">解決方法</h3>
<h4 id="在-mongodb-啟動時設定">在 mongodb 啟動時設定</h4>
<ul>
<li>run on baremetal</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongod --wiredTigerCacheSizeGB 10</span><br></pre></td></tr></table></figure>
<ul>
<li>run on docker</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name mymongo -d mongo --wiredTigerCacheSizeGB 10</span><br></pre></td></tr></table></figure>
<ul>
<li>run on kubernetes</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">&lt;&lt;EOF</span> <span class="string">|</span> <span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="bullet">-</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mongodb</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">mongodb</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">mongodb</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">mongo</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">mongodb</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">27017</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">mongodb</span></span><br><span class="line">            <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">command:</span> [<span class="string">&quot;docker-entrypoint.sh&quot;</span>]</span><br><span class="line">          <span class="attr">args:</span> [<span class="string">&quot;mongod&quot;</span>, <span class="string">&quot;--wiredTigerCacheSizeGB&quot;</span>, <span class="string">&quot;10&quot;</span>]</span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mongodb</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">mongodb</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">27017</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">mongo-port</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">27017</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">mongodb</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
<h4 id="mongodb-運行時設定">mongodb 運行時設定</h4>
<p>如果 mongodb 已經啟動的話，可以使用下面方式動態設定</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">db.adminCommand(&#123;setParameter: <span class="number">1</span>, wiredTigerEngineRuntimeConfig: &quot;cache_size=10G&quot;&#125;)</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/YTtSbvo.png" alt=""></p>
<h4 id="查看設定結果">查看設定結果</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">db.serverStatus().wiredTiger.cache[<span class="string">&#x27;maximum bytes configured&#x27;</span>]<span class="operator">/</span><span class="number">1024</span><span class="operator">/</span><span class="number">1024</span><span class="operator">/</span><span class="number">1024</span></span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/cmRSf8R.png" alt=""></p>
<h3 id="Reference">Reference</h3>
<ul>
<li><a href="https://docs.mongodb.com/manual/reference/program/mongod/">https://docs.mongodb.com/manual/reference/program/mongod/</a></li>
<li><a href="https://stackoverflow.com/questions/64809287/how-to-set-wiredtigercachesize-in-mongodb-when-deployed-in-kubernetes/64859613#64859613">https://stackoverflow.com/questions/64809287/how-to-set-wiredtigercachesize-in-mongodb-when-deployed-in-kubernetes/64859613#64859613</a></li>
<li><a href="https://blog.csdn.net/LuyaoYing001/article/details/75576820">https://blog.csdn.net/LuyaoYing001/article/details/75576820</a></li>
</ul>
]]></content>
      <categories>
        <category>Database</category>
        <category>MongoDB</category>
      </categories>
  </entry>
  <entry>
    <title>[Node-RED] Deploy on Kubernetes</title>
    <url>/Node-RED-Deploy-on-Kubernetes/</url>
    <content><![CDATA[<p>原先使用 k8s-at-home 的 <a href="https://github.com/k8s-at-home/charts/tree/master/charts/stable/node-red">helm chart</a> 部屬，但完成後發現 node 安裝後會 deploy 異常，懷疑是 persistence 設定問題，但又不想花時間深究，所以就直接自己寫 yaml 部屬比較快。</p>
<span id="more"></span>
<ol>
<li>準備 node-red.yaml 檔</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nodered-pvc</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">node-red</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">10Gi</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">nfs</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">node-red</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">node-red</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">node-red</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">node-red</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">node-red</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">nodered/node-red:2.1.2</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">1880</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">node-red</span></span><br><span class="line">            <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nodered-data</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/data</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nodered-data</span></span><br><span class="line">          <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">            <span class="attr">claimName:</span> <span class="string">nodered-pvc</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">node-red</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">node-red</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">node-red</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">1880</span></span><br><span class="line">    <span class="attr">nodePort:</span> <span class="number">31880</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>部屬</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create ns node-red</span><br><span class="line">kubectl -n node-red apply -f node-red.yaml </span><br></pre></td></tr></table></figure>
<ol start="3">
<li>完成</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get all -n node-red</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/VCHgLRn.png" alt=""></p>
<ol start="4">
<li>訪問<br>
service 使用 NodePort，則直接使用 control plane 的 IP 以及 NodePort 指定的 port 31880 訪問 Node-RED 即可。<br>
<img src="https://imgur.com/fcezxst.png" alt=""></li>
</ol>
]]></content>
      <categories>
        <category>Programming</category>
        <category>Node-RED</category>
      </categories>
      <tags>
        <tag>Node-RED</tag>
      </tags>
  </entry>
  <entry>
    <title>[MySQL] 在 Ubuntu18.04 建立 MySQL NDB Cluster 8.0</title>
    <url>/MySQL-NDB-Cluster8-onUbuntu/</url>
    <content><![CDATA[<h2 id="MySQL-NDB-Cluster">MySQL NDB Cluster</h2>
<p>MySQL cluster 將標準的 MySQL server 與內存中叢集式儲存引擎 NDB 集成起來，允許在多個無共享的系統中部署「內存中」資料庫的叢集。</p>
<span id="more"></span>
<p>叢集通常會有多台機器，每台運行不同程序，包括 MySQL Server、NDB 叢集的數據節點、管理伺服器，以及可能專門的數據訪問程式，如下圖：<br>
<img src="https://imgur.com/tk8oKQF.png" alt=""></p>
<h3 id="架構中的三個角色">架構中的三個角色</h3>
<ul>
<li>
<p>管理節點 Management Node<br>
用於管理叢集內的其他節點，如提供配置數據、啟動並停止節點、運行備份等。由於這類節點負責管理其他節點的配置，應在啟動其他節點之前首先啟動這類節點。</p>
</li>
<li>
<p>數據節點 Data Node<br>
用於保存叢集的數據，資料寫在 RAM 或 Disk。當節點有 2 個以上時就能實現集群的高可用保證，不過節點增加，集群的處理速度會變慢。</p>
</li>
<li>
<p>SQL 節點 (API)<br>
用來訪問叢集數據，負責 SQL 的 Table schema，提供對外應用服務。增加 API 節點會提高整個集群的並發訪問速度和整體的吞吐量，該節點可以部署在 Web 應用伺服器上，也可以部署在專用的伺服器上。</p>
</li>
</ul>
<h2 id="環境準備">環境準備</h2>
<p>搭建 MySQL Cluster 至少要一個管理節點來管理，一個 SQL 節點來實現 MySQL server 功能和兩個資料節點實現 NDB Cluster 的功能。此篇文章將測試使用雙 SQL節點來搭建測試環境：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a) Management Node  10.1.5.31</span><br><span class="line">b) Data Node        10.1.5.32</span><br><span class="line">c) Data Node        10.1.5.33</span><br><span class="line">d) SQL Node         10.1.5.32</span><br><span class="line">e) SQL Node         10.1.5.33</span><br></pre></td></tr></table></figure>
<p>以上機器使用 Ubuntu 18.04 作業系統。</p>
<h2 id="Management-Node">Management Node</h2>
<h3 id="下載並安裝">下載並安裝</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd ~</span><br><span class="line">$ wget https://dev.mysql.com/get/Downloads/MySQL-Cluster-8.0/mysql-cluster-community-management-server_8.0.21-1ubuntu18.04_amd64.deb</span><br><span class="line">$ sudo dpkg -i mysql-cluster-community-management-server_8.0.21-1ubuntu18.04_amd64.deb</span><br></pre></td></tr></table></figure>
<h3 id="編輯配置檔-config-ini">編輯配置檔 config.ini</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo mkdir /var/lib/mysql-cluster</span><br><span class="line">$ sudo vi /var/lib/mysql-cluster/config.ini</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[ndbd default]</span><br><span class="line">NoOfReplicas=2</span><br><span class="line"></span><br><span class="line">[ndb_mgmd]</span><br><span class="line">NodeId=1</span><br><span class="line">hostname=10.1.5.31</span><br><span class="line">datadir=/var/lib/mysql-cluster</span><br><span class="line"></span><br><span class="line">[ndbd]</span><br><span class="line">NodeId=2</span><br><span class="line">hostname=10.1.5.32</span><br><span class="line">datadir= /usr/local/mysql/data</span><br><span class="line"></span><br><span class="line">[ndbd]</span><br><span class="line">NodeId=3</span><br><span class="line">hostname=10.1.5.33</span><br><span class="line">datadir= /usr/local/mysql/data</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">NodeId=4</span><br><span class="line">hostname=10.1.5.32</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">NodeId=5</span><br><span class="line">hostname=10.1.5.33</span><br></pre></td></tr></table></figure>
<p>配置說明如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[ndb default]</span><br><span class="line"># data node 的配置</span><br><span class="line">NoOfReplicas=2 # 數據節點數</span><br><span class="line"></span><br><span class="line">[ndb_mgmd]</span><br><span class="line"># 管理節點配置</span><br><span class="line">hostname=10.1.5.31</span><br><span class="line">datadir=/var/lib/mysql-cluster # log files 儲存目錄</span><br><span class="line"></span><br><span class="line">[ndbd] # 數據節點配置</span><br><span class="line">hostname= # Remote IP address</span><br><span class="line">NodeId=2 # 為管理各節點而命名的 id，從 2 依序編碼</span><br><span class="line">datadir=/usr/local/mysql/data  # 存放資料的目錄</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line"># SQL node</span><br><span class="line">hostname= # Remote IP address</span><br><span class="line">NodeId=3</span><br></pre></td></tr></table></figure>
<h3 id="測試是否能啟動">測試是否能啟動</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo ndb_mgmd -f /var/lib/mysql-cluster/config.ini</span><br></pre></td></tr></table></figure>
<p>會出現以下訊息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MySQL Cluster Management Server mysql-8.0.21 ndb-8.0.21</span><br></pre></td></tr></table></figure>
<p>代表啟用成功。</p>
<p><font color="salmon"><strong>補充</strong></font><br>
如果啟動後需要修改 cluster 內的 IP ，更新完 config.ini 後，啟動時改成下面指令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ndb_mgmd -f /var/lib/mysql-cluster/config.ini configdir=/var/lib/mysql-cluster --reload --initial</span><br></pre></td></tr></table></figure>
<h3 id="將程序設為-service">將程序設為 service</h3>
<p>先關掉剛剛測試的程序，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo pkill -f ndb_mgmd</span><br></pre></td></tr></table></figure>
<p>建立服務檔，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo vi /etc/systemd/system/ndb_mgmd.service</span><br></pre></td></tr></table></figure>
<p>貼上以下內容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=MySQL NDB Cluster Management Server</span><br><span class="line">After=network.target auditd.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/sbin/ndb_mgmd -f /var/lib/mysql-cluster/config.ini --configdir=/var/lib/mysql-cluster/</span><br><span class="line">ExecReload=/bin/kill -HUP $MAINPID</span><br><span class="line">KillMode=process</span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<p>重新載入設定檔並將服務設為開機啟動，最後啟動服務。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl daemon-reload</span><br><span class="line">$ sudo systemctl enable ndb_mgmd</span><br><span class="line">$ sudo systemctl start ndb_mgmd</span><br></pre></td></tr></table></figure>
<p>查案服務狀態，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$sudo systemctl status ndb_mgmd</span><br></pre></td></tr></table></figure>
<p>如果得到以下回復代表 management node 已經成功啟動。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">． ndb_mgmd.service - MySQL NDB Cluster Management Server</span><br><span class="line">   Loaded: loaded (/etc/systemd/system/ndb_mgmd.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Wed 2020-08-05 15:04:39 CST; 5s ago</span><br><span class="line">  Process: 8445 ExecStart=/usr/sbin/ndb_mgmd -f /var/lib/mysql-cluster/config.ini --configdir=/var/lib/mysql-cluster/ (code=exited, status=0/SUCCESS)</span><br><span class="line"> Main PID: 8454 (ndb_mgmd)</span><br><span class="line">    Tasks: 12 (limit: 7372)</span><br><span class="line">   CGroup: /system.slice/ndb_mgmd.service</span><br><span class="line">           └─8454 /usr/sbin/ndb_mgmd -f /var/lib/mysql-cluster/config.ini --configdir=/var/lib/mysql-cluster/</span><br></pre></td></tr></table></figure>
<p>或是看 1186 port 有沒有被 ndb_mgmd 占用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo netstat -plntu</span><br></pre></td></tr></table></figure>
<h2 id="Data-Node">Data Node</h2>
<h3 id="安裝並下載依賴程式">安裝並下載依賴程式</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd ~</span><br><span class="line">$ wget https://dev.mysql.com/get/Downloads/Mysql-Cluster-8.0/mysql-cluster-community-data-node_8.0.21-1ubuntu18.04_amd64.deb</span><br><span class="line">$ sudo apt update</span><br><span class="line">$ sudo apt install -y libclass-methodmaker-perl</span><br><span class="line">$ sudo dpkg -i mysql-cluster-community-data-node_8.0.21-1ubuntu18.04_amd64.deb</span><br></pre></td></tr></table></figure>
<h3 id="配置">配置</h3>
<p>建立mysql配置檔 my.cnf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vi /etc/my.cnf</span><br></pre></td></tr></table></figure>
<p>貼上以下內容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysql_cluster]</span><br><span class="line">ndb-connectstring=10.1.5.31</span><br></pre></td></tr></table></figure>
<p>其中 ndb-connectstrings 代表 cluster manager 的位址。</p>
<p>根據管理者的配置，建立data node的數據存放目錄。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo mkdir -p /usr/local/mysql/data</span><br></pre></td></tr></table></figure>
<h3 id="測試是否能啟動-2">測試是否能啟動</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo ndbd</span><br></pre></td></tr></table></figure>
<p>會出現以下訊息，代表啟用成功。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2020-08-05 15:31:59 [ndbd] INFO     -- Angel connected to &#x27;10.1.5.31:1186&#x27;</span><br><span class="line">2020-08-05 15:31:59 [ndbd] INFO     -- Angel allocated nodeid: 2</span><br></pre></td></tr></table></figure>
<h3 id="將程序設為-service-2">將程序設為 service</h3>
<p>先關掉剛剛測試的程序，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo pkill -f ndbd</span><br></pre></td></tr></table></figure>
<p>建立服務檔，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo vi /etc/systemd/system/ ndbd.service</span><br></pre></td></tr></table></figure>
<p>貼上以下內容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=MySQL NDB Data Node Daemon</span><br><span class="line">After=network.target auditd.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/sbin/ndbd</span><br><span class="line">ExecReload=/bin/kill -HUP $MAINPID</span><br><span class="line">KillMode=process</span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<p>重新載入設定檔並將服務設為開機啟動，最後啟動服務。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl daemon-reload</span><br><span class="line">$ sudo systemctl enable ndbd</span><br><span class="line">$ sudo systemctl start ndbd</span><br></pre></td></tr></table></figure>
<p>查案服務狀態，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$sudo systemctl status ndbd</span><br></pre></td></tr></table></figure>
<p>如果得到以下回復代表 data node 已經成功啟動。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">． ndbd.service - MySQL NDB Data Node Daemon</span><br><span class="line">   Loaded: loaded (/etc/systemd/system/ndbd.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Wed 2020-08-05 15:47:54 CST; 7s ago</span><br><span class="line">  Process: 1883 ExecStart=/usr/sbin/ndbd (code=exited, status=0/SUCCESS)</span><br><span class="line"> Main PID: 1894 (ndbd)</span><br><span class="line">    Tasks: 46 (limit: 7372)</span><br><span class="line">   CGroup: /system.slice/ndbd.service</span><br><span class="line">           ├─1894 /usr/sbin/ndbd</span><br><span class="line">           └─1896 /usr/sbin/ndbd</span><br><span class="line"></span><br><span class="line">Aug 05 15:47:54 httr2 systemd[1]: Starting MySQL NDB Data Node Daemon...</span><br><span class="line">Aug 05 15:47:54 httr2 ndbd[1883]: 2020-08-05 15:47:54 [ndbd] INFO     -- Angel connected to &#x27;10.1.5.31:1186&#x27;</span><br><span class="line">Aug 05 15:47:54 httr2 ndbd[1883]: 2020-08-05 15:47:54 [ndbd] INFO     -- Angel allocated nodeid: 2</span><br><span class="line">Aug 05 15:47:54 httr2 systemd[1]: Started MySQL NDB Data Node Daemon.</span><br></pre></td></tr></table></figure>
<p>看 netstat 中是否有被 ndbd 進程占用的 port。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo netstat -plntu</span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name</span><br><span class="line">tcp        0      0 10.1.5.32:35499          0.0.0.0:*               LISTEN      24377/ndbd</span><br><span class="line">tcp        0      0 10.1.5.32:35189          0.0.0.0:*               LISTEN      24377/ndbd</span><br></pre></td></tr></table></figure>
<h2 id="SQL-Node">SQL Node</h2>
<h3 id="下載">下載</h3>
<p>因為也是跟 data node 一樣把壓縮檔放在家目錄下，所以另外建一個資料夾 install 存放 SQL Node 的安裝檔。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd ~</span><br><span class="line">$ wget https://dev.mysql.com/get/Downloads/Mysql-Cluster-8.0/mysql-cluster_8.0.21-1ubuntu18.04_amd64.deb-bundle.tar</span><br><span class="line">$ mkdir install</span><br><span class="line">$ tar -xvf mysql-cluster_8.0.21-1ubuntu18.04_amd64.deb-bundle.tar -C install/</span><br><span class="line">$ cd install</span><br></pre></td></tr></table></figure>
<h3 id="下載依賴包">下載依賴包</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo apt update</span><br><span class="line">$ sudo apt install -y libaio1 libmecab2</span><br></pre></td></tr></table></figure>
<h3 id="開始安裝-MySQL-Cluster-dependencies">開始安裝 MySQL Cluster dependencies</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo dpkg -i mysql-common_8.0.21-1ubuntu18.04_amd64.deb</span><br><span class="line">$ sudo dpkg -i mysql-cluster-community-client-core_8.0.21-1ubuntu18.04_amd64.deb</span><br><span class="line">$ sudo dpkg -i mysql-cluster-community-client_8.0.21-1ubuntu18.04_amd64.deb</span><br><span class="line">$ sudo dpkg -i mysql-client_8.0.21-1ubuntu18.04_amd64.deb</span><br><span class="line">$ sudo dpkg -i mysql-cluster-community-server-core_8.0.21-1ubuntu18.04_amd64.deb</span><br><span class="line">$ sudo dpkg -i mysql-cluster-community-server_8.0.21-1ubuntu18.04_amd64.deb</span><br></pre></td></tr></table></figure>
<p>在安裝mysql-cluster-community-server 的過程中，會要求輸入 mysql root 的密碼。<br>
<img src="https://imgur.com/Cyu2sP9.png" alt=""><br>
之後會詢問是否要使用 mysql 8.0 提供的新功能加強密碼加密，<br>
<img src="https://imgur.com/Qw2RtaH.png" alt=""><br>
這邊選擇保持原本的密碼方式, 兼容性較高。（此設置在安裝完畢後可依需求改變）<br>
<img src="https://imgur.com/7s7gi8C.png" alt=""></p>
<p>安裝 MySQL server binary。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo dpkg -i mysql-server_8.0.21-1ubuntu18.04_amd64.deb</span><br></pre></td></tr></table></figure>
<h3 id="重配置-my-cnf-檔案">重配置 my.cnf 檔案</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo vi /etc/mysql/my.cnf</span><br></pre></td></tr></table></figure>
<p>在末端加上以下內容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">ndbcluster</span><br><span class="line"></span><br><span class="line">[mysql_cluster]</span><br><span class="line">ndb-connectstring=10.1.5.31</span><br><span class="line">bind-address= 0.0.0.0</span><br></pre></td></tr></table></figure>
<p>配置檔內容說明如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"># mysqld 程序的配置</span><br><span class="line">ndbcluster</span><br><span class="line"># 執行 ndb 儲存引擎</span><br><span class="line"></span><br><span class="line">[mysql_cluster]</span><br><span class="line">ndb-connectstring=10.1.5.31</span><br><span class="line"># management node 位址</span><br><span class="line">bind-address= 0.0.0.0</span><br><span class="line"># 代表可提供外部網路連線 remote 管理，若沒有此參數的話，SQL 只能在 local 端使用</span><br></pre></td></tr></table></figure>
<h3 id="重啟-mysql-service-套用以上變更">重啟 mysql service 套用以上變更</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl restart mysql</span><br></pre></td></tr></table></figure>
<p>加入開機啟動。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl enable mysql</span><br></pre></td></tr></table></figure>
<h2 id="驗證集群安裝">驗證集群安裝</h2>
<p>進入 <code>SQL node</code> 所在的機器開啟 <code>ndb_mgm</code> console 連進 management node。輸入 <code>show</code>，可列出 cluster 的整體架構。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ndb_mgm</span><br><span class="line">&gt; show</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ndb_mgm</span><br><span class="line">-- NDB Cluster -- Management Client --</span><br><span class="line">ndb_mgm&gt; show</span><br><span class="line">Connected to Management Server at: 10.1.5.31:1186</span><br><span class="line">Cluster Configuration</span><br><span class="line">---------------------</span><br><span class="line">[ndbd(NDB)]     2 node(s)</span><br><span class="line">id=2    @10.1.5.32  (mysql-8.0.21 ndb-8.0.21, Nodegroup: 0)</span><br><span class="line">id=3    @10.1.5.33  (mysql-8.0.21 ndb-8.0.21, Nodegroup: 0, *)</span><br><span class="line"></span><br><span class="line">[ndb_mgmd(MGM)] 1 node(s)</span><br><span class="line">id=1    @10.1.5.31  (mysql-8.0.21 ndb-8.0.21)</span><br><span class="line"></span><br><span class="line">[mysqld(API)]   2 node(s)</span><br><span class="line">id=4    @10.1.5.32  (mysql-8.0.21 ndb-8.0.21)</span><br><span class="line">id=5    @10.1.5.33  (mysql-8.0.21 ndb-8.0.21)</span><br><span class="line"></span><br><span class="line">ndb_mgm&gt; 2 STATUS</span><br><span class="line">Node 2: started (mysql-8.0.21 ndb-8.0.21)</span><br><span class="line"></span><br><span class="line">ndb_mgm&gt;</span><br></pre></td></tr></table></figure>
<p>SQL node 所在的機器開啟MySQL Server，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mysql -u root -p </span><br></pre></td></tr></table></figure>
<p>進入 mysql 後，下下面指令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; SHOW ENGINE NDB STATUS \G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">  Type: ndbclus</span><br><span class="line">  Name: connection</span><br><span class="line">Status: cluster_node_id=4, connected_host=10.1.5.31, connected_port=1186, number_of_data_nodes=2, number_of_ready_da                                                                           ta_nodes=2, connect_count=0</span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">  Type: ndbclus</span><br><span class="line">  Name: NdbTransaction</span><br><span class="line">Status: created=2, free=2, sizeof=392</span><br><span class="line">*************************** 3. row ***************************</span><br><span class="line">  Type: ndbclus</span><br><span class="line">  Name: NdbOperation</span><br><span class="line">Status: created=4, free=4, sizeof=944</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>表示成功連到 mysql cluster。</p>
<h2 id="使用遠端-workblench-進行連線">使用遠端 workblench 進行連線</h2>
<p>先進入 SQL node 在本地端新建一個使用者並賦予存取所有位置的權限：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mysql -u root -p</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql &gt; CREATE USER &#x27;user&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;password&#x27;;</span><br><span class="line">mysql &gt; GRANT ALL ON *.* TO &#x27;user&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure>
<p>開啟 MySQLworkblench 新增連線對象為 cluster 內任何一個 SQL node，便可成功連線。</p>
<h3 id="建立資料表">建立資料表</h3>
<p>建立資料表時須指定使用 ndbcluster 引擎，才可多點同步。<br>
<img src="https://imgur.com/yekW0XQ.png" alt=""></p>
<h3 id="確認">確認</h3>
<p>寫入資料，<br>
<img src="https://imgur.com/eE3gWj4.png" alt=""></p>
<p>進入另一台 SQL node 查看資料是否有同步。<br>
<img src="https://imgur.com/JfkmpZD.png" alt=""></p>
]]></content>
      <categories>
        <category>Database</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL-Cluster</tag>
        <tag>NDB Clster</tag>
      </tags>
  </entry>
  <entry>
    <title>[Node-RED] 產線模擬</title>
    <url>/Node-RED-%E7%94%A2%E7%B7%9A%E6%A8%A1%E6%93%AC-POC/</url>
    <content><![CDATA[<h3 id="Production-Line-gateway1">Production Line (gateway1)</h3>
<h4 id="初始流程">初始流程</h4>
<span id="more"></span>
<p><img src="https://imgur.com/PYT3rrq.png" alt=""><br>
首先第一個 inject flow (inject once at start) 會去下 http request 去跟事先寫好的 NodeJS express http server (<a href="https://www.footmark.info/programming-language/nodejs/nodejs-restful-webapi-mysql/">參考這篇</a>)索取事先放在 MySQL 的訂單資料 (目前僅設計為一筆)，function node 會放所有會使用到的 global 變數。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">global</span>.set(<span class="string">&quot;wo&quot;</span>,msg.payload[<span class="number">0</span>].wo);</span><br><span class="line"><span class="built_in">global</span>.set(<span class="string">&quot;totalPcs&quot;</span>,msg.payload[<span class="number">0</span>].qty);</span><br><span class="line">node.warn(<span class="built_in">global</span>.get(<span class="string">&#x27;wo&#x27;</span>));</span><br><span class="line">node.warn(<span class="built_in">global</span>.get(<span class="string">&#x27;totalPcs&#x27;</span>));</span><br><span class="line"><span class="built_in">global</span>.set(<span class="string">&#x27;startTime&#x27;</span>,<span class="number">1603670400</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">global</span>.set(<span class="string">&#x27;m1Status&#x27;</span>,<span class="string">&#x27;Running&#x27;</span>);</span><br><span class="line"><span class="built_in">global</span>.set(<span class="string">&quot;m1DonePcs&quot;</span>,<span class="number">0</span>);</span><br><span class="line"><span class="comment">// node.warn(global.get(&#x27;m1DonePcs&#x27;));</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">global</span>.set(<span class="string">&#x27;m2Status&#x27;</span>,<span class="string">&#x27;Stop&#x27;</span>);</span><br><span class="line"><span class="built_in">global</span>.set(<span class="string">&quot;m2DonePcs&quot;</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">global</span>.set(<span class="string">&#x27;m3Status&#x27;</span>,<span class="string">&#x27;Stop&#x27;</span>);</span><br><span class="line"><span class="built_in">global</span>.set(<span class="string">&quot;m3DonePcs&quot;</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">global</span>.set(<span class="string">&quot;ng&quot;</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">global</span>.set(<span class="string">&quot;ok&quot;</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> msg;</span><br></pre></td></tr></table></figure>
<h4 id="送片流程">送片流程</h4>
<p>接下來的 <code>START!!</code> inject flow 會用 link node 形成一個大迴圈，去循迴產線。進入每一台機器前會有一個 switch node 判斷目前機器運行狀態是 <code>Running</code> 還是 <code>Idle</code>，在 <code>Running</code> 條件下，模擬機器製作一片的時間 <code>Producing...</code> 後，將每一台的完成片數加一，再將機器狀態設為閒置。接著再用 link node 連接回自己的 switch 判斷。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">global</span>.set(<span class="string">&#x27;m1DonePcs&#x27;</span>,<span class="built_in">global</span>.get(<span class="string">&#x27;m1DonePcs&#x27;</span>)+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">global</span>.set(<span class="string">&#x27;m1Status&#x27;</span>,<span class="string">&#x27;Idle&#x27;</span>);</span><br><span class="line"></span><br><span class="line">node.warn(<span class="string">&#x27;m1的第&#x27;</span>+<span class="built_in">global</span>.get(<span class="string">&#x27;m1DonePcs&#x27;</span>)+<span class="string">&#x27;完成&#x27;</span>);</span><br><span class="line">node.warn(<span class="built_in">global</span>.get(<span class="string">&#x27;m1Status&#x27;</span>));</span><br><span class="line"><span class="comment">// node.warn 為了 debug 方便，將顯示於 debug tab</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> msg;</span><br></pre></td></tr></table></figure>
<p>在 <code>Idle</code> 條件下，讓機器休息三秒模擬過站，再把第二台機器喚醒，並準備送進下一片，再把自己的狀態改成運作。結束後 link 到第二台機器的 switch。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">global</span>.set(<span class="string">&#x27;m2Status&#x27;</span>,<span class="string">&#x27;Running&#x27;</span>);</span><br><span class="line">node.warn(<span class="string">&quot;m1第&quot;</span>+ <span class="built_in">global</span>.get(<span class="string">&#x27;m1DonePcs&#x27;</span>)+<span class="string">&quot;片完成, 開始送到 m2&quot;</span>);</span><br><span class="line"><span class="comment">// 機器一把自己的狀態改成運作</span></span><br><span class="line"><span class="built_in">global</span>.set(<span class="string">&#x27;m1Status&#x27;</span>,<span class="string">&#x27;Running&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> msg;</span><br></pre></td></tr></table></figure>
<div class="info">
<p>由此可推第一片與下一片的時間差為 producing 時間加上過站三秒，因此 START!! inject node 的 intervel 時間設為上述時間差再加上三秒(送到第一台機器的過站時間)。</p>
</div>
<p>機器二為 <code>Running</code> 時完成片數加一、狀態變閒置；機器二做完後為 <code>Idle</code> 時，將機器三的狀態喚醒；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">global</span>.set(<span class="string">&#x27;m3Status&#x27;</span>,<span class="string">&#x27;Running&#x27;</span>);</span><br><span class="line">node.warn(<span class="string">&quot;m2第&quot;</span>+ <span class="built_in">global</span>.get(<span class="string">&#x27;m2DonePcs&#x27;</span>)+<span class="string">&quot;片完成,開始送到 m3&quot;</span>);</span><br><span class="line">node.warn(<span class="built_in">global</span>.get(<span class="string">&#x27;m2Status&#x27;</span>));</span><br><span class="line"><span class="keyword">return</span> msg;</span><br></pre></td></tr></table></figure>
<p>機器三為 <code>Running</code> 時完成片數加一、狀態變閒置；機器三做完後為 <code>Idle</code> 時，<strong>就結束這一片產品的流程了!</strong> 這邊要特別想一下，不用再接回機器一，因為前面已經設了 intervel，第二片會自己送進來，且機器一的狀態是自己控制的，因為第一片完成後就進第二片了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">node.warn(<span class="string">&#x27;m3 第 &#x27;</span> + <span class="built_in">global</span>.get(<span class="string">&#x27;m3DonePcs&#x27;</span>) + <span class="string">&#x27; 片完成&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> msg;</span><br></pre></td></tr></table></figure>
<h4 id="模擬資料流程">模擬資料流程</h4>
<p>從第三個 flow 開始就是模擬產線上各台機器的 sensor 資料了。<br>
第一台機器每秒更新</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> startTime = <span class="built_in">global</span>.get(<span class="string">&#x27;startTime&#x27;</span>);</span><br><span class="line">msg.payload=&#123;</span><br><span class="line">    <span class="attr">vaccum</span> : &#123;</span><br><span class="line">        <span class="attr">content</span>: (<span class="built_in">Math</span>.random()*<span class="number">1.5</span>).toFixed(<span class="number">1</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">silverTarget</span>: &#123;</span><br><span class="line">        <span class="attr">content</span>: <span class="built_in">Math</span>.floor(((<span class="keyword">new</span> <span class="built_in">Date</span>().getTime()/<span class="number">1000</span>)-startTime)/<span class="number">60</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">depositionspeed</span>: &#123;</span><br><span class="line">        <span class="attr">content</span>: (<span class="number">1000</span>+<span class="built_in">Math</span>.random()).toFixed(<span class="number">2</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">m1Status</span>: &#123;</span><br><span class="line">        <span class="attr">content</span>: <span class="built_in">global</span>.get(<span class="string">&#x27;m1Status&#x27;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">m1DonePcs</span>: &#123;</span><br><span class="line">        <span class="attr">content</span>: <span class="built_in">global</span>.get(<span class="string">&#x27;m1DonePcs&#x27;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">wo</span>: &#123;</span><br><span class="line">        <span class="attr">content</span>:<span class="built_in">global</span>.get(<span class="string">&#x27;wo&#x27;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">totalPcs</span>: &#123;</span><br><span class="line">        <span class="attr">content</span>: <span class="string">&quot; / &quot;</span> + <span class="built_in">global</span>.get(<span class="string">&#x27;totalPcs&#x27;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> msg;</span><br></pre></td></tr></table></figure>
<p>datasource node 按照 msg.payload object 定義的 key 接收資料。<br>
<img src="https://imgur.com/a6srloB.png" alt=""></p>
<p>第二台機器每秒更新</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> pressure, humidity, particle, m2Status, m2DonePcs;</span><br><span class="line">pressure = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">20</span>+<span class="number">70</span>).toFixed(<span class="number">0</span>);</span><br><span class="line">humidity = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">40</span>+<span class="number">30</span>).toFixed(<span class="number">0</span>);</span><br><span class="line">particle = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">50</span>+<span class="number">60</span>).toFixed(<span class="number">0</span>);</span><br><span class="line">msg.payload=&#123;</span><br><span class="line">    <span class="attr">pressure</span> : &#123;</span><br><span class="line">        <span class="attr">content</span>: pressure,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">pressureAlarm</span> : &#123;</span><br><span class="line">        <span class="attr">turnOn</span>: <span class="number">1</span>, <span class="comment">// 0: Turn OFF, 1: Turn ON</span></span><br><span class="line">        <span class="attr">color</span>: pressure&gt;=<span class="number">88</span> || pressure&lt;=<span class="number">73</span>?<span class="number">0</span>:<span class="number">2</span>, <span class="comment">// color index</span></span><br><span class="line">        <span class="attr">mode</span>: pressure&gt;=<span class="number">88</span> || pressure&lt;=<span class="number">73</span>&gt;=<span class="number">500</span>?<span class="number">1</span>:<span class="number">0</span> <span class="comment">// 0: means stable, 1: means blink</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">humidity</span> :  &#123;</span><br><span class="line">        <span class="attr">content</span>: humidity,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">humidityAlarm</span> : &#123;</span><br><span class="line">        <span class="attr">turnOn</span>: <span class="number">1</span>, <span class="comment">// 0: Turn OFF, 1: Turn ON</span></span><br><span class="line">        <span class="attr">color</span>: humidity&gt;=<span class="number">67</span> || humidity&lt;=<span class="number">35</span>?<span class="number">0</span>:<span class="number">2</span>, <span class="comment">// color index</span></span><br><span class="line">        <span class="attr">mode</span>: humidity&gt;=<span class="number">67</span> || humidity&lt;=<span class="number">35</span>?<span class="number">1</span>:<span class="number">0</span> <span class="comment">// 0: means stable, 1: means blink</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">particle</span> :  &#123;</span><br><span class="line">        <span class="attr">content</span>: particle,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">particleAlarm</span> : &#123;</span><br><span class="line">        <span class="attr">turnOn</span>: <span class="number">1</span>, <span class="comment">// 0: Turn OFF, 1: Turn ON</span></span><br><span class="line">        <span class="attr">color</span>: particle&gt;=<span class="number">105</span>?<span class="number">0</span>:<span class="number">2</span>, <span class="comment">// color index</span></span><br><span class="line">        <span class="attr">mode</span>:particle&gt;=<span class="number">105</span>?<span class="number">1</span>:<span class="number">0</span> <span class="comment">// 0: means stable, 1: means blink</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">m2Status</span>: &#123;</span><br><span class="line">        <span class="attr">content</span>: <span class="built_in">global</span>.get(<span class="string">&#x27;m2Status&#x27;</span>),</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">m2DonePcs</span>: &#123;</span><br><span class="line">        <span class="attr">content</span>: <span class="built_in">global</span>.get(<span class="string">&#x27;m2DonePcs&#x27;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> msg;</span><br></pre></td></tr></table></figure>
<p>第三台機器有兩個 flow，第一個 flow 每秒抓取機器狀態 m3Status 以及 m3DonePcs 完成數(代碼參考上兩台)，第二個 flow 用來模擬機器三檢測機的不良數，這邊的 intervel 也須留意設為一片的製作時間加上一兩秒，不能設為每秒抓取的原因是因為只要發現完成數除以某值整除的話就會有一片不良品，若在製作時間內都是整除該值的話，每秒抓取會每秒不良品加一，所以間格時間應該設為一片的製作時間。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">global</span>.get(<span class="string">&#x27;m3DonePcs&#x27;</span>) &gt; <span class="number">0</span> &amp;&amp; (<span class="built_in">global</span>.get(<span class="string">&#x27;m3DonePcs&#x27;</span>) % <span class="number">5</span>)===<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="built_in">global</span>.set(<span class="string">&#x27;ng&#x27;</span>,<span class="built_in">global</span>.get(<span class="string">&#x27;ng&#x27;</span>)+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">global</span>.set(<span class="string">&#x27;ok&#x27;</span>,<span class="built_in">global</span>.get(<span class="string">&#x27;m3DonePcs&#x27;</span>)-<span class="built_in">global</span>.get(<span class="string">&#x27;ng&#x27;</span>));</span><br><span class="line">msg.payload=&#123;</span><br><span class="line">    <span class="attr">ng</span> : &#123;</span><br><span class="line">        <span class="attr">content</span>: <span class="built_in">global</span>.get(<span class="string">&#x27;ng&#x27;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">ok</span> : &#123;</span><br><span class="line">        <span class="attr">content</span>: <span class="built_in">global</span>.get(<span class="string">&#x27;ok&#x27;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> msg;</span><br></pre></td></tr></table></figure>
<h4 id="Dashboard-畫面">Dashboard 畫面</h4>
<p><img src="https://imgur.com/j1N5IbE.gif" alt=""></p>
<h3 id="Environment-Monitor-gateway2">Environment Monitor (gateway2)</h3>
<p><img src="https://imgur.com/1mz3O3j.png" alt=""><br>
將使用 modsim32 (<a href="https://www.win-tech.com/html/demos.htm">下載</a>、<a href="https://www.findserialnumber.net/modsim-32-4-a00-04-serial-number-keygen-7d50fa31.html">啟用序號</a>) 模擬環境的四種 sensor 資料，再使用 modbus node 統一接收後拆開丟到對應的 datasource node。<br>
<img src="https://imgur.com/kbDlXLP.png" alt=""></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> temperature=msg.payload.sensors.results[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> humidity=msg.payload.sensors.results[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> co2=msg.payload.sensors.results[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> pm25=msg.payload.sensors.results[<span class="number">3</span>];</span><br><span class="line">msg.payload=&#123;</span><br><span class="line">    <span class="attr">temperature</span> : &#123;</span><br><span class="line">        <span class="attr">content</span>: temperature,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">humidity</span>: &#123;</span><br><span class="line">        <span class="attr">content</span>: humidity,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">co2</span>: &#123;</span><br><span class="line">        <span class="attr">content</span>: co2,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">pm25</span>: &#123;</span><br><span class="line">        <span class="attr">content</span>: pm25,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> msg;</span><br></pre></td></tr></table></figure>
<h3 id="Edge-Server">Edge Server</h3>
<p>因為一鍵上雲的設計，從 gateway 部屬上 edge server 的 node 不能再次被 deploy 到其他伺服器，因為邊緣伺服器還打算部屬到雲端伺服器中，故這邊稍微做了點修改。<br>
<img src="https://imgur.com/rDnCNiZ.png" alt=""><br>
將從地端部屬上來的 flow 中的 datasource 複製到另一個自己的 flow 中，再宣告一個 global 變數接收上來的資料。收到的資料內容如下:<br>
<img src="https://imgur.com/NzQ7BQw.png" alt=""><br>
將字串變回 JSON 後再接到自己的 datasource 中，msg.payload 的資料格式依照使用的 chart 不同而不同。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="built_in">JSON</span>.parse(<span class="built_in">global</span>.get(<span class="string">&quot;gw1&quot;</span>));</span><br><span class="line"><span class="comment">//node.warn(Number(obj.temperature.content));</span></span><br><span class="line"><span class="built_in">global</span>.set(<span class="string">&quot;temp&quot;</span>,<span class="built_in">Number</span>(obj.temperature.content));</span><br><span class="line"><span class="built_in">global</span>.set(<span class="string">&quot;humi&quot;</span>,<span class="built_in">Number</span>(obj.humidity.content));</span><br><span class="line"><span class="built_in">global</span>.set(<span class="string">&quot;co&quot;</span>,<span class="built_in">Number</span>(obj.co2.content));</span><br><span class="line"><span class="built_in">global</span>.set(<span class="string">&quot;pm&quot;</span>,<span class="built_in">Number</span>(obj.pm25.content));</span><br><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">msg.payload=&#123;</span><br><span class="line">    <span class="attr">tstamp</span>: now,</span><br><span class="line">    <span class="attr">temperature</span>: <span class="built_in">global</span>.get(<span class="string">&quot;temp&quot;</span>),</span><br><span class="line">    <span class="attr">humidity</span>: <span class="built_in">global</span>.get(<span class="string">&quot;humi&quot;</span>),</span><br><span class="line">    <span class="attr">co2</span>: <span class="built_in">global</span>.get(<span class="string">&quot;co&quot;</span>),</span><br><span class="line">    <span class="attr">pm25</span>: <span class="built_in">global</span>.get(<span class="string">&quot;pm&quot;</span>),</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> msg;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="built_in">JSON</span>.parse(<span class="built_in">global</span>.get(<span class="string">&quot;gw2&quot;</span>));</span><br><span class="line">msg.payload=&#123;</span><br><span class="line">    <span class="attr">m1Status</span>: &#123;</span><br><span class="line">        <span class="attr">content</span>: obj.m1Status.content,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">m1DonePcs</span>: &#123;</span><br><span class="line">        <span class="attr">content</span>: obj.m1DonePcs.content,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">wo</span>: &#123;</span><br><span class="line">        <span class="attr">content</span>: obj.wo.content,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">totalPcs</span>: &#123;</span><br><span class="line">        <span class="attr">content</span>: obj.totalPcs.content,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> msg;</span><br></pre></td></tr></table></figure>
<p>dashboard 畫面如下:<br>
<img src="https://imgur.com/fg9Yays.gif" alt=""></p>
]]></content>
      <categories>
        <category>Programming</category>
        <category>Node-RED</category>
      </categories>
      <tags>
        <tag>Node-RED</tag>
        <tag>IIoT</tag>
      </tags>
  </entry>
  <entry>
    <title>[Node.js] module、require &amp; exports</title>
    <url>/Node-js-module%E3%80%81require-exports/</url>
    <content><![CDATA[<h3 id="Module-Package-Liberary">Module/Package/Liberary</h3>
<p>當程式裡面有很多個功能，可以把它拆開成一個一個的模組，之後才方便維護，因為彼此的相依性被獨立開來了，而且同一個功能不用一直重寫，只要把 module 匯入就好。</p>
<span id="more"></span>
<p>另外還可以在程式中使用別人寫好的 module，以減少開發時間。<br>
<img src="https://imgur.com/TSHVodQ.png" alt=""></p>
<h3 id="在程式裡使用-node-module-require">在程式裡使用 node module - require</h3>
<p>require 中直接寫要引入的 module 名稱，然後取一個變數給它。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var os = require(&#x27;os&#x27;)</span><br><span class="line">var http = require(&#x27;http&#x27;)</span><br></pre></td></tr></table></figure>
<p>如果是自己寫的非官方 module，在 require 時沒有加路徑的話會先從本身檔案的同路徑下找 (./)，沒有找到的話會去 node-module 資料夾裡找。</p>
<h3 id="把-module-借給別人用-exports">把 module 借給別人用 - exports</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">double</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n*<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = double</span><br></pre></td></tr></table></figure>
<p>在其他程式呼叫時，就是 module.exports 輸出的東西，意即 module.exports 丟什麼，require 時的變數就會是什麼東西。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">var</span> double = <span class="built_in">require</span>(<span class="string">&#x27;./app.js&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(double(<span class="number">3</span>))  <span class="comment">//輸出 6</span></span><br></pre></td></tr></table></figure>
<p>其中：</p>
<ol>
<li>require 的檔案要指名路徑</li>
<li>可省略副檔名(一般都是不打居多)</li>
</ol>
<p>但在大部分的場合下我們不會只輸出一個東西(function , variable…)，所以用以下兩種方式</p>
<h4 id="module-exports-物件">module.exports={物件}</h4>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    <span class="attr">double</span>: double</span><br><span class="line">    <span class="attr">triple</span>: <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n*<span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 require 端就可以：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">&#x27;./app&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(app.double(<span class="number">2</span>))</span><br><span class="line"><span class="built_in">console</span>.log(app.triple(<span class="number">3</span>))</span><br></pre></td></tr></table></figure>
<h4 id="exports-輸出的東西">exports.&lt;輸出的東西&gt;</h4>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.double = double</span><br><span class="line"><span class="built_in">exports</span>.triple= <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n*<span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 require 端就可以：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">&#x27;./app&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(app.double(<span class="number">2</span>))</span><br><span class="line"><span class="built_in">console</span>.log(app.triple(<span class="number">3</span>))</span><br></pre></td></tr></table></figure>
<div class="info">
<p>使用 export.<sth> 輸出的東西，都會是物件！ 而使用 module.export 輸出可以是數值、陣列、函式、或物件。</p>
</div>
<h6 id="Source">Source</h6>
<p>[All] 此篇為觀看 Lidemy JS102 的筆記，圖片來源取自上課影片</p>
]]></content>
      <categories>
        <category>Programming</category>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>module</tag>
      </tags>
  </entry>
  <entry>
    <title>[Node.js] npm 簡介</title>
    <url>/Node-js-npm-%E7%B0%A1%E4%BB%8B/</url>
    <content><![CDATA[<h3 id="npm">npm</h3>
<p>Node Package Manager，package 就是別人寫好的套件，npm 就是幫你管理 Node.js 套件的管理系統。裝完 Node.js 就會自動把 npm 裝好，下 <code>npm -v</code> 可以查看版本。</p>
<span id="more"></span>
<h4 id="npm-init">npm init</h4>
<p>第一次使用 npm 套件的話下 <code>npm init</code> 初始化，填寫專案相關資訊後，就會自動產生 <code>package.json</code> 的檔案。</p>
<!-- more -->
<h4 id="package-json">package.json</h4>
<p>如果在程式中使用很多套件，專案就會變得非常的大，在搬遷或是想 git push 分享的話會變得很麻煩。此時只需要一個用來紀錄專案中使用的套件列表以其版本，就能解決。<br>
當別人拿到你的專案的時候，只要下 <code>$ npm install</code> 就會自動安裝完所有所需套件了！<br>
<img src="https://imgur.com/0d5ApKr.png" alt=""></p>
<ul>
<li>dependencies：紀錄專案使用了哪些套件。</li>
<li>devDependencies：紀錄<strong>開發中</strong>用的套件。</li>
<li>script：<br>
可以在下各種 npm　指令時依照 script 做一些事情。例如說一個程式的進入點除了可以在專案描述的時候特別指出 main．另外就是在 script 寫自動執行入口程式的腳本。<br>
<img src="https://imgur.com/NtBC8vZ.png" alt=""><br>
之後只要下 <code>$ npm run start</code> 就能跑起程式了，<code>npm run start</code> 算是約定俗成的入口程式指令。</li>
</ul>
<h4 id="npm-install">npm install</h4>
<p>接著只要在專案目錄下，下 <code>npm install &lt;moduleName&gt;</code> 安裝套件。裝完後目錄下會多了一個 <code>package-lock.json</code> &amp; <code>node_modules/</code>。</p>
<ul>
<li><strong>package-lock.json</strong> 裡記錄了安裝的套件中各自又依賴了哪些套件。</li>
<li><strong>node_modules/</strong> 就是存放各套件程式碼的資料夾，通常會很大、不會被推到 git server，要 git pull 下來使用的人只需用 package.json 透過 npm install 來安裝指定套件。<br>
p.s. 如果是在子資料夾下 npm install，則會去記錄在上一層專案目錄下的 package.json 中，如果堅持要把 package 裝在子目錄下的話，就在子目錄下下 npm init 即可。</li>
</ul>
<h5 id="–save-自動幫你加進-package-json">–save 自動幫你加進 package.json</h5>
<p>開發的途中只要隨時有新的套件想安裝的話，不需要手動去更改 package.json 的檔案，只需要在 <code>npm install</code> 的時候加上 <code>--save</code> 的參數即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install http-server --save</span><br><span class="line">$ npm install left-pad --save-dev //自動記錄在 devDependencies 區域．僅供開發時用到的 module</span><br></pre></td></tr></table></figure>
<div class="warning">
<p>現在新版的 npm 不用加 --save 參數也會自動 save 到 package.json 了。</p>
</div>
<hr>
<h3 id="yarn：除了-npm-的另一種選擇">yarn：除了 npm 的另一種選擇</h3>
<p><strong>yarn 比 npm 還快</strong>，是一個新出來、由 facebook 開發的開源套件管理。</p>
<ol>
<li>裝完 yarn 後，下 <code>$ yarn -v</code> 可以查看版本。</li>
<li><code>$ yarn init</code> 初始化專案</li>
<li>使用 <code>$ yarn add &lt;module name&gt;</code> 安裝套件，且會自動在 package.json 檔案中更新</li>
<li>直接下 <code>$ yarn</code> 就能根據 package.json 裝完所需套件</li>
</ol>
<h6 id="Source">Source</h6>
<p>[All] 此篇為觀看 Lidemy JS102 的筆記，圖片來源取自上課影片</p>
]]></content>
      <categories>
        <category>Programming</category>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>為 Notepad++ 加上 golang 語法高亮</title>
    <url>/Notepad-golang-hightlight/</url>
    <content><![CDATA[<p>原生 Notepad++ 沒有支援 golang 的語法，在此紀錄一下要怎麼在 Notepad 中加入自定義的 golang 程式語言的語法高亮(使用暗黑模式 Obsidian)。目前 notepad 使用的版本為 v8.1.9.3。</p>
<span id="more"></span>
<h3 id="定義使用者自訂語言">定義使用者自訂語言</h3>
<p>在工具列中點選 <code>語言&gt;自訂程式語法&gt;開啟自訂語法樣式資料夾</code>，在該資料下新增一個 <code>userDefineLang-Go-Obsidian.xml</code> 檔案，內容為以下 xml 代碼。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">NotepadPlus</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">UserLang</span> <span class="attr">name</span>=<span class="string">&quot;Go&quot;</span> <span class="attr">ext</span>=<span class="string">&quot;go&quot;</span> <span class="attr">udlVersion</span>=<span class="string">&quot;2.1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Settings</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Global</span> <span class="attr">caseIgnored</span>=<span class="string">&quot;no&quot;</span> <span class="attr">allowFoldOfComments</span>=<span class="string">&quot;yes&quot;</span> <span class="attr">foldCompact</span>=<span class="string">&quot;no&quot;</span> <span class="attr">forcePureLC</span>=<span class="string">&quot;0&quot;</span> <span class="attr">decimalSeparator</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Prefix</span> <span class="attr">Keywords1</span>=<span class="string">&quot;no&quot;</span> <span class="attr">Keywords2</span>=<span class="string">&quot;no&quot;</span> <span class="attr">Keywords3</span>=<span class="string">&quot;no&quot;</span> <span class="attr">Keywords4</span>=<span class="string">&quot;no&quot;</span> <span class="attr">Keywords5</span>=<span class="string">&quot;no&quot;</span> <span class="attr">Keywords6</span>=<span class="string">&quot;no&quot;</span> <span class="attr">Keywords7</span>=<span class="string">&quot;no&quot;</span> <span class="attr">Keywords8</span>=<span class="string">&quot;no&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">KeywordLists</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Keywords</span> <span class="attr">name</span>=<span class="string">&quot;Comments&quot;</span>&gt;</span>00// 01 02 03/* 04*/<span class="tag">&lt;/<span class="name">Keywords</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Keywords</span> <span class="attr">name</span>=<span class="string">&quot;Numbers, prefix1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Keywords</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Keywords</span> <span class="attr">name</span>=<span class="string">&quot;Numbers, prefix2&quot;</span>&gt;</span>0X 0x 0<span class="tag">&lt;/<span class="name">Keywords</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Keywords</span> <span class="attr">name</span>=<span class="string">&quot;Numbers, extras1&quot;</span>&gt;</span>A B C D E F a b c d e f<span class="tag">&lt;/<span class="name">Keywords</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Keywords</span> <span class="attr">name</span>=<span class="string">&quot;Numbers, extras2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Keywords</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Keywords</span> <span class="attr">name</span>=<span class="string">&quot;Numbers, suffix1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Keywords</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Keywords</span> <span class="attr">name</span>=<span class="string">&quot;Numbers, suffix2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Keywords</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Keywords</span> <span class="attr">name</span>=<span class="string">&quot;Numbers, range&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Keywords</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Keywords</span> <span class="attr">name</span>=<span class="string">&quot;Operators1&quot;</span>&gt;</span>! % <span class="symbol">&amp;amp;</span> ( ) * + , - . / : ; <span class="symbol">&amp;lt;</span> = <span class="symbol">&amp;gt;</span> [ ] ^ &#123; | &#125;<span class="tag">&lt;/<span class="name">Keywords</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Keywords</span> <span class="attr">name</span>=<span class="string">&quot;Operators2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Keywords</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Keywords</span> <span class="attr">name</span>=<span class="string">&quot;Folders in code1, open&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Keywords</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Keywords</span> <span class="attr">name</span>=<span class="string">&quot;Folders in code1, middle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Keywords</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Keywords</span> <span class="attr">name</span>=<span class="string">&quot;Folders in code1, close&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Keywords</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Keywords</span> <span class="attr">name</span>=<span class="string">&quot;Folders in code2, open&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Keywords</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Keywords</span> <span class="attr">name</span>=<span class="string">&quot;Folders in code2, middle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Keywords</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Keywords</span> <span class="attr">name</span>=<span class="string">&quot;Folders in code2, close&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Keywords</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Keywords</span> <span class="attr">name</span>=<span class="string">&quot;Folders in comment, open&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Keywords</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Keywords</span> <span class="attr">name</span>=<span class="string">&quot;Folders in comment, middle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Keywords</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Keywords</span> <span class="attr">name</span>=<span class="string">&quot;Folders in comment, close&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Keywords</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Keywords</span> <span class="attr">name</span>=<span class="string">&quot;Keywords1&quot;</span>&gt;</span>_ false iota nil true<span class="tag">&lt;/<span class="name">Keywords</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Keywords</span> <span class="attr">name</span>=<span class="string">&quot;Keywords2&quot;</span>&gt;</span>break case continue default defer else fallthrough for go goto if import range return select switch<span class="tag">&lt;/<span class="name">Keywords</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Keywords</span> <span class="attr">name</span>=<span class="string">&quot;Keywords3&quot;</span>&gt;</span>append cap close complex copy delete imag len make new panic print println real recover<span class="tag">&lt;/<span class="name">Keywords</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Keywords</span> <span class="attr">name</span>=<span class="string">&quot;Keywords4&quot;</span>&gt;</span>ComplexType FloatType IntegerType Type Type1 bool byte complex128 complex64 error float32 float64 int int16 int32 int64 int8 rune string uint uint16 uint32 uint64 uint8 uintptr<span class="tag">&lt;/<span class="name">Keywords</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Keywords</span> <span class="attr">name</span>=<span class="string">&quot;Keywords5&quot;</span>&gt;</span>chan const func interface map package struct type var<span class="tag">&lt;/<span class="name">Keywords</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Keywords</span> <span class="attr">name</span>=<span class="string">&quot;Keywords6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Keywords</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Keywords</span> <span class="attr">name</span>=<span class="string">&quot;Keywords7&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Keywords</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Keywords</span> <span class="attr">name</span>=<span class="string">&quot;Keywords8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Keywords</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Keywords</span> <span class="attr">name</span>=<span class="string">&quot;Delimiters&quot;</span>&gt;</span>00<span class="symbol">&amp;quot;</span> 01\ 02<span class="symbol">&amp;quot;</span> 03<span class="symbol">&amp;apos;</span> 04\ 05<span class="symbol">&amp;apos;</span> 06` 07 08`<span class="tag">&lt;/<span class="name">Keywords</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">KeywordLists</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Styles</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">WordsStyle</span> <span class="attr">name</span>=<span class="string">&quot;DEFAULT&quot;</span> <span class="attr">fgColor</span>=<span class="string">&quot;E0E2E4&quot;</span> <span class="attr">bgColor</span>=<span class="string">&quot;293134&quot;</span> <span class="attr">fontName</span>=<span class="string">&quot;&quot;</span> <span class="attr">fontStyle</span>=<span class="string">&quot;0&quot;</span> <span class="attr">nesting</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">WordsStyle</span> <span class="attr">name</span>=<span class="string">&quot;COMMENTS&quot;</span> <span class="attr">fgColor</span>=<span class="string">&quot;66747B&quot;</span> <span class="attr">bgColor</span>=<span class="string">&quot;293134&quot;</span> <span class="attr">fontName</span>=<span class="string">&quot;&quot;</span> <span class="attr">fontStyle</span>=<span class="string">&quot;0&quot;</span> <span class="attr">nesting</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">WordsStyle</span> <span class="attr">name</span>=<span class="string">&quot;LINE COMMENTS&quot;</span> <span class="attr">fgColor</span>=<span class="string">&quot;66747B&quot;</span> <span class="attr">bgColor</span>=<span class="string">&quot;293134&quot;</span> <span class="attr">fontName</span>=<span class="string">&quot;&quot;</span> <span class="attr">fontStyle</span>=<span class="string">&quot;0&quot;</span> <span class="attr">nesting</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">WordsStyle</span> <span class="attr">name</span>=<span class="string">&quot;NUMBERS&quot;</span> <span class="attr">fgColor</span>=<span class="string">&quot;FFCD22&quot;</span> <span class="attr">bgColor</span>=<span class="string">&quot;293134&quot;</span> <span class="attr">fontName</span>=<span class="string">&quot;&quot;</span> <span class="attr">fontStyle</span>=<span class="string">&quot;0&quot;</span> <span class="attr">nesting</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">WordsStyle</span> <span class="attr">name</span>=<span class="string">&quot;KEYWORDS1&quot;</span> <span class="attr">fgColor</span>=<span class="string">&quot;678CB1&quot;</span> <span class="attr">bgColor</span>=<span class="string">&quot;293134&quot;</span> <span class="attr">fontName</span>=<span class="string">&quot;&quot;</span> <span class="attr">fontStyle</span>=<span class="string">&quot;1&quot;</span> <span class="attr">nesting</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">WordsStyle</span> <span class="attr">name</span>=<span class="string">&quot;KEYWORDS2&quot;</span> <span class="attr">fgColor</span>=<span class="string">&quot;93C763&quot;</span> <span class="attr">bgColor</span>=<span class="string">&quot;293134&quot;</span> <span class="attr">fontName</span>=<span class="string">&quot;&quot;</span> <span class="attr">fontStyle</span>=<span class="string">&quot;0&quot;</span> <span class="attr">nesting</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">WordsStyle</span> <span class="attr">name</span>=<span class="string">&quot;KEYWORDS3&quot;</span> <span class="attr">fgColor</span>=<span class="string">&quot;A082BD&quot;</span> <span class="attr">bgColor</span>=<span class="string">&quot;293134&quot;</span> <span class="attr">fontName</span>=<span class="string">&quot;&quot;</span> <span class="attr">fontStyle</span>=<span class="string">&quot;0&quot;</span> <span class="attr">nesting</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">WordsStyle</span> <span class="attr">name</span>=<span class="string">&quot;KEYWORDS4&quot;</span> <span class="attr">fgColor</span>=<span class="string">&quot;5AB9BE&quot;</span> <span class="attr">bgColor</span>=<span class="string">&quot;293134&quot;</span> <span class="attr">fontName</span>=<span class="string">&quot;&quot;</span> <span class="attr">fontStyle</span>=<span class="string">&quot;0&quot;</span> <span class="attr">nesting</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">WordsStyle</span> <span class="attr">name</span>=<span class="string">&quot;KEYWORDS5&quot;</span> <span class="attr">fgColor</span>=<span class="string">&quot;93C763&quot;</span> <span class="attr">bgColor</span>=<span class="string">&quot;293134&quot;</span> <span class="attr">fontName</span>=<span class="string">&quot;&quot;</span> <span class="attr">fontStyle</span>=<span class="string">&quot;1&quot;</span> <span class="attr">nesting</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">WordsStyle</span> <span class="attr">name</span>=<span class="string">&quot;KEYWORDS6&quot;</span> <span class="attr">fgColor</span>=<span class="string">&quot;000000&quot;</span> <span class="attr">bgColor</span>=<span class="string">&quot;FFFFFF&quot;</span> <span class="attr">fontName</span>=<span class="string">&quot;&quot;</span> <span class="attr">fontStyle</span>=<span class="string">&quot;0&quot;</span> <span class="attr">nesting</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">WordsStyle</span> <span class="attr">name</span>=<span class="string">&quot;KEYWORDS7&quot;</span> <span class="attr">fgColor</span>=<span class="string">&quot;000000&quot;</span> <span class="attr">bgColor</span>=<span class="string">&quot;FFFFFF&quot;</span> <span class="attr">fontName</span>=<span class="string">&quot;&quot;</span> <span class="attr">fontStyle</span>=<span class="string">&quot;0&quot;</span> <span class="attr">nesting</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">WordsStyle</span> <span class="attr">name</span>=<span class="string">&quot;KEYWORDS8&quot;</span> <span class="attr">fgColor</span>=<span class="string">&quot;000000&quot;</span> <span class="attr">bgColor</span>=<span class="string">&quot;FFFFFF&quot;</span> <span class="attr">fontName</span>=<span class="string">&quot;&quot;</span> <span class="attr">fontStyle</span>=<span class="string">&quot;0&quot;</span> <span class="attr">nesting</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">WordsStyle</span> <span class="attr">name</span>=<span class="string">&quot;OPERATORS&quot;</span> <span class="attr">fgColor</span>=<span class="string">&quot;E8E2B7&quot;</span> <span class="attr">bgColor</span>=<span class="string">&quot;293134&quot;</span> <span class="attr">fontName</span>=<span class="string">&quot;&quot;</span> <span class="attr">fontStyle</span>=<span class="string">&quot;0&quot;</span> <span class="attr">nesting</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">WordsStyle</span> <span class="attr">name</span>=<span class="string">&quot;FOLDER IN CODE1&quot;</span> <span class="attr">fgColor</span>=<span class="string">&quot;000000&quot;</span> <span class="attr">bgColor</span>=<span class="string">&quot;FFFFFF&quot;</span> <span class="attr">fontName</span>=<span class="string">&quot;&quot;</span> <span class="attr">fontStyle</span>=<span class="string">&quot;0&quot;</span> <span class="attr">nesting</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">WordsStyle</span> <span class="attr">name</span>=<span class="string">&quot;FOLDER IN CODE2&quot;</span> <span class="attr">fgColor</span>=<span class="string">&quot;000000&quot;</span> <span class="attr">bgColor</span>=<span class="string">&quot;FFFFFF&quot;</span> <span class="attr">fontName</span>=<span class="string">&quot;&quot;</span> <span class="attr">fontStyle</span>=<span class="string">&quot;0&quot;</span> <span class="attr">nesting</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">WordsStyle</span> <span class="attr">name</span>=<span class="string">&quot;FOLDER IN COMMENT&quot;</span> <span class="attr">fgColor</span>=<span class="string">&quot;000000&quot;</span> <span class="attr">bgColor</span>=<span class="string">&quot;FFFFFF&quot;</span> <span class="attr">fontName</span>=<span class="string">&quot;&quot;</span> <span class="attr">fontStyle</span>=<span class="string">&quot;0&quot;</span> <span class="attr">nesting</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">WordsStyle</span> <span class="attr">name</span>=<span class="string">&quot;DELIMITERS1&quot;</span> <span class="attr">fgColor</span>=<span class="string">&quot;EC7600&quot;</span> <span class="attr">bgColor</span>=<span class="string">&quot;293134&quot;</span> <span class="attr">fontName</span>=<span class="string">&quot;&quot;</span> <span class="attr">fontStyle</span>=<span class="string">&quot;0&quot;</span> <span class="attr">nesting</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">WordsStyle</span> <span class="attr">name</span>=<span class="string">&quot;DELIMITERS2&quot;</span> <span class="attr">fgColor</span>=<span class="string">&quot;FF8409&quot;</span> <span class="attr">bgColor</span>=<span class="string">&quot;293134&quot;</span> <span class="attr">fontName</span>=<span class="string">&quot;&quot;</span> <span class="attr">fontStyle</span>=<span class="string">&quot;0&quot;</span> <span class="attr">nesting</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">WordsStyle</span> <span class="attr">name</span>=<span class="string">&quot;DELIMITERS3&quot;</span> <span class="attr">fgColor</span>=<span class="string">&quot;D39745&quot;</span> <span class="attr">bgColor</span>=<span class="string">&quot;293134&quot;</span> <span class="attr">fontName</span>=<span class="string">&quot;&quot;</span> <span class="attr">fontStyle</span>=<span class="string">&quot;0&quot;</span> <span class="attr">nesting</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">WordsStyle</span> <span class="attr">name</span>=<span class="string">&quot;DELIMITERS4&quot;</span> <span class="attr">fgColor</span>=<span class="string">&quot;000000&quot;</span> <span class="attr">bgColor</span>=<span class="string">&quot;FFFFFF&quot;</span> <span class="attr">fontName</span>=<span class="string">&quot;&quot;</span> <span class="attr">fontStyle</span>=<span class="string">&quot;0&quot;</span> <span class="attr">nesting</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">WordsStyle</span> <span class="attr">name</span>=<span class="string">&quot;DELIMITERS5&quot;</span> <span class="attr">fgColor</span>=<span class="string">&quot;000000&quot;</span> <span class="attr">bgColor</span>=<span class="string">&quot;FFFFFF&quot;</span> <span class="attr">fontName</span>=<span class="string">&quot;&quot;</span> <span class="attr">fontStyle</span>=<span class="string">&quot;0&quot;</span> <span class="attr">nesting</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">WordsStyle</span> <span class="attr">name</span>=<span class="string">&quot;DELIMITERS6&quot;</span> <span class="attr">fgColor</span>=<span class="string">&quot;000000&quot;</span> <span class="attr">bgColor</span>=<span class="string">&quot;FFFFFF&quot;</span> <span class="attr">fontName</span>=<span class="string">&quot;&quot;</span> <span class="attr">fontStyle</span>=<span class="string">&quot;0&quot;</span> <span class="attr">nesting</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">WordsStyle</span> <span class="attr">name</span>=<span class="string">&quot;DELIMITERS7&quot;</span> <span class="attr">fgColor</span>=<span class="string">&quot;000000&quot;</span> <span class="attr">bgColor</span>=<span class="string">&quot;FFFFFF&quot;</span> <span class="attr">fontName</span>=<span class="string">&quot;&quot;</span> <span class="attr">fontStyle</span>=<span class="string">&quot;0&quot;</span> <span class="attr">nesting</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">WordsStyle</span> <span class="attr">name</span>=<span class="string">&quot;DELIMITERS8&quot;</span> <span class="attr">fgColor</span>=<span class="string">&quot;000000&quot;</span> <span class="attr">bgColor</span>=<span class="string">&quot;FFFFFF&quot;</span> <span class="attr">fontName</span>=<span class="string">&quot;&quot;</span> <span class="attr">fontStyle</span>=<span class="string">&quot;0&quot;</span> <span class="attr">nesting</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Styles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">UserLang</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">NotepadPlus</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="啟用自動完成功能">啟用自動完成功能</h3>
<p>在 notepad 的安裝目錄下的 <code>plugins\APIs\</code> 目錄，新增 <code>go.xml</code> 檔案並複製以下代碼到該檔案</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">NotepadPlus</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">AutoComplete</span> <span class="attr">language</span>=<span class="string">&quot;Go&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;_&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;iota&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;nil&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;break&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;case&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;continue&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;default&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;defer&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;else&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;fallthrough&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;for&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;go&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;goto&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;if&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;import&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;range&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;return&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;select&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;switch&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;append&quot;</span> <span class="attr">func</span>=<span class="string">&quot;yes&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">Overload</span> <span class="attr">retVal</span>=<span class="string">&quot;[]Type&quot;</span> &gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">Param</span> <span class="attr">name</span>=<span class="string">&quot;slice []Type&quot;</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">Param</span> <span class="attr">name</span>=<span class="string">&quot;elems ...Type&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">Overload</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">KeyWord</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;cap&quot;</span> <span class="attr">func</span>=<span class="string">&quot;yes&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">Overload</span> <span class="attr">retVal</span>=<span class="string">&quot;int&quot;</span> &gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">Param</span> <span class="attr">name</span>=<span class="string">&quot;v Type&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">Overload</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">KeyWord</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;close&quot;</span> <span class="attr">func</span>=<span class="string">&quot;yes&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">Overload</span> <span class="attr">retVal</span>=<span class="string">&quot;&quot;</span> &gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">Param</span> <span class="attr">name</span>=<span class="string">&quot;c chan&lt;- Type&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">Overload</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">KeyWord</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;complex&quot;</span> <span class="attr">func</span>=<span class="string">&quot;yes&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">Overload</span> <span class="attr">retVal</span>=<span class="string">&quot;ComplexType&quot;</span> &gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">Param</span> <span class="attr">name</span>=<span class="string">&quot;r&quot;</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">Param</span> <span class="attr">name</span>=<span class="string">&quot;i FloatType&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">Overload</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">KeyWord</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;copy&quot;</span> <span class="attr">func</span>=<span class="string">&quot;yes&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">Overload</span> <span class="attr">retVal</span>=<span class="string">&quot;int&quot;</span> &gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">Param</span> <span class="attr">name</span>=<span class="string">&quot;dst&quot;</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">Param</span> <span class="attr">name</span>=<span class="string">&quot;src []Type&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">Overload</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">KeyWord</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">func</span>=<span class="string">&quot;yes&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">Overload</span> <span class="attr">retVal</span>=<span class="string">&quot;&quot;</span> &gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">Param</span> <span class="attr">name</span>=<span class="string">&quot;m map[Type]Type1&quot;</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">Param</span> <span class="attr">name</span>=<span class="string">&quot;key Type&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">Overload</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">KeyWord</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;imag&quot;</span> <span class="attr">func</span>=<span class="string">&quot;yes&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">Overload</span> <span class="attr">retVal</span>=<span class="string">&quot;FloatType&quot;</span> &gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">Param</span> <span class="attr">name</span>=<span class="string">&quot;c ComplexType&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">Overload</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">KeyWord</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;len&quot;</span> <span class="attr">func</span>=<span class="string">&quot;yes&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">Overload</span> <span class="attr">retVal</span>=<span class="string">&quot;int&quot;</span> &gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">Param</span> <span class="attr">name</span>=<span class="string">&quot;v Type&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">Overload</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">KeyWord</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;make&quot;</span> <span class="attr">func</span>=<span class="string">&quot;yes&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">Overload</span> <span class="attr">retVal</span>=<span class="string">&quot;Type&quot;</span> &gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">Param</span> <span class="attr">name</span>=<span class="string">&quot;Type&quot;</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">Param</span> <span class="attr">name</span>=<span class="string">&quot;size IntegerType&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">Overload</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">KeyWord</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;new&quot;</span> <span class="attr">func</span>=<span class="string">&quot;yes&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">Overload</span> <span class="attr">retVal</span>=<span class="string">&quot;*Type&quot;</span> &gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">Param</span> <span class="attr">name</span>=<span class="string">&quot;Type&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">Overload</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">KeyWord</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;panic&quot;</span> <span class="attr">func</span>=<span class="string">&quot;yes&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">Overload</span> <span class="attr">retVal</span>=<span class="string">&quot;&quot;</span> &gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">Param</span> <span class="attr">name</span>=<span class="string">&quot;v interface&#123;&#125;&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">Overload</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">KeyWord</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;print&quot;</span> <span class="attr">func</span>=<span class="string">&quot;yes&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">Overload</span> <span class="attr">retVal</span>=<span class="string">&quot;&quot;</span> &gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">Param</span> <span class="attr">name</span>=<span class="string">&quot;args ...Type&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">Overload</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">KeyWord</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;println&quot;</span> <span class="attr">func</span>=<span class="string">&quot;yes&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">Overload</span> <span class="attr">retVal</span>=<span class="string">&quot;&quot;</span> &gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">Param</span> <span class="attr">name</span>=<span class="string">&quot;args ...Type&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">Overload</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">KeyWord</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;real&quot;</span> <span class="attr">func</span>=<span class="string">&quot;yes&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">Overload</span> <span class="attr">retVal</span>=<span class="string">&quot;FloatType&quot;</span> &gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">Param</span> <span class="attr">name</span>=<span class="string">&quot;c ComplexType&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">Overload</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">KeyWord</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;recover&quot;</span> <span class="attr">func</span>=<span class="string">&quot;yes&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">Overload</span> <span class="attr">retVal</span>=<span class="string">&quot;interface&#123;&#125;&quot;</span> &gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">Overload</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">KeyWord</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;ComplexType&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;FloatType&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;IntegerType&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;Type&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;Type1&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;bool&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;byte&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;complex128&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;complex64&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;error&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;float32&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;float64&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;int&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;int16&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;int32&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;int64&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;int8&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;rune&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;string&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;uint&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;uint16&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;uint32&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;uint64&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;uint8&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;uintptr&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;chan&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;const&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;func&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;interface&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;map&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;package&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;struct&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;type&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">KeyWord</span> <span class="attr">name</span>=<span class="string">&quot;var&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">AutoComplete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">NotepadPlus</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="重啟應用程式並設置對應語言以及樣式">重啟應用程式並設置對應語言以及樣式</h3>
<ol>
<li>重啟 Notepad</li>
<li>將樣式改成 <code>Obsidian</code><br>
<img src="https://imgur.com/jYuRdUj.png" alt=""><br>
<img src="https://imgur.com/U3MZ3Id.png" alt=""></li>
<li>開啟一個 golang 的檔案，將語法設為自定義的 <code>Go</code><br>
<img src="https://imgur.com/9dPX4HZ.png" alt=""><br>
並可成功顯示高亮語法<br>
<img src="https://imgur.com/D7ORjqh.png" alt=""></li>
</ol>
<h3 id="Reference">Reference</h3>
<ul>
<li><a href="https://www.reddit.com/r/golang/comments/3vgrwn/go_syntax_highlighting_and_builtin_function/">https://www.reddit.com/r/golang/comments/3vgrwn/go_syntax_highlighting_and_builtin_function/</a></li>
<li><a href="https://github.com/haikubox/configs/tree/master/notepad%2B%2B">https://github.com/haikubox/configs/tree/master/notepad%2B%2B</a></li>
</ul>
]]></content>
      <categories>
        <category>Programming</category>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>[Node-RED] mail node 534-5.7.14 Error</title>
    <url>/NodeRED-mail-node-send-Error/</url>
    <content><![CDATA[<p>當 google 帳號設置了啟用 <strong><code>允許安全性較低的應用程式</code></strong>，但 node-red 的 mail node 還是出現 <code>534-5.7.14 Please log in via your web browser and then try again.</code> 的錯誤。</p>
<span id="more"></span>
<p>可能是因為 Gmail 自動阻擋了可疑的登入。</p>
<ol>
<li>此時到用來發信的 Gmail 信箱，可發現一封 <code>系統已阻止可疑的登入</code>的系統通知信。</li>
<li>或到<a href="https://security.google.com/settings/security/activity">異常活動</a>頁面 ，也可看到 <code>應用程式/裝置登入嘗試遭拒</code> 的記錄。</li>
<li>如果通知信、異常活動記錄中的 IP 與時間是正常由我們的程式發出的，則可到 <code>授權存取您的 Google 帳戶</code> 頁面 <a href="https://accounts.google.com/DisplayUnlockCaptcha">https://accounts.google.com/DisplayUnlockCaptcha</a>，按 <code>繼續</code>。</li>
<li>然到到原本的程式，執行登入/寄信，應該就可以認證了。</li>
</ol>
<p>其他：</p>
<ul>
<li>如果原程式換了 IP，可能會再次被 Gmail 自動阻擋，則須在進行一次以上的的動作。</li>
<li>有時候顯示密碼錯誤，有可能密碼是對的，但被 Google 當成可疑的登入阻擋了。</li>
</ul>
<h6 id="Source">Source</h6>
<ul>
<li><a href="https://xyz.cinc.biz/2014/09/gmail-password-not-accepted-from-server.html">https://xyz.cinc.biz/2014/09/gmail-password-not-accepted-from-server.html</a></li>
<li><a href="https://stackoverflow.com/questions/20337040/getting-error-while-sending-email-through-gmail-smtp-please-log-in-via-your-w">https://stackoverflow.com/questions/20337040/getting-error-while-sending-email-through-gmail-smtp-please-log-in-via-your-w</a></li>
</ul>
<hr>
<p>另外補充一下 email node 的使用</p>
<p><img src="https://imgur.com/N6OrFDA.png" alt=""></p>
<p>function node</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">msg.to = <span class="string">&#x27;ulahsieh@domain.com&#x27;</span>;</span><br><span class="line">msg.topic = <span class="string">&#x27;信件主旨&#x27;</span>;</span><br><span class="line">msg.payload = <span class="string">&#x27;信件內容&#x27;</span></span><br><span class="line"><span class="keyword">return</span> msg;</span><br></pre></td></tr></table></figure>
<p>在 function node 寫上寄件者後，mail node 的 <code>To</code> 欄位即可省略。</p>
<p><img src="https://imgur.com/GOh6yba.png" alt=""></p>
]]></content>
      <categories>
        <category>DevOps</category>
        <category>Node-RED</category>
      </categories>
      <tags>
        <tag>Node-RED</tag>
      </tags>
  </entry>
  <entry>
    <title>[OS] 作業系統概論</title>
    <url>/OS-introduction/</url>
    <content><![CDATA[<p>此篇文將講在理解 Golang GMP 之前＿<br>
原先只是想花點時間搞懂 Golang 的性能，但殊不知衍生到作業系統的底層運作，就生出了這針對作業系統的筆記，當作是大學學的 OS 理論的回顧(老實說忘得差不多了 😅 )</p>
<h3 id="程式、程序、執行緒">程式、程序、執行緒</h3>
<h4 id="程式-Program">程式(Program)</h4>
<p>尚未載進記憶體的<strong>靜態程式碼集合</strong>。</p>
<span id="more"></span>
<h4 id="程序-Process">程序(Process)</h4>
<p>正在執行並載進記憶體中的<strong>動態程式</strong>，是作業系統分配資源的最小單位（OS 以程序為單位，分配系統資源，OS 下的工作管理員所標示的一個個 task 即為一個程序，擁有獨立的 PID 以及記憶體空間）。</p>
<h4 id="執行緒-Thread">執行緒(Thread)</h4>
<p>又稱 Light-weight Process (LWP)，是 OS 中進行運算排程的最小單位，被包在一個 Process 中，而同一 Process 下的各個執行緒之間共享該 Process 資源。</p>
<table><tr><td bgcolor=#FAFAFA>
三者的關係是：一個程式可以會有多個程序，一個程序可能會有多個執行緒。
</td></tr></table>
<p><img src="https://imgur.com/nnn6bxW.png" alt=""></p>
<h3 id="併發-concurrency-v-s-並行-parallelism">併發(concurrency) v.s. 並行(parallelism)</h3>
<h4 id="併發">併發</h4>
<p>同時執行多個獨立的程式邏輯，但並不代表同時進行處理。<br>
若程式執行在單核單執行緒的 CPU 上，所有任務都須排隊等待 CPU 資源。</p>
<h4 id="並行">並行</h4>
<p>讓程式<strong>真正的同時</strong>處理多個任務，並行並不是程式能夠帶來的特性，而是需要靠硬體，需仰賴多核 CPU 或是使用多台伺服器組成叢集。</p>
<table><tr><td bgcolor=#FAFAFA>
兩者的關係是：並行的狀況一定會併發，但發生併發時卻不一定是並行。
</td></tr></table>
<p><img src="https://imgur.com/KxNlQOJ.png" alt=""></p>
<h3 id="Multiprograming、Multiprocessing、Multitasking、Multithreading">Multiprograming、Multiprocessing、Multitasking、Multithreading</h3>
<h4 id="Multiprogramming">Multiprogramming</h4>
<p>電腦同時<font color=#FF5959>(concurrency)</font>執行多個程式。（如同時使用 excel 以及 firefox）</p>
<h4 id="Multiprocessing">Multiprocessing</h4>
<p>電腦同時使用多個處理器，多個程序可在同一時間<font color=#FF5959>(parallelism)</font>執行。</p>
<h4 id="Multitasking">Multitasking</h4>
<p>多個任務共享一個資源(如一顆 CPU 或記憶體)。</p>
<h4 id="Multithreading">Multithreading</h4>
<p>指一個程序中有多個執行緒在執行，彼此共用相同的程序資源。</p>
<p>雖然字面上看起來意思接近，但每個名詞都有些微的差距，其中特別記錄在其他網站中看到針對 multitasking and multiprogramming 的闡述＿</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Multitasking is a logical extension of multi programming. The major way in which multitasking differs from multi programming is that multi programming works solely on the concept of context switching whereas multitasking is based on time sharing alongside the concept of context switching. [1]</span><br></pre></td></tr></table></figure>
<p>Multitasking 是 Multiprogramming 的邏輯擴展，主要的不同在於 Multiprogramming 是多個程式基於上下文切換的概念上獨立運作，而 Multitasking 的觀念則是較著重於 time-sharing（可能是同一個程式中的不同程序）。</p>
<h3 id="Kernel-Space-User-Space">Kernel Space &amp; User Space</h3>
<h4 id="Kernel-Space-內核空間">Kernel Space 內核空間</h4>
<p>有關作業系統的所有數據、程序皆在此運行。</p>
<h4 id="User-Spaceg-使用者空間">User Spaceg 使用者空間</h4>
<p>指 user 程序的運行空間，權限有限，若要調用系統資源，需透過 system call。</p>
<p>p.s. 兩個空間的劃分依據不同位元以及不同版本的作業系統而不同。</p>
<h4 id="Protection-Ring">Protection Ring</h4>
<p>為了隔絕不同的程序，CPU 提供了一個 Pretection Ring 的機制，依據不同架構的 CPU，所劃分的層級也不同，但決定於作業系統的需求，例如 Linux 或 Windows Server 2008 僅使用了 Ring 0 和 Ring 3 兩個級別。[2]<br>
下圖為 x86 處理器可用的特權級別<br>
<img src="https://imgur.com/FscjQVY.png" alt=""></p>
<h4 id="Kernel-Mode-User-Mode">Kernel Mode &amp; User Mode</h4>
<p>當程序運行在 kernel space 時 CPU 就處於 kernel mode，切換到RING 0 最高權限模式，能直接與硬體互動，而運行在 user space 時 CPU 則處於 user mode，CPU 只採用 RING 3 最低權限模式。</p>
<h4 id="模式切換-Mode-Switch">模式切換(Mode Switch)</h4>
<p>指從 user mode 切換到 kernel mode 的狀況，有以下三種：</p>
<ol>
<li>系統呼叫 (system call)：使用者程式要求 OS 服務。</li>
<li>異常 (exception)：程式執行非法動作 (stack overflow, divided by zero)。</li>
<li>中斷 (interruption)：當外圍設備完成 user 請求的操作後，會向 CPU 發出中斷訊號，這時 CPU 會暫停當前的程序，轉而去執行中斷訊號對應的處理程序。比如硬碟讀寫操作完成時，系統會切換到硬盤讀寫的中斷處理程序中執行後續操作。</li>
</ol>
<h4 id="小結">小結</h4>
<p>區分兩個空間 (space) 以及不同權限 (mode) 的用途與好處:</p>
<ol>
<li>確保系統數據不被隨意操作，防止破壞</li>
<li>確保資源不被單一使用程序霸佔</li>
<li>確保兩個使用程序不會相互干擾</li>
<li>確保硬體操作正確</li>
</ol>
<p>上面基礎概念講完後，回到執行緒，討論更深的概念：</p>
<h3 id="Single-thread-Multi-thread">Single-thread &amp; Multi-thread</h3>
<p><img src="https://imgur.com/6xyHblp.jpg" alt=""><br>
每個 Thread 擁有獨立的 stack，多個 Thread 之間因為共用 Process 的記憶體，故可以共用變數。</p>
<h4 id="Single-Thread-單執行緒">Single Thread 單執行緒</h4>
<p>每個正在執行的程式(即程序)，至少包括<span class="dotunderletter"><strong>一個</strong></span>執行緒，稱作主執行緒，它在程式啟動時被建立，用於執行 main 函式。<br>
而程式若只有一個主執行緒，稱作<font color=DarkBlue>單執行緒程式。</font><br>
主執行緒負責執行程式的所有程式碼，這些程式碼只能順序執行，無法併發執行。</p>
<h4 id="Multi-Thread-多執行緒">Multi Thread 多執行緒</h4>
<p>擁有<span class="dotunderletter"><strong>多個</strong></span>執行緒的程式，彼此可獨立併發執行。<br>
能有效地避免程式碼阻塞，提高程式的執行效能。</p>
<h3 id="ULT-KLT-LWP">ULT &amp; KLT &amp; LWP</h3>
<h4 id="User-Thread-使用者執行緒">User Thread 使用者執行緒</h4>
<p>又稱 User Level Thread (ULT)，在 user mode 下進行，OS 不知 ULT 存在，不需要 OS 介入管理，主要由 user-level thread library (如 Java threads, Win32 threads, POSIX Threads  aka Pthreads) 管理。</p>
<ul>
<li>優點：產生、管理成本較低</li>
<li>缺點：當 kernel 為 single thread，程序的 user thread  發出 system call 時，則整個程序會被鎖住。</li>
</ul>
<h4 id="Kernel-Thread-核心執行緒">Kernel Thread 核心執行緒</h4>
<p>又稱 Kernel Level Thread (KLT)，在 kernel mode 下進行，OS 知道 KLT 存在，且由 OS 介入管理。一般作業系統皆屬之，如 Linux, Unix, Windows, Mac OS X…</p>
<ul>
<li>優點：當程序內某條執行中的 kernel-thread 被鎖住時（如等待其他資源），不會導致整個程序亦被鎖住，可同時進行其他同在此程序中的其他 Thread。</li>
<li>缺點：速度較慢，一個程序中的兩個 threads 切換需要經過 mode switch。</li>
</ul>
<h4 id="Low-weight-Process-輕量級程序">Low-weight Process 輕量級程序</h4>
<div class="info">
<p>這裡簡直是惡夢，在網路上的定義百百種，而且都很模糊，只好在篩選資訊後，把覺得合理的解釋都一併放了上來，將就看一下。</p>
</div>
<p>輕量級執行緒 (LWP) 是一種由核心支援的使用者執行緒。<br>
每一個程序可能有一個或多個 LWPs，每個 LWP 支援一個或多個 ULTs，而每個 LWP 由一個 KLT 支援。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A user-level library multiplex(多路通訊) user threads on top of LWPs and provides facilities for inter-thread scheduling, context switching, and synchronization without involving the kernel.[3]</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注：</span><br><span class="line">1. LWP的術語是借自於SVR4/MP和Solaris 2.x。</span><br><span class="line">2. 有些系統將LWP比喻為虛擬處理器，或是介於user thread 和 kernel thread之間的資料結構，可對 user thread 進行排程以執行在 user-thread library。</span><br><span class="line">3. 將之稱為輕量級程序的原因可能是：在核心執行緒的支援下，LWP是獨立的排程單元，就像普通的程序一樣。所以LWP的最大特點還是每個LWP都有一個核心執行緒支援。[4]</span><br></pre></td></tr></table></figure>
<h3 id="Multithread-Model">Multithread Model</h3>
<p>只執行緒間的溝通模式，主要有三種<br>
<img src="https://imgur.com/2jUidLK.png" alt=""></p>
<h4 id="1-1">1 : 1</h4>
<p>一個 ULT 對應到一個 LWP 再對應到一個 KLT，如同上圖的 process 4，即屬於此模型。</p>
<ul>
<li>優點：實現 parallelism，當一執行緒阻塞，不會影響其他執行緒</li>
<li>缺點：每件一個 user thread，就需產生一個 kernel thread，執行緒建立的開銷較大</li>
</ul>
<h4 id="N-1">N : 1</h4>
<p>此模型又稱 pure user thread，多個 User thread 對應到一個 Kernel thread 溝通，如同上圖的 process 2，執行緒管理在使用者空間完成，此模式中使用者執行緒對 OS 不可見</p>
<ul>
<li>優點：User thread 要開幾個都沒問題，且上下文切換發生在使用者空間，避免 mode switch，效能較佳</li>
<li>缺點：對多核心處理器 (Multi-processor) 來說很浪費。一個使用者執行緒如果阻塞在系統呼叫中，則整個程序都將會阻塞。</li>
</ul>
<h4 id="M-N">M : N</h4>
<p>kernel thread &amp; user thread 的數量比為 M : N，模型提供了兩級控制，首先 user thread 對映這個可排程的輕量級程序 (LWP)，LWP再一一對映到 kernel thread。如上圖中的process 3</p>
<ul>
<li>優點：綜合了前兩種優點，大部分的執行緒上下文切換發生在使用者空間，且多個核心執行緒又可以充分利用 CPU 資源</li>
</ul>
<h4 id="Combined">Combined</h4>
<p>如上圖中的 process 5，此程序結合 1:1 模型及 M:N 模型。開發人員可以針對不同的應用特點調節 kernel thread 的數目來達到物理並行性和邏輯並行性的最佳方案。</p>
<h3 id="CPU-bound-v-s-I-O-bound">CPU bound v.s. I/O bound</h3>
<h4 id="CPU-密集型-CPU-bound">CPU 密集型 (CPU bound)</h4>
<p>aka 計算密集型，大部份時間用 CPU 來做計算、邏輯判斷等動作的<u>程序</u>稱之CPU bound。</p>
<p>CPU bound的程序一般而言<strong>CPU佔用率相當高</strong>，這可能是因為任務本身不太需要訪問I/O設備，也可能是因為程序是多執行緒實現因此屏蔽掉了等待I/O的時間。</p>
<p>而由於主要會消耗CPU資源，因此，代碼運行效率至關重要。Python這樣的腳本語言運行效率很低，就不適合計算密集型任務。</p>
<h4 id="I-O-密集型-I-O-bound">I/O 密集型 (I/O bound)</h4>
<p>I/O 密集型涉及到<strong>網絡、檔案讀寫</strong>的任務都是 I/O 密集型任務，這類任務的特點是 <strong>CPU 消耗很少</strong>，任務的大部分時間都在等待 I/O 操作完成。常見的 I/O 密集型任務，如Web應用、資料庫讀寫。</p>
<p>對於 I/O 密集型任務，最合適的語言就是開發效率最高的語言，腳本語言是首選。</p>
<h4 id="執行緒池-Thread-Pool">執行緒池 Thread Pool</h4>
<p>一種執行緒使用模式。執行緒過多會帶來調度開銷，進而影響快取局部性和整體性能。而執行緒池維護著多個執行緒，等待著監督管理者分配可並發執行的任務，降低在處理短時間任務時創建與銷毀執行緒的代價；能保證核心的充分利用以及防止過分調度。[5]</p>
<h4 id="執行緒池與-CPU-bound-or-I-O-bound-的配置">執行緒池與 CPU bound or I/O bound 的配置</h4>
<p>CPU 密集型任務：應配置儘可能<strong>小的</strong>執行緒池，因為多個執行緒間頻繁進行上下文切換對於程式效能損耗較大，所以執行緒數應配置 <code>CPU 核心數 + 1</code>。</p>
<p>I/O 密集型任務：應配置儘可能<strong>大的</strong>執行緒池，當一個任務執行IO操作時，執行緒將被阻塞，於是處理器可以立即進行(因 CPU 消耗少) 上下文切換以便處理其他就緒執行緒。如果我們只有處理器核心數那麼多個執行緒的話，即使有待執行的任務也無法排程處理，所以執行緒數應配置 <code>2 * CPU</code>。</p>
<h3 id="Context-Switch">Context Switch</h3>
<p>上下文轉換指CPU在不同任務間切換時，必須將舊任務的狀態儲存起來，再載入新任務的儲存狀態的動作，上下文可以視為環境，以程序來說，就是<strong>程序執行的環境</strong>。</p>
<p>根據CPU執行的任務的不同，上下文切換分為三種：</p>
<h4 id="程序上下文切換（Process-Context-Switch）">程序上下文切換（Process Context Switch）</h4>
<p>顧名思義即為不同程序的切換所產生的cost，上下文為使用者程序傳遞給kernel的一些變數和暫存器值和當時的環境等，主要儲存在PCB(Process Control Block)當中。<br>
PCB為在Kernel中針對每一個程序所建立的一個資料結構，記載該 程序的相關資訊。<br>
<img src="https://imgur.com/jPEtZMl.png" alt=""></p>
<p>欲了解PCB組成，請參考<br>
<a href="https://en.wikipedia.org/wiki/Process_control_block">wiki</a></p>
<h4 id="執行緒上下文切換（Thread-Context-Switch）">執行緒上下文切換（Thread Context Switch）</h4>
<p>有兩種狀況:</p>
<ol>
<li>前後兩個執行緒所屬不同程序，此切換可與程序上下文切換視為同一種。</li>
<li>前後兩個執行緒屬於同一個程序，因同程序內的不同執行緒會共享資源，所以在切換時，虛擬記憶體的資源不變，只需要切換執行緒的私有數據、暫存器等不共享的數據。此切換所消耗的cost較小。</li>
</ol>
<h4 id="中斷上下文切換-Interrupt-handling">中斷上下文切換 (Interrupt handling)</h4>
<p>中斷上下文切換是為了響應硬件的各種事件設計出來的，中斷程序會打斷其他程序的執行。例如，當前CPU正在執行某程序，這個時候我們滑動鼠標，按了下鍵盤，CPU就必須中斷正在執行的程序，轉而去響應這些硬件的事件。</p>
<p>可以看作就是硬體傳遞過來的這些引數和核心需要儲存的一些其他環境（主要是當前被打斷執行的程序環境）。</p>
<p>更仔細的釐清中斷上下文時發現：中斷上下文的過程也可能包含上方所提到的user mode切換到kernel mode的mode switch</p>
<p>例如：「Timer」為一種硬體，在協助「Round robin」排程、防止單一 Process 霸佔而保護 CPU 時，會觸發<br>
<img src="https://imgur.com/bZChgTB.png" alt=""><br>
①②③④步驟都涉及到保存register或恢復register的操作。</p>
<p>②跟③是屬於程序上下文切換——從進程A的上下文切換至進程B的上下文。</p>
<p>而①和④步驟由CPU硬體完成，由中斷觸發，跟程序切換沒有直接關係。不過其實也可以把這個步驟歸稱之為上下文切換，只不過這是CPU kernel mode與user mode之間的上下文切換（mode switch）。[6]</p>
<h4 id="小結-2">小結</h4>
<ul>
<li>CPU的狀態可以歸納為以下三個
<ul>
<li>Kernel Mode，跑程序上下文，程序運行於Kernel space</li>
<li>Kernel Mode，跑中斷上下文，硬體運行於Kernel space</li>
<li>User Mode，跑user程序，程序運行於User space</li>
</ul>
</li>
<li>如果僅僅是中斷（例如系統調用），而未發生進程切換，並不需要保存進程的上下文信息(process context switch)。</li>
</ul>
<h4 id="補充：上下文切換執行於Kernel-space的原因">補充：上下文切換執行於Kernel space的原因</h4>
<p>大部分的OS使用虛擬記憶體（virtual memory），用以增加實體記憶體的使用效率。每個程序都有自己的虛擬地址空間（virtual address space），透過CPU中的內存管理單元（memory management unit，MMU）標識當前正在運行程序的地址轉換映射表（address translation map），將虛擬位址轉為物理位址。<br>
<img src="https://imgur.com/v5Eup0o.png" alt=""><br>
很多系統以頁表（page table）的方式來實現這些映射。在當前程序將CPU讓給另外一個程序時（即發生了上下文切換（context switch）），kernel會將這些暫存器(regs)和指針(k-stack)加載到新進程的轉換映射表中。而MMU寄存器是受特權保護的(ring 0)，只能在kernel mode下訪問。這就確保一個程序只能引用它自己空間中的地址，而不能訪問或者修改其他進程的地址空間。</p>
<h6 id="參考資料">參考資料</h6>
<p>[1]<a href="https://www.geeksforgeeks.org/difference-between-multitasking-multithreading-and-multiprocessing/">https://www.geeksforgeeks.org/difference-between-multitasking-multithreading-and-multiprocessing/</a><br>
[2]<a href="https://zh.wikipedia.org/wiki/%E5%88%86%E7%BA%A7%E4%BF%9D%E6%8A%A4%E5%9F%9F">https://zh.wikipedia.org/wiki/分级保护域</a><br>
[3]<a href="https://stackoverflow.com/questions/10484355/what-the-difference-between-lightweight-process-and-thread">https://stackoverflow.com/questions/10484355/what-the-difference-between-lightweight-process-and-thread</a><br>
[4]<a href="https://www.tutorialspoint.com/lightweight-process-lwp">https://www.tutorialspoint.com/lightweight-process-lwp</a><br>
[5]<a href="https://www.easyatm.com.tw/wiki/%E5%9F%B7%E8%A1%8C%E7%B7%92%E6%B1%A0">https://www.easyatm.com.tw/wiki/執行緒池</a><br>
[6]<a href="http://pages.cs.wisc.edu/~remzi/OSTEP/cpu-mechanisms.pdf">http://pages.cs.wisc.edu/~remzi/OSTEP/cpu-mechanisms.pdf</a></p>
]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>OS</tag>
        <tag>kernel</tag>
        <tag>Context Switch</tag>
        <tag>Multi-Thread</tag>
      </tags>
  </entry>
  <entry>
    <title>[SSL] PFX 轉 PEM, CRT, KEY &amp; s_client, s_server 測試</title>
    <url>/PFX-convert/</url>
    <content><![CDATA[<p>憑證發行機構(CA)發出的 PFX 憑證文件，通常將根憑證/中繼憑證、網站憑證(certificate)和網站金鑰(網站私鑰)集合在一起。</p>
<span id="more"></span>
<h3 id="pfx-轉-pem-CA">pfx 轉 pem (CA)</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ openssl pkcs12 -in keyname.pfx -out keyname.pem -nodes</span><br></pre></td></tr></table></figure>
<h3 id="pfx-轉-crt-cert">pfx 轉 crt (cert)</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ openssl pkcs12 -in keyname.pfx -nokeys -clcerts -nodes -out keyname.crt</span><br></pre></td></tr></table></figure>
<h3 id="pfx-轉-key">pfx 轉 key</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ openssl pkcs12 -in keyname.pfx -nocerts -nodes -out keyname.key</span><br></pre></td></tr></table></figure>
<p>以上三個步驟皆須再輸入當時匯出 pfx 設定的密碼。</p>
<ul>
<li>-in filename：指定私鑰和證書讀取的文件，默認為標準輸入。</li>
<li>-out filename：指定輸出的文件，默認為標準輸出。</li>
<li>-clcerts：僅僅輸出客戶端證書，不輸出CA證書。</li>
<li>-cacerts：僅僅輸出CA證書，不輸出客戶端證書。</li>
<li>-nocerts：不輸出任何證書。</li>
<li>-nokeys：不輸出任何私鑰信息值。</li>
<li>-nodes：對私鑰不加密。</li>
</ul>
<hr>
<h2 id="查看憑證-金鑰內容">查看憑證 / 金鑰內容</h2>
<h3 id="查看憑證-pem">查看憑證 pem</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ openssl x509 -in keyname.pem -text -noout</span><br></pre></td></tr></table></figure>
<h3 id="查看證書-cert">查看證書 cert</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ openssl x509 -noout -text -in keyname.crt</span><br></pre></td></tr></table></figure>
<h3 id="查看金鑰-key">查看金鑰 key</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ openssl rsa -noout -text -in keyname.key</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="測試工具">測試工具</h2>
<p>Openssl提供了簡單的 client 和 server 工具，可以用来模擬 SSL 連接，以測試診斷。</p>
<h3 id="s-client">s_client</h3>
<p>以 ssl 協議連接到遠程伺服器，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ openssl s_client -connect [host]:443</span><br></pre></td></tr></table></figure>
<ul>
<li>-connect host:port：指定遠程服務器的地址和端口，默認值為 localhost:443</li>
<li>-CAfile filename：指定用於驗證服務器證書的根證書</li>
<li>-cert filename：若服務器端需要驗證客戶端的身份，通過 -cert 指定客戶端的證書文件</li>
<li>-key filename：指定私鑰文件</li>
<li>-state：打印出 SSL 會話的狀態</li>
</ul>
<h3 id="s-server">s_server</h3>
<p>模擬 HTTPS 服務，可以返回 Openssl 相關訊息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ openssl s_server -accept 443 -cert myserver.crt -key myserver.key -www</span><br></pre></td></tr></table></figure>
<ul>
<li>-accept：用来指定監聽的 port</li>
<li>-cert：用来指定提供服務的證書</li>
<li>-key：用来指定提供服務的 key</li>
</ul>
<hr>
<h6 id="Source">Source</h6>
<p>[1]<a href="https://www.jianshu.com/p/f5f93c89155e">https://www.jianshu.com/p/f5f93c89155e</a><br>
[2]<a href="https://cloud.tencent.com/developer/article/1556287">https://cloud.tencent.com/developer/article/1556287</a></p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>SSL</category>
      </categories>
      <tags>
        <tag>SSL</tag>
      </tags>
  </entry>
  <entry>
    <title>[Oracle] Install Oracle 11g XE and Establish CDC by Debezium</title>
    <url>/Oracle-11g-XE-CDC-Debezium/</url>
    <content><![CDATA[<h2 id="Debezium">Debezium</h2>
<h3 id="簡介">簡介</h3>
<p>Debezium 是一個由 RedHat 開源的基於資料庫變更日誌的實時變更數據捕獲（CDC）工具，構建在 Apache Kafka 之上，是 Apache Kafka Connect 的 Source Connector，可以實時獲取行級別（row-level）資料的更改事件（INSERT、UPDATE 和 DELETE）並同步到 Kafka。目前支援的常見資料庫有 MySQL(binlog)、Oracle(logminer or xstream)、MongoDB(change streams)、PostgreSQL(logical replication stream mode)、SQL Server(transaction log)…等。本文範例是使用 Oracle 的 logminer 日誌透過 Debezium 獲取指定資料庫的變更事件。</p>
<span id="more"></span>
<h3 id="CDC">CDC</h3>
<p>CDC 全稱是 Change Data Capture 變更數據捕獲，它是一個比較廣義的概念，只要能捕獲變更的資料，都可以稱為 CDC，主要有基於查詢的 CDC 和基於日誌的 CDC。</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">基於查詢的 CDC</th>
<th style="text-align:center">基於日誌的 CDC</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">概念</td>
<td style="text-align:center">每次捕獲變更發起 Select 查詢進行全表掃描，過濾出查詢之間變更的資料</td>
<td style="text-align:center">讀取資料儲存系統的 log ，例如 Mysql 裡面的 binlog持續監控</td>
</tr>
<tr>
<td style="text-align:center">開源產品</td>
<td style="text-align:center">Sqoop, Kafka JDBC Source</td>
<td style="text-align:center">Canal, Maxwell, Debezium</td>
</tr>
<tr>
<td style="text-align:center">執行模式</td>
<td style="text-align:center">Batch</td>
<td style="text-align:center">Streaming</td>
</tr>
<tr>
<td style="text-align:center">捕獲所有資料的變化</td>
<td style="text-align:center">X</td>
<td style="text-align:center">O</td>
</tr>
<tr>
<td style="text-align:center">低延遲，不增加資料庫負載</td>
<td style="text-align:center">X</td>
<td style="text-align:center">O</td>
</tr>
<tr>
<td style="text-align:center">不侵入業務（LastUpdated欄位）</td>
<td style="text-align:center">X</td>
<td style="text-align:center">O</td>
</tr>
<tr>
<td style="text-align:center">捕獲刪除事件和舊記錄的狀態</td>
<td style="text-align:center">X</td>
<td style="text-align:center">O</td>
</tr>
<tr>
<td style="text-align:center">捕獲舊記錄的狀態</td>
<td style="text-align:center">X</td>
<td style="text-align:center">O</td>
</tr>
</tbody>
</table>
<h2 id="安裝-Oracle-11g-Express-Edition">安裝 Oracle 11g Express Edition</h2>
<h3 id="Create-Container">Create Container</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -it --name oracle -p 1521:1521 -e ORACLE_ALLOW_REMOTE=true -v oracle:/u01/app/oracle --restart=always wnameless/oracle-xe-11g-r2</span><br></pre></td></tr></table></figure>
<h3 id="Connect-to-the-Database">Connect to the Database</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker ps</span><br><span class="line">CONTAINER ID   IMAGE                        COMMAND                  CREATED         STATUS         PORTS                                                         NAMES</span><br><span class="line">624e811e8e0b   wnameless/oracle-xe-11g-r2   <span class="string">&quot;/bin/sh -c &#x27;/usr/sb…&quot;</span>   3 minutes ago   Up 3 minutes   22/tcp, 8080/tcp, 0.0.0.0:1521-&gt;1521/tcp, :::1521-&gt;1521/tcp   oracle</span><br><span class="line">$ docker logs -f oracle</span><br><span class="line">Starting Oracle Net Listener.</span><br><span class="line">Starting Oracle Database 11g Express Edition instance.</span><br></pre></td></tr></table></figure>
<p>使用資料庫工具連線進入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hostname: localhost</span><br><span class="line">port: 1521</span><br><span class="line">sid: xe</span><br><span class="line">username: system</span><br><span class="line">password: oracle</span><br></pre></td></tr></table></figure>
<p>Password for SYS &amp; SYSTEM</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">oracle</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/HLKyKzq.png" alt=""><br>
<img src="https://imgur.com/pDC97QK.png" alt=""></p>
<h2 id="Oracle-CDC-Logmior-Configuration">Oracle CDC (Logmior) Configuration</h2>
<h3 id="開啟日誌歸檔">開啟日誌歸檔</h3>
<ol>
<li>進入容器並切換成 oracle 使用者，再透過 sqlplus 以 sys 用戶登入進入資料庫</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it oracle /bin/bash</span><br><span class="line">[root@b2a1bd25aa97 /]# su — oracle</span><br><span class="line">[root@b2a1bd25aa97 /]# sqlplus sys/oracle as sysdba</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>檢查日誌歸檔是否已開啟。</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">archive log list;</span><br></pre></td></tr></table></figure>
<ul>
<li>若顯示 “Database log mode: No Archive Mode”，說明日誌歸檔未開啟，繼續執行下一步。</li>
<li>若顯示 “Database log mode: Archive Mode”，說明日誌歸檔已開啟，直接跳到退出數據庫連接。</li>
</ul>
<ol start="3">
<li>執行以下命令配置歸檔日誌參數。</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">system</span> <span class="keyword">set</span> db_recovery_file_dest_size <span class="operator">=</span> <span class="number">10</span>G;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">system</span> <span class="keyword">set</span> db_recovery_file_dest <span class="operator">=</span> <span class="string">&#x27;/u01/app/oracle/oradata/recovery_area&#x27;</span> <span class="keyword">scope</span><span class="operator">=</span>spfile;</span><br></pre></td></tr></table></figure>
<p>其中：</p>
<ul>
<li>10G 為日誌文件存儲空間的大小，請根據實際情況設置。</li>
<li>/u01/app/oracle/oradata/recovery_area 為日誌存儲路徑，須確保路徑提前創建。</li>
</ul>
<ol start="4">
<li>開啟日誌歸檔。</li>
</ol>
<div class="info">
<p>須知：<br>
開啟日誌歸檔功能需重啟數據庫，重啟期間將導致業務中斷，請謹慎操作。<br>
歸檔日誌會佔用較多的磁盤空間，若磁盤空間滿了會影響業務，請定期清理過期歸檔日誌。</p>
</div>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">shutdown immediate;</span><br><span class="line">startup mount;</span><br><span class="line"><span class="keyword">alter</span> database archivelog;</span><br><span class="line"><span class="keyword">alter</span> database <span class="keyword">open</span>;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>確認日誌歸檔是否已成功開啟。</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">archive log list;</span><br></pre></td></tr></table></figure>
<p>當顯示 “Database log mode: Archive Mode”，說明日誌歸檔已開啟。</p>
<ol start="6">
<li>退出資料庫連接。</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">exit;</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/Ghsl3lu.png" alt=""></p>
<h3 id="安裝-logminer-工具">安裝 logminer 工具</h3>
<ol>
<li>重新連接到資料庫</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sqlplus sys<span class="operator">/</span>oracle <span class="keyword">as</span> sysdba</span><br><span class="line"># sqlplus sys<span class="operator">/</span>password<span class="variable">@host</span>:port<span class="operator">/</span>SID <span class="keyword">as</span> sysdba</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>檢查 LogMiner 工具是否已安裝<br>
如果有返回訊息說明 LogMiner 已安裝</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">desc</span> DBMS_LOGMNR</span><br><span class="line"><span class="keyword">desc</span> DBMS_LOGMNR_D</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/cFw9dsR.png" alt=""></p>
<p>如果沒有訊息返回則需要另外安裝，請執行以下命令</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 創建 dbms_logmnr 包，用來分析歸檔日誌</span><br><span class="line">@$ORACLE_HOME<span class="operator">/</span>rdbms<span class="operator">/</span>admin<span class="operator">/</span>dbmslm.sql</span><br><span class="line"># 創建DBMS_LOGMNR_D包，該包用來創建數據字典文件。</span><br><span class="line">@$ORACLE_HOME<span class="operator">/</span>rdbms<span class="operator">/</span>admin<span class="operator">/</span>dbmslmd.sql</span><br></pre></td></tr></table></figure>
<h3 id="啟動最小附加日誌">啟動最小附加日誌</h3>
<p>啟用附加最小日誌（supplemental_log_data_min）可以確保 LogMiner（或其他任何基於 LogMiner 的產品）可以支援行連結、簇表、索引組織表等，避免在挖掘時會出現信息遺漏的情況。<br>
驗證是否有啟用附加日誌：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> supplemental_log_data_min, supplemental_log_data_pk, supplemental_log_data_all <span class="keyword">FROM</span> v$database;</span><br></pre></td></tr></table></figure>
<p>預設是沒有開啟的(return no/no/no)，在 <strong>資料庫級別</strong> 啟用最小補充日誌記錄，按如下方式配置：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> DATABASE <span class="keyword">ADD</span> SUPPLEMENTAL LOG DATA;</span><br><span class="line"><span class="keyword">ALTER</span> DATABASE <span class="keyword">ADD</span> SUPPLEMENTAL LOG DATA (<span class="keyword">PRIMARY</span> KEY) COLUMNS;</span><br><span class="line"><span class="keyword">ALTER</span> DATABASE <span class="keyword">ADD</span> SUPPLEMENTAL LOG DATA (<span class="keyword">ALL</span>) COLUMNS; </span><br><span class="line"># <span class="keyword">commit</span> the changes</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">SYSTEM</span> ARCHIVE LOG <span class="keyword">CURRENT</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/ScoREMo.png" alt=""></p>
<p>如果只是想給某個指定的表，開啟附加日誌記錄，參考下面。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> HR.EMPLOYEES <span class="keyword">ADD</span> SUPPLEMENTAL LOG DATA (<span class="keyword">ALL</span>) COLUMNS;</span><br></pre></td></tr></table></figure>
<h3 id="建立-logminer-用戶並賦予權限">建立 logminer 用戶並賦予權限</h3>
<ol>
<li>創建專屬 tablespace</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span>SPACE LOGMINER_TBS DATAFILE <span class="string">&#x27;/u01/app/oracle/oradata/XE/logminer_tbs.dbf&#x27;</span> SIZE <span class="number">25</span>M REUSE AUTOEXTEND <span class="keyword">ON</span> MAXSIZE UNLIMITED;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> logminer IDENTIFIED <span class="keyword">BY</span> logminer <span class="keyword">DEFAULT</span> TABLESPACE logminer_tbs QUOTA UNLIMITED <span class="keyword">ON</span> logminer_tbs;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>創建 logMiner 使用者並配置權限。</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">create</span> session, <span class="keyword">alter</span> session, <span class="keyword">alter</span> <span class="keyword">system</span>, execute_catalog_role, select_catalog_role, <span class="keyword">select</span> <span class="keyword">any</span> transaction, <span class="keyword">select</span> <span class="keyword">any</span> dictionary, <span class="keyword">select</span> <span class="keyword">any</span> <span class="keyword">table</span>, <span class="keyword">create</span> <span class="keyword">table</span>, <span class="keyword">alter</span> <span class="keyword">any</span> <span class="keyword">table</span>, <span class="keyword">create</span> sequence, lock <span class="keyword">any</span> <span class="keyword">table</span>, flashback <span class="keyword">any</span> <span class="keyword">table</span>, <span class="keyword">create</span> <span class="keyword">table</span>space, <span class="keyword">drop</span> tablespace <span class="keyword">to</span> logminer;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">connect</span> <span class="keyword">to</span> logminer;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">trigger</span> <span class="keyword">to</span> logminer;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> SYSTEM.LOGMNR_COL$ <span class="keyword">to</span> logminer;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> SYSTEM.LOGMNR_OBJ$ <span class="keyword">to</span> logminer;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> SYSTEM.LOGMNR_USER$ <span class="keyword">to</span> logminer;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> SYSTEM.LOGMNR_UID$ <span class="keyword">to</span> logminer;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">execute</span> <span class="keyword">on</span> SYS.DBMS_LOGMNR <span class="keyword">to</span> logminer;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">execute</span> <span class="keyword">on</span> SYS.DBMS_LOGMNR_D <span class="keyword">to</span> logminer;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">execute</span> <span class="keyword">on</span> SYS.DBMS_LOGMNR_LOGREP_DICT <span class="keyword">to</span> logminer;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">execute</span> <span class="keyword">on</span> SYS.DBMS_LOGMNR_SESSION <span class="keyword">to</span> logminer;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> V_$DATABASE <span class="keyword">to</span> logminer;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> V_$LOG <span class="keyword">TO</span> logminer;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> V_$LOG_HISTORY <span class="keyword">TO</span> logminer;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> V_$LOGMNR_LOGS <span class="keyword">TO</span> logminer;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> V_$LOGMNR_CONTENTS <span class="keyword">TO</span> logminer;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> V_$LOGMNR_PARAMETERS <span class="keyword">TO</span> logminer;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> V_$LOGFILE <span class="keyword">TO</span> logminer;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> V_$ARCHIVED_LOG <span class="keyword">TO</span> logminer;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> V_$ARCHIVE_DEST_STATUS <span class="keyword">TO</span> logminer;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">select</span> <span class="keyword">on</span> gv_$logmnr_parameters <span class="keyword">to</span> logminer;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">select</span> <span class="keyword">on</span> gv_$logmnr_logs <span class="keyword">to</span> logminer;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">select</span> <span class="keyword">on</span> gv_$archived_log <span class="keyword">to</span> logminer;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> v_$logmnr_dictionary <span class="keyword">to</span> logminer;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> V_$TRANSACTION <span class="keyword">to</span> logminer;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">EXECUTE</span> <span class="keyword">ON</span> DBMS_LOGMNR <span class="keyword">TO</span> logminer;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">EXECUTE</span> <span class="keyword">ON</span> DBMS_LOGMNR_D <span class="keyword">TO</span> logminer;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> DBMS_LOGMNR_D <span class="keyword">to</span> logminer;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> DBMS_LOGMNR <span class="keyword">to</span> logminer;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> dba_objects <span class="keyword">to</span> logminer;</span><br><span class="line"><span class="keyword">GRANT</span> UNLIMITED TABLESPACE <span class="keyword">TO</span> logminer;</span><br></pre></td></tr></table></figure>
<h2 id="架設-Debezium-環境">架設 Debezium 環境</h2>
<h3 id="安裝-Zookeeper-＆-Kafka">安裝 Zookeeper ＆ Kafka</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d -it --name zookeeper -p 2181:2181 -p 2888:2888 -p 3888:3888 debezium/zookeeper:1.5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 為了給外部連線使用，kafka 需設置 advertised_listeners 參數</span></span><br><span class="line">docker run -d -it --name kafka -p 9092:9092 -e ADVERTISED_HOST_NAME=10.13.1.105 -e ADVERTISED_LISTENERS=PLAINTEXT://10.13.1.105:9092 --link zookeeper:zookeeper debezium/kafka:1.5</span><br></pre></td></tr></table></figure>
<h3 id="準備新的-Kafka-Connect-Image">準備新的 Kafka Connect Image</h3>
<p>根據官網的提示，如果要連接 oracle 需要自行下載並複製 jdbc driver 到 kafka connect 中。</p>
<blockquote>
<p>Due to licensing requirements, the Debezium Oracle connector does not ship with the Oracle JDBC driver or XStream API files. You must download these files directly from Oracle and add them to your environment.</p>
</blockquote>
<p>步驟如下：</p>
<ol>
<li>下載 oracle instant clinet</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://download.oracle.com/otn_software/linux/instantclient/185000/instantclient-basic-linux.x64-18.5.0.0.0dbru.zip</span><br><span class="line"><span class="comment"># 解壓縮</span></span><br><span class="line">unzip instantclient-basic-linux.x64-18.5.0.0.0dbru.zip</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>啟動臨時的 container</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -it --name connect -p 8083:8083 -e GROUP_ID=1 -e CONFIG_STORAGE_TOPIC=test_connect_configs -e OFFSET_STORAGE_TOPIC=test_connect_offsets -e STATUS_STORAGE_TOPIC=test_connect_statuses --link zookeeper:zookeeper --link kafka:kafka debezium/connect:1.5</span><br></pre></td></tr></table></figure>
<p>其中，需要傳入如下環境變數：</p>
<ul>
<li>GROUP_ID：若需要啟動多個 Debezium 例項組成叢集，那麼它們的 GROUP_ID 必須被設一樣。</li>
<li>CONFIG_STORAGE_TOPIC：指定用來存 connector 的 config 資訊的 kafka topic。</li>
<li>STATUS_STORAGE_TOPIC：指定用來儲存 connector 的狀態資訊的 kafka topic。</li>
<li>OFFSET_STORAGE_TOPIC：只定用來存 connector 監控資料流的 offset 的 kafka topic，若使用的是 Oracle Connector，那麼該 topic 存的就是 Oracle logminer 的 scn。</li>
</ul>
<ol start="3">
<li>製作新的 kafka connect image<br>
首先複製整個 instant clinet 的資料夾到 container 中</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker cp ./instantclient_18_5/ connect:/kafka/</span><br></pre></td></tr></table></figure>
<p>進入 container 中，將 instantclinet 下的 jdbc driver 複製到 /kafka/libs 底下 (因為本文範例使用 logminer 監聽 CDC，故僅需將 ojdbc8.jar 複製，xstreams.jar 檔只有在 xstream 模式下才需要使用到)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it connect /bin/bash</span><br><span class="line">[kafka@88c5e1f0af86 ~]$ ls</span><br><span class="line">LICENSE  bin     config.orig  data           instantclient_18_5  logs</span><br><span class="line">NOTICE   config  connect      external_libs  libs</span><br><span class="line">[kafka@88c5e1f0af86 ~]$ cp instantclient_18_5/ojdbc8.jar libs/</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>退出 container，查看 container id 後將狀態 commit 成新的 image</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps</span><br><span class="line">CONTAINER ID   IMAGE                        COMMAND                  CREATED        STATUS        PORTS                                                                                                                                                 NAMES</span><br><span class="line">88c5e1f0af86   connect:1.5              &quot;/docker-entrypoint.…&quot;   21 hours ago   Up 21 hours   8778/tcp, 9092/tcp, 0.0.0.0:8083-&gt;8083/tcp, :::8083-&gt;8083/tcp, 9779/tcp                                                                               connect</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker commit 88c5e1f0af86 connect:tmp</span><br></pre></td></tr></table></figure>
<p>準備一個 Dockerfile</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM connect:tmp</span><br><span class="line">USER root</span><br><span class="line">RUN yum -y install libaio &amp;&amp; yum clean all</span><br><span class="line">USER kafka</span><br></pre></td></tr></table></figure>
<p>Build 最終的 docker image</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t connect:1.5.1</span><br></pre></td></tr></table></figure>
<h3 id="安裝-Kafka-Connect">安裝 Kafka Connect</h3>
<p>從上一步驟包的 kafka connect image 建立正式的 connect container，注意要加上 <code>LD_LIBRARY_PATH</code> 環境變數指向 instantclient 的目錄</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -it --name connect -p 8083:8083 -e GROUP_ID=1 -e CONFIG_STORAGE_TOPIC=test_connect_configs -e OFFSET_STORAGE_TOPIC=test_connect_offsets -e STATUS_STORAGE_TOPIC=test_connect_statuses -e LD_LIBRARY_PATH=/kafka/instantclient_18_5 --link zookeeper:zookeeper --link kafka:kafka connect:1.5.1</span><br></pre></td></tr></table></figure>
<p>查看 kafka connect 的資訊以及 connector 列表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -H <span class="string">&quot;Accept:application/json&quot;</span> localhost:8083/</span><br><span class="line">curl -H <span class="string">&quot;Accept:application/json&quot;</span> localhost:8083/connectors/</span><br></pre></td></tr></table></figure>
<h3 id="配置-Oracle-Connector">配置 Oracle Connector</h3>
<p>呼叫 kafka connect 的 connector API 以創建 connector</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -i -X PUT -H <span class="string">&quot;Accept:application/json&quot;</span> -H <span class="string">&quot;Content-Type:application/json&quot;</span>  localhost:8083/connectors/oracle1/config -d <span class="string">&#x27;&#123;&quot;name&quot;: &quot;oracle1&quot;, &quot;connector.class&quot;: &quot;io.debezium.connector.oracle.OracleConnector&quot;, &quot;tasks.max&quot;: &quot;1&quot;,&quot;database.server.name&quot;: &quot;XE&quot;, &quot;database.hostname&quot;: &quot;10.13.1.105&quot;, &quot;database.port&quot;: &quot;1521&quot;, &quot;database.user&quot;: &quot;logminer&quot;, &quot;database.password&quot;: &quot;logminer&quot;, &quot;database.dbname&quot;: &quot;XE&quot;, &quot;database.out.server.name&quot;: &quot;dbzout&quot;, &quot;database.schema&quot;: &quot;HR&quot;, &quot;database.history.kafka.bootstrap.servers&quot;: &quot;kafka:9092&quot;, &quot;database.history.kafka.topic&quot;: &quot;utest&quot;, &quot;database.connection.adapter&quot;: &quot;logminer&quot;, &quot;table.include.list&quot;: &quot;HR.*&quot;, &quot;snapshot.mode&quot;: &quot;initial&quot;, &quot;database.tablename.case.insensitive&quot;: &quot;true&quot;, &quot;decimal.handling.mode&quot;: &quot;string&quot;, &quot;log.mining.strategy&quot;: &quot;online_catalog&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>覺得 curl 不方便，可以換用 postman：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;oracle1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;connector.class&quot;</span>:<span class="string">&quot;io.debezium.connector.oracle.OracleConnector&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;tasks.max&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;database.hostname&quot;</span>:<span class="string">&quot;10.13.1.105&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;database.port&quot;</span>:<span class="string">&quot;1521&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;database.user&quot;</span>:<span class="string">&quot;logminer&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;database.password&quot;</span>:<span class="string">&quot;logminer&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;database.dbname&quot;</span>:<span class="string">&quot;XE&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;database.server.name&quot;</span>:<span class="string">&quot;XE&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;database.history.kafka.bootstrap.servers&quot;</span>:<span class="string">&quot;kafka:9092&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;database.history.kafka.topic&quot;</span>:<span class="string">&quot;utest&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;database.connection.adapter&quot;</span>:<span class="string">&quot;logminer&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;table.include.list&quot;</span>:<span class="string">&quot;HR.*&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;log.mining.strategy&quot;</span>:<span class="string">&quot;online_catalog&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/GrPflZL.png" alt=""></p>
<p>其中：</p>
<ul>
<li>name：註冊到 Kafka Connect 服務的 Connector 名稱。</li>
<li><a href="http://database.server.name">database.server.name</a>：虛擬的資料庫 Server 名稱，可以根據實際需求定義，定義 Kafka topic 時會使用該值。</li>
<li>table.include.list：監聽的數據表列表，以 <code>,</code> 分割。<code>HR.*</code> 表示監聽 HR 下的所有資料表。</li>
<li>每個被監控的表在 Kafka 都會對應一個 topic，topic 的命名規範是 <code>&lt;database.server.name&gt;.&lt;schema&gt;.&lt;table&gt;</code></li>
<li>log.mining.strategy：預設為 redo_log_catalog，會造成 kafka consume 延遲，查官網後發現，如果要頻繁修改 DDL (如表的 schema) 才需要設置。使用 <code>online_catalog</code> 只監聽資料表內的 data 變化不會額外寫表的 DDL 資訊，能加速 logminer！</li>
</ul>
<h3 id="查看-Connector-狀態">查看 Connector 狀態</h3>
<p>下 GET <code>/connectors/&lt;connectorName&gt;/status</code> 的 api</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -H &quot;Accept:application/json&quot; http://127.0.0.1:8083/connectors/oracle1/status</span><br></pre></td></tr></table></figure>
<p>如果成功會回傳以下回覆</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;oracle1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;connector&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;state&quot;</span>: <span class="string">&quot;RUNNING&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;worker_id&quot;</span>: <span class="string">&quot;172.17.0.5:8083&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;state&quot;</span>: <span class="string">&quot;RUNNING&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;worker_id&quot;</span>: <span class="string">&quot;172.17.0.5:8083&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;source&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="增刪改資料表並查看-Kafka-Topic-是否有收到-log-資料">增刪改資料表並查看 Kafka Topic 是否有收到 log 資料</h3>
<p>使用 kafka clinet 腳本程式列出目前 kafka server 上的所有 topic</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./kafka-topics.sh --list --bootstrap-server 10.13.1.105:9092</span><br><span class="line">XE</span><br><span class="line">XE.HR.COUNTRIES</span><br><span class="line">XE.HR.DEPARTMENTS</span><br><span class="line">XE.HR.EMPLOYEES</span><br><span class="line">XE.HR.JOBS</span><br><span class="line">XE.HR.JOB_HISTORY</span><br><span class="line">XE.HR.LOCATIONS</span><br><span class="line">XE.HR.REGIONS</span><br><span class="line">__consumer_offsets</span><br><span class="line">test_connect_configs</span><br><span class="line">test_connect_offsets</span><br><span class="line">test_connect_statuses</span><br><span class="line">utest</span><br></pre></td></tr></table></figure>
<p>開啟 kafka consumer 消費 logminer 捕捉 HR.EMPLOYEES 表的變化</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./kafka-console-consumer.sh --bootstrap-server 10.13.1.105:9092 --topic XE.HR.EMPLOYEES --from-beginning</span><br></pre></td></tr></table></figure>
<p>進入資料庫操作目標資料表 HR.EMPLOYEES，新增一筆員工資料</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sqlplus sys<span class="operator">/</span>oracle<span class="variable">@127</span><span class="number">.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">1521</span><span class="operator">/</span>xe <span class="keyword">as</span> sysdba</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> HR.EMPLOYEES(EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,MANAGER_ID,DEPARTMENT_ID) <span class="keyword">values</span>(<span class="number">206</span>,<span class="string">&#x27;Kawhi&#x27;</span>,<span class="string">&#x27;Leonard&#x27;</span>,<span class="string">&#x27;KAWHI&#x27;</span>,<span class="string">&#x27;111.222.3333&#x27;</span>,<span class="number">2022</span><span class="number">-01</span><span class="number">-19</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="string">&#x27;SH_CLERK&#x27;</span>,<span class="number">15000</span>,<span class="number">124</span>,<span class="number">50</span>);</span><br></pre></td></tr></table></figure>
<p>回到 kafka consumer 的 terminal 可以發現可以收到 logminer 變動的資料</p>
<p><img src="https://imgur.com/00Ul63W.png" alt=""></p>
<p><img src="https://imgur.com/KArHEsu.png" alt=""></p>
<h2 id="Reference">Reference</h2>
<ul>
<li><a href="https://www.796t.com/article.php?id=169153">https://www.796t.com/article.php?id=169153</a></li>
<li><a href="https://www.itread01.com/content/1549275121.html">https://www.itread01.com/content/1549275121.html</a></li>
<li><a href="https://debezium.io/documentation/reference/stable/connectors/oracle.html">https://debezium.io/documentation/reference/stable/connectors/oracle.html</a></li>
<li><a href="https://python.iitter.com/other/229206.html">https://python.iitter.com/other/229206.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Database</category>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Debezium</tag>
        <tag>Oracle</tag>
        <tag>CDC</tag>
      </tags>
  </entry>
  <entry>
    <title>[Python] Install Python3.9 on CentOS7</title>
    <url>/Python-Install-Python3-9-on-CentOS7/</url>
    <content><![CDATA[<h4 id="step1">step1</h4>
<p>下載依賴工具以及安裝包</p>
<span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make libffi-devel wget</span><br><span class="line">$ wget https://www.python.org/ftp/python/3.9.1/Python-3.9.1.tgz</span><br><span class="line">$ tar zxvf Python-3.9.1.tgz</span><br></pre></td></tr></table></figure>
<h4 id="step2">step2</h4>
<p>編譯 Python</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd Python-3.9.1</span><br><span class="line"># 檢測並產生 Makefile，且指定安裝目錄</span><br><span class="line">$ ./configure prefix=/usr/local/python3</span><br><span class="line"># 開始編譯</span><br><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<h4 id="step3">step3</h4>
<p>因為想直接用 <code>python</code> command 代表使用 python3，所以新增別名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vi ~/.bashrc</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alias python=&#x27;/usr/local/python3/bin/python3&#x27;</span><br><span class="line">alias pip=&#x27;/usr/local/python3/bin/pip3&#x27;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ source ~/.bashrc</span><br></pre></td></tr></table></figure>
<h4 id="step4">step4</h4>
<p>確認安裝成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ python -V</span><br><span class="line">$ pip -V</span><br></pre></td></tr></table></figure>
<h4 id="補充-virtualenv">補充 (virtualenv)</h4>
<p>如果想保留系統預設的 python 2.7，則不要新增上面第三步的別名，相反的加上 python3 執行路徑的環境變數。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vi ~/.bashrc</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export python3=&#x27;/usr/local/python3/bin&#x27;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ source ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>為了區隔兩個 python 的版本，可以使用 virtualenv 隔離不同的開發環境。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pip3 install virtualenv</span><br><span class="line">$ python3 -m virtualenv project1</span><br><span class="line">$ cd project1</span><br><span class="line">$ source bin/activate</span><br><span class="line">$ python --version</span><br><span class="line">Python 3.9.1</span><br></pre></td></tr></table></figure>
<div class="info">
<p>環境變數設定小補充<br>
/etc/profile --&gt; 對所有用戶永久生效<br>
~/.bashrc --&gt; 對單一用戶永久生效，當你&quot;啟動&quot; shell 時執行<br>
~/.bash_profile --&gt; 對單一用戶永久生效，當你&quot;登入&quot; shell 時執行<br>
export xxx = xxx --&gt;直接運行 export 命令定義變量，只對當前 shell 有效，關閉shell 終端後失效。</p>
</div>
<h6 id="Refernce">Refernce</h6>
<ul>
<li><a href="https://blog.jiebu-lang.com/centos-7-install-python-3-7/">https://blog.jiebu-lang.com/centos-7-install-python-3-7/</a></li>
<li><a href="https://liqiang.io/post/install-python3-8-in-centos-973bdb81">https://liqiang.io/post/install-python3-8-in-centos-973bdb81</a></li>
<li><a href="https://blog.csdn.net/qq_36758461/article/details/103841798">https://blog.csdn.net/qq_36758461/article/details/103841798</a></li>
</ul>
]]></content>
      <categories>
        <category>Programming</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>[Python &amp; Golang] Selenium Screenshot to the Specific Area</title>
    <url>/Python-Golang-Selenium-Screenshot-Specific-Area/</url>
    <content><![CDATA[<p>本篇文章紀錄如何使用 python 以及 golang 改寫的 selenium，螢幕截圖指定網址的特定範圍並存成圖片。</p>
<span id="more"></span>
<h2 id="目標">目標</h2>
<p>預計爬取 <a href="https://www.selenium.dev/projects/">selenium 官網</a> 的 project 頁面，並擷取指定範圍存成圖片。<br>
<img src="https://imgur.com/ZMc0iPJ.png" alt=""></p>
<h2 id="Python-Sample-Code">Python Sample Code</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;開始爬取&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    options = Options()</span><br><span class="line">    options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&#x27;--no-sandbox&#x27;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&#x27;lang=zh_TW.UTF-8&#x27;</span>)</span><br><span class="line">    driver = webdriver.Chrome(<span class="string">&#x27;./chromedriver&#x27;</span>, options=options)</span><br><span class="line">    driver.set_window_size(<span class="number">1400</span>, <span class="number">1500</span>) <span class="comment"># 設定視窗大小</span></span><br><span class="line">    </span><br><span class="line">    driver.get(<span class="string">&quot;https://www.selenium.dev/projects/&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    driver.save_screenshot(<span class="string">&quot;./scrnsht.png&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># crop curve table only</span></span><br><span class="line">    ele = driver.find_elements_by_xpath(<span class="string">&quot;/html/body/div/main/div[1]/div&quot;</span>)</span><br><span class="line"></span><br><span class="line">    left = ele[<span class="number">0</span>].location[<span class="string">&#x27;x&#x27;</span>]</span><br><span class="line">    top = ele[<span class="number">0</span>].location[<span class="string">&#x27;y&#x27;</span>]</span><br><span class="line">    right = left + ele[<span class="number">0</span>].size[<span class="string">&#x27;width&#x27;</span>]</span><br><span class="line">    bottom = top + ele[<span class="number">0</span>].size[<span class="string">&#x27;height&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    im = Image.<span class="built_in">open</span>(<span class="string">&quot;./scrnsht.png&quot;</span>)</span><br><span class="line">    im = im.crop((left, top, right, bottom))</span><br><span class="line">    im.save(<span class="string">&quot;./crop.png&quot;</span>)</span><br><span class="line"></span><br><span class="line">    driver.quit()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;爬取完成&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="Golang-tebeka-selenium-Sample-Code">Golang(tebeka/selenium) Sample Code</h2>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;image&quot;</span></span><br><span class="line">	<span class="string">&quot;image/png&quot;</span></span><br><span class="line">	<span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/tebeka/selenium&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/tebeka/selenium/chrome&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	opts := []selenium.ServiceOption&#123;</span><br><span class="line">		selenium.Output(os.Stderr), <span class="comment">// Output debug information to STDERR</span></span><br><span class="line">	&#125;</span><br><span class="line">	service, err := selenium.NewChromeDriverService(<span class="string">&quot;/home/nexdata/chromedriver&quot;</span>, <span class="number">9515</span>, opts...)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;Error starting the ChromeDriver server: %v&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> service.Stop()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// call browser</span></span><br><span class="line">	caps := selenium.Capabilities&#123;</span><br><span class="line">		<span class="string">&quot;browserName&quot;</span>: <span class="string">&quot;chrome&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// set chrome arguments</span></span><br><span class="line">	chromeCaps := chrome.Capabilities&#123;</span><br><span class="line">		Args: []<span class="keyword">string</span>&#123;</span><br><span class="line">			<span class="string">&quot;--headless&quot;</span>,   <span class="comment">// do not open the browser (run in background)</span></span><br><span class="line">			<span class="string">&quot;--no-sandbox&quot;</span>, <span class="comment">//  allow non-root to execute chrome</span></span><br><span class="line">			<span class="string">&quot;--disable-deb-shm-usage&quot;</span>,</span><br><span class="line">			<span class="string">&quot;--window-size=1400,1500&quot;</span>,</span><br><span class="line">			<span class="comment">//&quot;--start-maximized&quot;,</span></span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">	caps.AddChrome(chromeCaps)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// connect to the webdriver instance which running locally</span></span><br><span class="line">	wd, err := selenium.NewRemote(caps, <span class="string">&quot;http://127.0.0.1:9515/wd/hub&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;connect to the webDriver faild: %v&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// delay closing Chrome</span></span><br><span class="line">	<span class="keyword">defer</span> wd.Quit()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// connect to the target website</span></span><br><span class="line">	<span class="keyword">if</span> err := wd.Get(<span class="string">&quot;https://www.selenium.dev/projects/&quot;</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;connect to the reflow server failed: %v&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	time.Sleep(time.Duration(<span class="number">1</span>) * time.Second)</span><br><span class="line"></span><br><span class="line">	ele, err := wd.FindElement(selenium.ByXPATH, <span class="string">&quot;/html/body/div/main/div[1]/div&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;target element doesn&#x27;t exist!&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	scrnsht, _ := wd.Screenshot()</span><br><span class="line">	ioutil.WriteFile(<span class="string">&quot;scrnsht.png&quot;</span>, scrnsht, <span class="number">0666</span>)</span><br><span class="line">	loc, _ := ele.Location()</span><br><span class="line">	sz, _ := ele.Size()</span><br><span class="line">	<span class="comment">// fmt.Println(loc)</span></span><br><span class="line">	<span class="comment">// fmt.Println(sz)</span></span><br><span class="line">	file, _ := os.Open(<span class="string">&quot;./scrnsht.png&quot;</span>)</span><br><span class="line">	<span class="keyword">defer</span> file.Close()</span><br><span class="line">	img, _ := png.Decode(file)</span><br><span class="line">	sub_image := img.(<span class="keyword">interface</span> &#123;</span><br><span class="line">		SubImage(r image.Rectangle) image.Image</span><br><span class="line">	&#125;).SubImage(image.Rect(loc.X, loc.Y, loc.X+sz.Width, loc.Y+sz.Height))</span><br><span class="line">	file, _ = os.Create(<span class="string">&quot;./crop.png&quot;</span>)</span><br><span class="line">	png.Encode(file, sub_image)</span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">&quot;爬取完成&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Result">Result</h2>
<h3 id="scrnsht-png">scrnsht.png</h3>
<p><img src="https://imgur.com/IbihnjU.png" alt=""></p>
<h3 id="crop-png">crop.png</h3>
<p><img src="https://imgur.com/Id6JtNo.png" alt=""></p>
]]></content>
      <categories>
        <category>Programming</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Python</tag>
        <tag>Selenium</tag>
      </tags>
  </entry>
  <entry>
    <title>[Python] Paramiko</title>
    <url>/Python-paramiko/</url>
    <content><![CDATA[<h2 id="簡介">簡介</h2>
<p>paramiko 是一個使用 SSH2 遠端控制的模組，可以對遠端服務器進行命令或文件操作。有兩個核心組件：</p>
<span id="more"></span>
<ul>
<li>SSHClient：它的作用類似於 Linux 的 SSH 命令，是對 SSH 會話 (Session)	* 的一個類的封裝，這個類封裝了傳輸(Transport)	*、通道(Channel)* 及 SFTPClient 建立的方法 (open_sftp)。</li>
<li>SFTPClient：它的作用類似 Linux 的 SFTP 命令，是對 SFTP 客戶端的一個類的封裝。主要是實現對遠端文件的操作，上傳、下載、修改文件權限等操作。</li>
</ul>
<table><tr><td bgcolor=#FAFAFA>
<span style="font-size:10px;">* Transport：是一種加密的會話 (session)，使用時會同步創建一個加密的 Channel（即為一個 socket）。<br/>
* Session：client 和 server 保持連接的對象。</span>
</td></tr></table>
<h2 id="SSHClient-：遠端-SSH-登入">SSHClient()：遠端 SSH 登入</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line">   <span class="comment"># new a SSHClient instant</span></span><br><span class="line">   client = paramiko.SSHClient()</span><br><span class="line"> </span><br><span class="line">   <span class="comment"># 使用自動添加策略，保存伺服器的 hostname 和金鑰資訊</span></span><br><span class="line">   client.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line"> </span><br><span class="line">   <span class="comment"># connect the server through ssh using password to login</span></span><br><span class="line">   client.connect(hostname=<span class="string">&#x27;10.1.5.1&#x27;</span>, port=<span class="number">22</span>, username=<span class="string">&#x27;root&#x27;</span>, password=<span class="string">&#x27;0000&#x27;</span>)</span><br><span class="line">   <span class="comment"># 或是使用金鑰登入</span></span><br><span class="line">   <span class="comment"># private = paramiko.RSAKey.from_private_key_file(&#x27;/home/root/.ssh/id_rsa&#x27;)</span></span><br><span class="line">   <span class="comment"># client.connect(hostname=&#x27;10.1.5.1&#x27;,port=22,username=&#x27;root&#x27;,pkey=private)</span></span><br></pre></td></tr></table></figure>
<h2 id="exec-command-以及-invoke-shell-的用法與差別">exec_command() 以及 invoke_shell() 的用法與差別</h2>
<p>exec_command() 函數使用 SSH exec 通道，會在執行命令後關閉通道，不同通道間不保證保留互相狀態(例如工作目錄或是變數)。<br>
invoke_shell() 函數使用 SSH shell 通道，會實現交互式 shell 會話，在 stream 關閉前會在同一個通道中執行命令。</p>
<h5 id="exec-command">exec_command()</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">   <span class="comment"># open a channel and execute the command</span></span><br><span class="line">   stdin, stdout, stderr = client.exec_command(<span class="string">&#x27;df -h&#x27;</span>)  </span><br><span class="line">   <span class="comment"># stdout 為正確輸出，stderr 為錯誤輸出，同時只有一個變量有值</span></span><br><span class="line"> </span><br><span class="line">   <span class="comment"># print out the result</span></span><br><span class="line">   <span class="built_in">print</span>(stdout.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"> </span><br><span class="line">   <span class="comment"># close SSHClient</span></span><br><span class="line">   client.close()</span><br></pre></td></tr></table></figure>
<h5 id="invoke-shell">invoke_shell()</h5>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">    command=<span class="string">&#x27;dh -h&#x27;</span></span><br><span class="line">    chan=ssh.invoke_shell()</span><br><span class="line">    chan.send(command+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="comment"># \n 是執行命令的意思，沒有 \n 不會執行</span></span><br><span class="line">    time.sleep(<span class="number">1</span>) <span class="comment"># 等待執行</span></span><br><span class="line">    res=chan.recv(<span class="number">1024</span>) <span class="comment"># 接受返回訊息</span></span><br><span class="line">    chan.close()</span><br></pre></td></tr></table></figure>
<h3 id="SSHClient-封装-Transport">SSHClient 封装 Transport</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"> </span><br><span class="line">   <span class="comment"># create a channel</span></span><br><span class="line">   transport = paramiko.Transport((<span class="string">&#x27;hostname&#x27;</span>, <span class="number">22</span>))</span><br><span class="line">   transport.connect(username=<span class="string">&#x27;root&#x27;</span>, password=<span class="string">&#x27;0000&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">   ssh = paramiko.SSHClient()</span><br><span class="line">   ssh._transport = transport</span><br><span class="line"> </span><br><span class="line">   stdin, stdout, stderr = ssh.exec_command(<span class="string">&#x27;df -h&#x27;</span>)</span><br><span class="line">   <span class="built_in">print</span>(stdout.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"> </span><br><span class="line">   transport.close()</span><br></pre></td></tr></table></figure>
<h6 id="Reference">Reference</h6>
<ul>
<li><a href="https://stackoverflow.com/questions/6770206/what-is-the-difference-between-the-shell-channel-and-the-exec-channel-in-jsc">https://stackoverflow.com/questions/6770206/what-is-the-difference-between-the-shell-channel-and-the-exec-channel-in-jsc</a></li>
<li><a href="https://www.cnblogs.com/xiao-apple36/p/9144092.html">https://www.cnblogs.com/xiao-apple36/p/9144092.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Programming</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Paramiko</tag>
      </tags>
  </entry>
  <entry>
    <title>[Python] 系統效能監測</title>
    <url>/Python-system-proformance-monitor/</url>
    <content><![CDATA[<p>監測的指標有 CPU 使用率&amp;頻率、已使用的記憶體、磁碟讀寫 bytes 數、網路收發 bytes 數。會將每秒讀取到的數值存為 csv 檔。</p>
<span id="more"></span>
<h3 id="Prerequisite">Prerequisite</h3>
<ul>
<li>Python3.5+</li>
<li>psutil</li>
</ul>
<h3 id="code">code</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> psutil</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SystemMonitor</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    running = <span class="literal">True</span></span><br><span class="line">    CPU = namedtuple(<span class="string">&#x27;cpu&#x27;</span>, [<span class="string">&#x27;percentage&#x27;</span>, <span class="string">&#x27;freq&#x27;</span>])</span><br><span class="line">    NET = namedtuple(<span class="string">&#x27;net&#x27;</span>, [<span class="string">&#x27;rx&#x27;</span>, <span class="string">&#x27;tx&#x27;</span>])</span><br><span class="line">    DISK = namedtuple(<span class="string">&#x27;disk&#x27;</span>, [<span class="string">&#x27;read&#x27;</span>, <span class="string">&#x27;write&#x27;</span>])</span><br><span class="line">    SysMon = namedtuple(<span class="string">&#x27;sysmon&#x27;</span>, [<span class="string">&#x27;timestamp&#x27;</span>, <span class="string">&#x27;cpu&#x27;</span>, <span class="string">&#x27;vm&#x27;</span>, <span class="string">&#x27;disk&#x27;</span>, <span class="string">&#x27;net&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, csvfile=<span class="string">&#x27;./sysmon.csv&#x27;</span>, interval=<span class="number">1.0</span></span>):</span></span><br><span class="line">        self.interval = interval</span><br><span class="line">        self.csvfile = csvfile</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.info()</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(self.csvfile, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            fp.write(<span class="string">&#x27;timestamp,percentage,freq,vm,disk_rd,disk_wr,net_rx,&#x27;</span></span><br><span class="line">                     <span class="string">&#x27;net_tx\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> self.running:</span><br><span class="line">            time.sleep(self.interval)</span><br><span class="line">            info = self.info()</span><br><span class="line">            <span class="comment">#print(info.timestamp)</span></span><br><span class="line">            info = [</span><br><span class="line">                info.timestamp,</span><br><span class="line">                info.cpu.percentage,</span><br><span class="line">                info.cpu.freq,</span><br><span class="line">                info.vm,</span><br><span class="line">                info.disk.read,</span><br><span class="line">                info.disk.write,</span><br><span class="line">                info.net.rx,</span><br><span class="line">                info.net.tx,</span><br><span class="line">            ]</span><br><span class="line">            info = <span class="string">&#x27;,&#x27;</span>.join([<span class="built_in">str</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> info]) + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(self.csvfile, <span class="string">&#x27;a+&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">                fp.write(info)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">info</span>(<span class="params">self</span>):</span></span><br><span class="line">        ts = <span class="built_in">int</span>(time.time())</span><br><span class="line">        cpu = self.CPU(psutil.cpu_percent(), psutil.cpu_freq().current)</span><br><span class="line">        vm = psutil.virtual_memory().used</span><br><span class="line">        diskio = psutil.disk_io_counters()</span><br><span class="line">        netio = psutil.net_io_counters()</span><br><span class="line"></span><br><span class="line">        result = self.SysMon(</span><br><span class="line">            ts, cpu, vm,</span><br><span class="line">            self.DISK(diskio.read_bytes, diskio.write_bytes),</span><br><span class="line">            self.NET(netio.bytes_recv, netio.bytes_sent))</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    m = SystemMonitor()</span><br><span class="line">    m.run()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Programming</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>[RabbitMQ] 在 K8s cluster 上安裝叢集</title>
    <url>/RabbitMQ-%E5%9C%A8-K8s-cluster-%E4%B8%8A%E5%AE%89%E8%A3%9D%E5%8F%A2%E9%9B%86/</url>
    <content><![CDATA[<h3 id="先決條件">先決條件</h3>
<ul>
<li>kubernetes 1.17 版以上</li>
<li>RabbitMQ image 3.8.8+</li>
</ul>
<span id="more"></span>
<h3 id="安裝-operator">安裝 operator</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ kubectl apply -f <span class="string">&quot;https://github.com/rabbitmq/cluster-operator/releases/latest/download/cluster-operator.yml&quot;</span></span><br><span class="line">namespace/rabbitmq-system created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/rabbitmqclusters.rabbitmq.com created</span><br><span class="line">serviceaccount/rabbitmq-cluster-operator created</span><br><span class="line">role.rbac.authorization.k8s.io/rabbitmq-cluster-leader-election-role created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/rabbitmq-cluster-operator-role created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/rabbitmq-cluster-leader-election-rolebinding created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/rabbitmq-cluster-operator-rolebinding created</span><br><span class="line">deployment.apps/rabbitmq-cluster-operator created</span><br></pre></td></tr></table></figure>
<p>確認 CRD 部屬完成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl get customresourcedefinitions.apiextensions.k8s.io | grep rabbitmq</span><br><span class="line">rabbitmqclusters.rabbitmq.com                         2020-12-29T06:22:27Z</span><br></pre></td></tr></table></figure>
<h3 id="安裝-RabbitMQ-Cluster">安裝 RabbitMQ Cluster</h3>
<p>RabbitMQ server 透過 <code>RabbitmqCluster</code> 資源來建立，整個集群資源(如 pod, svc, statefulSet)都會建在同一個指定 namespace 下。</p>
<h4 id="準備-yaml-檔">準備 yaml 檔</h4>
<p>準備一個 yaml 檔來定義 <code>RabbitmqCluster</code> 資源：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mkdir rbmq &amp;&amp; cd rbmq &amp;&amp; touch rbmq.yaml</span><br><span class="line">$ vim rbmq.yaml</span><br></pre></td></tr></table></figure>
<p>定義了 cluster name 為 <code>rbmq</code>、指定放在 <code>rabbitmq</code> namespace 下，複本數指定為 <code>3</code>、service 類型為 <code>LoadBalancer</code> (前提是 k8s 集群有建置 LB 套件)、指定 storageClass 以及空間。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">rabbitmq.com/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RabbitmqCluster</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rbmq</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">rabbitmq</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">service:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">LoadBalancer</span></span><br><span class="line">  <span class="attr">persistence:</span></span><br><span class="line">    <span class="attr">storageClassName:</span> <span class="string">standard</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">20Gi</span></span><br></pre></td></tr></table></figure>
<div class="warning">
<p>persistence 可以不寫，但 k8s 集群必須事先設置 default 的 StorageClass，若無填寫則會使用 default storageClass。否則集群將不會被 scheduled 成功，因為 rabbitMQ 需要有 persistent volume。</p>
</div>
<p>p.s. 使用 <code>$ kubectl get sc</code> 取得目前 k8s 集群的 StorageClass 資源<br>
<img src="https://imgur.com/2DecQC8.png" alt=""></p>
<h4 id="開始建立">開始建立</h4>
<p>應用上一步驟定義好的 <code>RabbitmqCluster</code> 資源，如果不使用與 operator 相同的 namespace 的話，需要先自己創一個。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ kubectl create ns rabbitmq</span><br><span class="line">$ kubectl apply -f rbmq.yaml</span><br></pre></td></tr></table></figure>
<p>驗證資源是否都有建立成功</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ kubectl get all -n rabbitmq</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/ejZ1MXz.png" alt=""></p>
<h3 id="加入-TLS">加入 TLS</h3>
<h4 id="建立-Secret">建立 Secret</h4>
<p>需先準備好一組含有 key 跟 cert 的 pem 格式的金鑰，如果沒有就按照下面指令創建。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ openssl req -x509 -newkey rsa:2048 -sha256 -nodes -keyout key.pem -out cert.pem -days 3650</span><br></pre></td></tr></table></figure>
<p>使用現有的金鑰做成 secret</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ kubectl create secret -n rabbitmq tls rbmq-tls-secret --cert=/root/cert.pem --key=/root/key.pem</span><br></pre></td></tr></table></figure>
<h4 id="修改配置">修改配置</h4>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ kubectl edit rabbitmqcluster rbmq</span><br></pre></td></tr></table></figure>
<p>在 spec.tls.secretName 中加上剛剛的 secret。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">tls:</span></span><br><span class="line">    <span class="attr">secretName:</span> <span class="string">rbmq-tls-secret</span></span><br></pre></td></tr></table></figure>
<p>保存後離開就可以看到集群上已經開啟了 tls。</p>
<h3 id="進入-Rabbit-Management">進入 Rabbit Management</h3>
<p>開啟瀏覽器，輸入 LoadBalancer 配置的 <code>ip:15672</code> 進入 Rabbit Management。</p>
<h4 id="取得使用者帳密">取得使用者帳密</h4>
<p>admin user 的帳密儲存在 secret 中，資源名字為 cluster name 加上 <code>-default-user</code>，帳密皆以 base44 編碼儲存。使用以下命令取得帳號以及密碼：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl -n rabbitmq get secret rbmq-default-user -o jsonpath=&quot;&#123;.data.username&#125;&quot; | base64 --decode</span><br><span class="line">$ kubectl -n rabbitmq get secret rbmq-default-user -o jsonpath=&quot;&#123;.data.password&#125;&quot; | base64 --decode</span><br></pre></td></tr></table></figure>
<h6 id="Reference">Reference</h6>
<ul>
<li><a href="https://www.rabbitmq.com/kubernetes/operator">https://www.rabbitmq.com/kubernetes/operator</a></li>
</ul>
]]></content>
      <categories>
        <category>Big Data</category>
        <category>RabbitMQ</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>[Linux] SCP 傳送排除特定檔案或資料夾 (如 .git)</title>
    <url>/SCP-exclude-specific-file/</url>
    <content><![CDATA[<p>Scp all files and folders to the remote server without copying .git &amp; other dot files/folders:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd sourceFolder</span><br><span class="line">scp -r [!.]* root@remoteServer:/root/targetForder</span><br></pre></td></tr></table></figure>
<p>The command means transfer all the files/folders <code>*</code> under current directory except <code>[!]</code> the files’/folders’ named starting with <code>.</code>.</p>
]]></content>
      <categories>
        <category>OS</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>[Docker] 包 Selenium Chrome Docker Image</title>
    <url>/Selenium-Chrome-Docker-Image/</url>
    <content><![CDATA[<p>紀錄一下把 golang 改寫的 selenium 爬蟲程式包成 docker image 遇到的問題。</p>
<span id="more"></span>
<h1>最終的 Dockerfile</h1>
<p>Chrome 跟 chromedrive 竟然都可以透過 apk 安裝，方便又輕鬆 👍</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.15</span>.<span class="number">3</span>-alpine3.<span class="number">12</span> AS build</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> CGO_ENABLED=0 go build -o /grabreflow -ldflags=<span class="string">&quot;-s -w&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> alpine:edge</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./config /config</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./view /view</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=build /grabreflow /grabreflow</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk add --no-cache chromium chromium-chromedriver &amp;&amp; apk add wqy-zenhei --update-cache --repository https://nl.alpinelinux.org/alpine/edge/testing</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [ <span class="string">&quot;/grabreflow&quot;</span> ]</span></span><br></pre></td></tr></table></figure>
<h1>踩坑紀錄</h1>
<h2 id="1-使用-selenium-官方-docker-image-standalone-chrome-時無法讀寫檔案">1. 使用 selenium 官方 docker image standalone-chrome 時無法讀寫檔案</h2>
<h3 id="Dockerfile">Dockerfile</h3>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.15</span>.<span class="number">3</span>-alpine3.<span class="number">12</span> AS build</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> CGO_ENABLED=0 go build -o /grabreflow -ldflags=<span class="string">&quot;-s -w&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> selenium/standalone-chrome</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./config /config</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./view /view</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=build /grabreflow /grabreflow</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./chromedriver /chromedriver</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [ <span class="string">&quot;/grabreflow&quot;</span> ]</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker build -t grabreflow:0.9 -f seDockerfile .</span><br><span class="line">docker run -it -d --name grabreflow -p 4444:4444 -p 8080:8080 --shm-size=<span class="string">&quot;2g&quot;</span> grabreflow:0.9</span><br></pre></td></tr></table></figure>
<h3 id="Error-Logs">Error Logs</h3>
<p>錯在 service.go 192 行拿 image 要裁切時是空的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INFO[01-24T03:40:49.157785Z] &lt;nil&gt;                                        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2022/01/24 03:40:49 [Recovery] 2022/01/24 - 03:40:49 panic recovered:</span><br><span class="line">GET /api/convergence/grabreflow/TBCBB2039913 HTTP/1.1</span><br><span class="line">Host: 10.13.1.105:8080</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Dnt: 1</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:96.0) Gecko/20100101 Firefox/96.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">interface conversion: interface is nil, not interface &#123; SubImage(image.Rectangle) image.Image &#125;</span><br><span class="line">/usr/local/go/src/runtime/iface.go:454 (0x40b57b)</span><br><span class="line">/pkg/service/service.go:192 (0xb678e9)</span><br><span class="line">/go/pkg/mod/github.com/gin-gonic/gin@v1.7.7/context.go:168 (0xa6209a)</span><br><span class="line">/go/pkg/mod/github.com/gin-gonic/gin@v1.7.7/recovery.go:99 (0xa77088)</span><br><span class="line">/go/pkg/mod/github.com/gin-gonic/gin@v1.7.7/context.go:168 (0xa6209a)</span><br><span class="line">/go/pkg/mod/github.com/gin-gonic/gin@v1.7.7/gin.go:555 (0xa6d29d)</span><br><span class="line">/go/pkg/mod/github.com/gin-gonic/gin@v1.7.7/gin.go:511 (0xa6c9aa)</span><br><span class="line">/usr/local/go/src/net/http/server.go:2843 (0x7bdbc2)</span><br><span class="line">/usr/local/go/src/net/http/server.go:1925 (0x7b92cc)</span><br><span class="line">/usr/local/go/src/runtime/asm_amd64.s:1374 (0x46b3a0)</span><br></pre></td></tr></table></figure>
<h3 id="service-go">service.go</h3>
<p>上方的 log 的第一行 log INFO 印出的 nil 訊息就是下方程式中的第八行印的</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">scrnshot, _ := wd.Screenshot()</span><br><span class="line">ioutil.WriteFile(<span class="string">&quot;test&quot;</span>+strconv.Itoa(i+<span class="number">1</span>)+<span class="string">&quot;.png&quot;</span>, scrnshot, <span class="number">0666</span>)</span><br><span class="line">modal, _ := wd.FindElement(selenium.ByClassName, <span class="string">&quot;modal-body&quot;</span>)</span><br><span class="line">loc, _ := modal.Location()</span><br><span class="line">sz, _ := modal.Size()</span><br><span class="line">file, _ := os.Open(<span class="string">&quot;./test&quot;</span> + strconv.Itoa(i+<span class="number">1</span>) + <span class="string">&quot;.png&quot;</span>)</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line">log.Info(file)</span><br><span class="line">img, _ := png.Decode(file)</span><br><span class="line"><span class="comment">// service.go 198 行</span></span><br><span class="line">sub_image := img.(<span class="keyword">interface</span> &#123;</span><br><span class="line">SubImage(r image.Rectangle) image.Image</span><br><span class="line">&#125;).SubImage(image.Rect(loc.X, loc.Y, loc.X+sz.Width, loc.Y+sz.Height))			</span><br></pre></td></tr></table></figure>
<h3 id="solution">solution</h3>
<p><img src="https://imgur.com/ZX0nXdr.png" alt=""><br>
進入 container 後發現根目錄下的確沒有圖片檔；可以推算此錯誤應該是權限問題，因為容器執行的 user 是 seluser，而程式執行檔放在根目錄下，所以指定的檔案也是在根目錄下做讀寫，因此會有權限問題。又另外看了一下這包 image 使用的基底作業系統竟然是這麼大的 Ubuntu 20，所以就決定不 debug，直接放棄這一包 image。<br>
如果之後有要用這個映像檔的話，建議把執行檔放在 seluser 的家目錄下執行，或是在 Dockfile 的 entrypoint 前指定切換使用者為 root。</p>
<h2 id="2-使用自己包的-alpine-edge-會遇到-chromedriver-叫不起來的錯誤">2. 使用自己包的 alpine edge 會遇到 chromedriver 叫不起來的錯誤</h2>
<h3 id="Error-log">Error log</h3>
<p><img src="https://imgur.com/kBITplX.png" alt=""></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Starting ChromeDriver 97.0.4692.99 (d740da257583289dbebd2eb37e8668928fac5ead-refs/branch-heads/4692@&#123;#1461&#125;) on port 9515</span><br><span class="line">Only local connections are allowed.</span><br><span class="line">Please see https://chromedriver.chromium.org/security-considerations for suggestions on keeping ChromeDriver safe.</span><br><span class="line">[1643003263.594][SEVERE]: bind() failed: Address not available (99)</span><br><span class="line">[1643003263.594][INFO]: listen on IPv6 failed with error ERR_ADDRESS_INVALID</span><br><span class="line">[1643003263.594][SEVERE]: bind() failed: Address in use (98)</span><br><span class="line">[1643003263.594][INFO]: listen on IPv4 failed with error ERR_ADDRESS_IN_USE</span><br><span class="line">IPv4 port not available. Exiting...</span><br></pre></td></tr></table></figure>
<p>然後回頭看網頁呼叫 api 有在持續 request 的感覺，等了大概半世紀，回頭看網頁停止運轉後，才丟出中間在爬的 log，最後停在 runtime error</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[1643012436.436][DEBUG]: DevTools WebSocket Response: Runtime.evaluate (id=353) 65C32A9DA457F1E66E37A219E01492B4 &#123;</span><br><span class="line">   &quot;result&quot;: &#123;</span><br><span class="line">      &quot;description&quot;: &quot;1&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;number&quot;,</span><br><span class="line">      &quot;value&quot;: 1</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">[1643012436.436][INFO]: Done waiting for pending navigations. Status: ok</span><br><span class="line">[1643012436.436][INFO]: [d57c16acae2654b7717bc67f35b0e974] RESPONSE ExecuteScript null</span><br><span class="line">[1643012438.437][INFO]: [d57c16acae2654b7717bc67f35b0e974] COMMAND Quit &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">[1643012438.488][INFO]: [d57c16acae2654b7717bc67f35b0e974] RESPONSE Quit</span><br><span class="line">[1643012438.488][DEBUG]: Log type &#x27;driver&#x27; lost 0 entries on destruction</span><br><span class="line">[1643012438.488][DEBUG]: Log type &#x27;browser&#x27; lost 35 entries on destruction</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2022/01/24 08:20:38 [Recovery] 2022/01/24 - 08:20:38 panic recovered:</span><br><span class="line">GET /api/convergence/grabreflow/TBCBB2039913 HTTP/1.1</span><br><span class="line">Host: 10.13.1.105:8080</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Dnt: 1</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:96.0) Gecko/20100101 Firefox/96.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">runtime error: invalid memory address or nil pointer dereference</span><br><span class="line">/usr/local/go/src/runtime/panic.go:212 (0x44b932)</span><br><span class="line">/usr/local/go/src/runtime/signal_unix.go:720 (0x44b7b2)</span><br><span class="line">/go/pkg/mod/github.com/ulahsieh/selenium@v0.9.10-0.20220105013444-c7d3f285d0e7/service.go:275 (0xb63969)</span><br><span class="line">/pkg/service/service.go:212 (0xb67b72)</span><br><span class="line">/go/pkg/mod/github.com/gin-gonic/gin@v1.7.7/context.go:168 (0xa6209a)</span><br><span class="line">/go/pkg/mod/github.com/gin-gonic/gin@v1.7.7/recovery.go:99 (0xa77088)</span><br><span class="line">/go/pkg/mod/github.com/gin-gonic/gin@v1.7.7/context.go:168 (0xa6209a)</span><br><span class="line">/go/pkg/mod/github.com/gin-gonic/gin@v1.7.7/gin.go:555 (0xa6d29d)</span><br><span class="line">/go/pkg/mod/github.com/gin-gonic/gin@v1.7.7/gin.go:511 (0xa6c9aa)</span><br><span class="line">/usr/local/go/src/net/http/server.go:2843 (0x7bdbc2)</span><br><span class="line">/usr/local/go/src/net/http/server.go:1925 (0x7b92cc)</span><br><span class="line">/usr/local/go/src/runtime/asm_amd64.s:1374 (0x46b3a0)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>而 service.go 在 212 行的程式如下</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">service.Stop()  <span class="comment">// selenium service</span></span><br></pre></td></tr></table></figure>
<p>推估是 selenium service timeout，但不知道為什麼爬蟲是在 timeout 前開始才動作的？無腦不想追究原因 XD</p>
<h3 id="solution-2">solution</h3>
<p>爬文之後發現在 chrome argument 加上參數 <code>--allowd-ips</code> 或是 <code>--verbose</code> 可以解決，兩個參數都個別測試過可行，可以隨意挑一個加即可。</p>
<h4 id="allowd-ips"><code>--allowd-ips</code></h4>
<p>加上該參數，錯誤訊息依舊會出現，但是能成功爬取</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Starting ChromeDriver 97.0.4692.99 (d740da257583289dbebd2eb37e8668928fac5ead-refs/branch-heads/4692@&#123;#1461&#125;) on port 9515</span><br><span class="line">Only local connections are allowed.</span><br><span class="line">Please see https://chromedriver.chromium.org/security-considerations for suggestions on keeping ChromeDriver safe.</span><br><span class="line">[1643014821.860][SEVERE]: bind() failed: Address not available (99)</span><br><span class="line">[1643014821.860][INFO]: listen on IPv6 failed with error ERR_ADDRESS_INVALID</span><br><span class="line">ChromeDriver was started successfully.</span><br></pre></td></tr></table></figure>
<h4 id="verbose"><code>--verbose</code></h4>
<p>加上該參數，錯誤訊息依舊會出現，但是能成功爬取</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Starting ChromeDriver 97.0.4692.99 (d740da257583289dbebd2eb37e8668928fac5ead-refs/branch-heads/4692@&#123;#1461&#125;) on port 9515</span><br><span class="line">Only local connections are allowed.</span><br><span class="line">Please see https://chromedriver.chromium.org/security-considerations for suggestions on keeping ChromeDriver safe.</span><br><span class="line">[1643015241.625][SEVERE]: bind() failed: Address not available (99)</span><br><span class="line">[1643015241.625][INFO]: listen on IPv6 failed with error ERR_ADDRESS_INVALID</span><br><span class="line">ChromeDriver was started successfully.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="3-網頁有中文字的地方變成亂碼">3. 網頁有中文字的地方變成亂碼</h2>
<p><img src="https://imgur.com/Kxe4bqI.png" alt=""><br>
上面的問題解決後成功爬取圖片，但又發現圖片中有中文的地方變成亂碼，原因是沒有安裝中文套件。</p>
<h3 id="solution-3">solution</h3>
<p>在 container 中安裝中文套件可解決，建議直接加在 Dockerfile 預設安裝</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apk add wqy-zenhei --update-cache --repository https://nl.alpinelinux.org/alpine/edge/testing</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/V4iwGil.png" alt=""></p>
<h1>Reference</h1>
<ul>
<li><a href="https://stackoverflow.com/questions/55844788/how-to-fix-severe-bind-failed-cannot-assign-requested-address-99-while">https://stackoverflow.com/questions/55844788/how-to-fix-severe-bind-failed-cannot-assign-requested-address-99-while</a></li>
<li><a href="https://www.jianshu.com/p/65cd4b138ee8">https://www.jianshu.com/p/65cd4b138ee8</a></li>
</ul>
]]></content>
      <categories>
        <category>DevOps</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Golang</tag>
        <tag>Selenium</tag>
      </tags>
  </entry>
  <entry>
    <title>[TCP/IP] 應用層 - HTTP</title>
    <url>/TCP-HTTP/</url>
    <content><![CDATA[<h3 id="HTTP">HTTP</h3>
<p>HyperText Transfer Protocol 超文本傳輸協定，是網頁的基礎通訊協定，基於 client-server 架構來 request-reponse，用來在 client 以及 server 間傳遞超媒體文件(如 HTML) 。</p>
<span id="more"></span>
<h4 id="運作模型">運作模型</h4>
<ol>
<li>client 傳 <strong>http request</strong> 到 server</li>
<li>server 回傳 <strong>http response</strong> (html)<br>
<img src="https://imgur.com/D8HQAS4.png" alt=""><br>
[1]</li>
</ol>
<ul>
<li>HTTP Client 實現程式有瀏覽器、命令列工具 … 等</li>
<li>HTTP Server 實現程式有 httpd、nginx、apache … 等</li>
<li>https 的 s 代表 secure，是一個比 http 更安全的連線方式</li>
</ul>
<h3 id="Http-Method">Http Method</h3>
<table>
<thead>
<tr>
<th>METHOD</th>
<th>安全性</th>
<th>動作</th>
<th>語意</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET</td>
<td>O</td>
<td>讀取</td>
<td>請求所需要的資源。</td>
</tr>
<tr>
<td>POST</td>
<td>O</td>
<td>新增</td>
<td>在請求中攜帶 request body，並執行特定資源的處理。</td>
</tr>
<tr>
<td>HEAD</td>
<td>X</td>
<td>讀取</td>
<td>server 僅回應狀態以及 header。</td>
</tr>
<tr>
<td>PUT</td>
<td>x</td>
<td>完整更新</td>
<td>請求更新一筆資源的所有內容，必須是存在的資源，資源傳遞必須完整，否則為空。</td>
</tr>
<tr>
<td>PATCH</td>
<td>X</td>
<td>部分更新</td>
<td>請求更新一筆資源的部分內容，必須是存在的資源。</td>
</tr>
<tr>
<td>DELETE</td>
<td>x</td>
<td>刪除</td>
<td>請求移除資源。</td>
</tr>
<tr>
<td>[2]</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="Http-狀態碼">Http 狀態碼</h3>
<p>狀態碼通常都以開頭的數字做區分，例如 2 開頭的狀態碼都是代表成功。</p>
<ul>
<li>1xx Informationa - 參考資訊</li>
<li>2xx Successful - 成功</li>
<li>3xx Redirection - 重新導向</li>
<li>4xx Client Error - 用戶端錯誤</li>
<li>5xx Server Error - 伺服器錯誤<br>
詳細代碼可參考 <a href="https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81">wiki</a>。</li>
</ul>
<h3 id="自己的-request-自己發-實作-http-client">自己的 request 自己發 - 實作 http client</h3>
<p>前面有提到實現 http client 有瀏覽器還有其他諸如 CLI、爬蟲 … 的程式。這邊我們來實作一個使用 <a href="https://www.npmjs.com/package/request">request</a> node module 的 http client。</p>
<ol>
<li><code>$ npm install request</code></li>
<li>在 index.js 檔案中貼上<br>
<img src="https://imgur.com/PTiqaMj.png" alt=""></li>
<li><code>$ node index.js</code>，就可以收到 server 的回覆<br>
<img src="https://imgur.com/6nI08to.png" alt=""></li>
</ol>
<h3 id="架一個簡易-http-server">架一個簡易 http server</h3>
<p>使用 Node.js 的內建模組 <code>http</code>，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> server = http.createServer(handelRequest)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handelRequest</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(req.url === <span class="string">&#x27;/&#x27;</span>)&#123;   <span class="comment">//根據 request 的資源</span></span><br><span class="line">        res.write(<span class="string">&#x27;welcome!&#x27;</span>) <span class="comment">//給 相對應的 response</span></span><br><span class="line">        res.end()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(req.url === <span class="string">&#x27;/hello&#x27;</span>) &#123;</span><br><span class="line">        res.write(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">        res.end()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(req.url === <span class="string">&#x27;/redirect&#x27;</span>) &#123;</span><br><span class="line">        res.writeHead(<span class="number">302</span>, &#123;  <span class="comment">//如果 url 是 /redirect 的話則轉址到 /hello</span></span><br><span class="line">            <span class="string">&#x27;Location&#x27;</span> : <span class="string">&#x27;/hello&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">        res.end()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    res.writeHead(<span class="number">404</span>) </span><br><span class="line">    res.end()</span><br><span class="line">&#125;</span><br><span class="line">server.listen(<span class="number">5000</span>) <span class="comment">//port</span></span><br></pre></td></tr></table></figure>
<p><code>$ node index.js</code> 執行後，開啟瀏覽器輸入 <code>127.0.0.1:5000</code>，便可以看到 response 的結果。<br>
<img src="https://imgur.com/Ps8Jvz5.png" alt=""></p>
<p>第 14 行，如果網址結尾是 /redirect 的話，轉到其他位址。<br>
<img src="https://imgur.com/AAFk2Yw.png" alt=""></p>
<p>第 21 行，代表如果帶錯誤的 url 的話，回復 404 status code。<br>
<img src="https://imgur.com/GlF8sd2.png" alt=""></p>
<h6 id="Reference">Reference</h6>
<p>[1]<a href="https://techthatmatter.com/best-fastest-bsnl-dns-servers/">https://techthatmatter.com/best-fastest-bsnl-dns-servers/</a><br>
[2]<a href="https://hackmd.io/@monkenWu/Sk9Q5VoV4/https%3A%2F%2Fhackmd.io%2F%40gen6UjQISdy0QDN62cYPYQ%2FH1yxwXyNN?type=book">https://hackmd.io/@monkenWu/Sk9Q5VoV4/https%3A%2F%2Fhackmd.io%2F%40gen6UjQISdy0QDN62cYPYQ%2FH1yxwXyNN?type=book</a></p>
]]></content>
      <categories>
        <category>程式初心者</category>
        <category>TCP/IP</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>[TCP/IP] 傳輸層 - TCP , UDP</title>
    <url>/TCP-UPD/</url>
    <content><![CDATA[<h2 id="傳輸層-Transport-Layer">傳輸層 Transport Layer</h2>
<h3 id="Port">Port</h3>
<p>連接埠/端口。有了網際網路層的 IP 位址之後，就可以把檔案傳輸到目標電腦上，但是一台電腦上可能有許多不同的應用程式，沒辦法知道這個檔案要由電腦上的哪一個應用程式處理，因此出現了 port。使用 port 就可以區別這些服務，如果有服務的程式在監聽這個埠號的話，就會收到 request。</p>
<span id="more"></span>
<p>常用的 port 有： http 80, https 443, ftp 21。</p>
<h3 id="TCP">TCP</h3>
<p>Transmission Control Protocol 傳輸控制協定，TCP 為<strong>可靠</strong>的傳輸協定，通訊前須先建立「連線」，連線完成後進行「通訊」，通訊完畢後「中斷連線」，應用如 http, ftp。</p>
<p><img src="https://imgur.com/Lk5Jcq1.png" alt=""></p>
<h4 id="建立連線-三次交握">建立連線 - 三次交握</h4>
<ol>
<li>Client 傳送建立連線訊息給 Server，裡面有個包個數字 x (例如 1000)。</li>
<li>Server 收到後，將這個 x 記錄下來，然後回發個訊息 y (例如 8000) 以及ack(x+1)， x + 1 的目的是因為這樣才能證明是 Server是收到 Client 的訊息)</li>
<li>Client 收到後，也回應個 ack(y+1)（同理這樣才能證明是 Server 寫的）<br>
經過以上三次交握，連線建立。</li>
</ol>
<h4 id="傳送訊息">傳送訊息</h4>
<ol>
<li>Client 發送資料長度為 20 byte 的資料給 Server</li>
<li>Server 收到後回 ack 為 x + 20 的訊息給 Client</li>
<li>Client 再次發送資料長度為 20 byte 的資料給 Server</li>
<li>過一段時間 timeout 後，Client 再發送一次</li>
<li>Server 收到後回 ack 為 x + 20 的訊息給 Client</li>
</ol>
<h4 id="結束連線-四次揮手">結束連線 - 四次揮手</h4>
<ol>
<li>Client 發送一個斷線訊息Finish &amp; x 給 Server</li>
<li>Server 收到後回發 x + 1 訊息給 Client</li>
<li>接下來 Server 接續發送一個斷線訊息 Finish &amp; y 給 A</li>
<li>Client 收到後再回發一個 y + 1 訊息給 Server (Server 就正式斷線)</li>
<li>Client 正式斷線，資源釋放</li>
</ol>
<h3 id="UDP">UDP</h3>
<p>User Datagram Protocol，使用者資料元協定，UDP 為<strong>不可靠</strong>的傳輸協定，使用在要求速度的應用上，不在乎是否送達，實例如視訊，掉了一兩個畫面不影響功能。</p>
<h6 id="Reference">Reference</h6>
<ul>
<li><a href="https://ithelp.ithome.com.tw/articles/10205476">https://ithelp.ithome.com.tw/articles/10205476</a></li>
</ul>
]]></content>
      <categories>
        <category>程式初心者</category>
        <category>TCP/IP</category>
      </categories>
      <tags>
        <tag>TCP/IP</tag>
        <tag>TCP</tag>
        <tag>UDP</tag>
      </tags>
  </entry>
  <entry>
    <title>Terraform connection refused Error</title>
    <url>/Terraform-connection-refused-Error/</url>
    <content><![CDATA[<p>在 terrform apply 的時候一直卡在 <code>Error: Post &quot;http://localhost/api/v1/namespaces&quot;: dial tcp [::1]:80: connect: connection refused</code> 的錯誤</p>
<span id="more"></span>
<p><img src="https://imgur.com/vQer935.png" alt=""></p>
<p>看起來是沒有正確的抓到 Provider 裡面設的 kube config file</p>
<p>原本的腳本如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// main.tf</span><br><span class="line">provider &quot;helm&quot; &#123;</span><br><span class="line">  kubernetes &#123;</span><br><span class="line">    config_path = &quot;/root/.kube/config&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// kubernetes.tf</span><br><span class="line">provider &quot;kubernetes&quot; &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>修改腳本如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// main.tf</span><br><span class="line">provider &quot;kubernetes&quot; &#123;</span><br><span class="line">    host = &quot;https://10.1.5.140:8443&quot;</span><br><span class="line"></span><br><span class="line">    client_certificate     = file(&quot;~/.kube/client.pem&quot;)</span><br><span class="line">    client_key             = file(&quot;~/.kube/client-key.pem&quot;)</span><br><span class="line">    cluster_ca_certificate = file(&quot;~/.kube/ca.pem&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// kubernetes.tf</span><br><span class="line">// 只能有一個 provider，否則會有 Error: Duplicate provider configuration 的錯誤</span><br></pre></td></tr></table></figure>
<p>重新佈署後錯誤碼就莫名其妙變了:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master1 terraform]<span class="comment"># terraform apply</span></span><br><span class="line">helm_release.metrics-server[0]: Refreshing state... [id=metrics-server]</span><br><span class="line"></span><br><span class="line">Error: Kubernetes cluster unreachable: invalid configuration: no configuration has been provided, try setting KUBERNETES_MASTER environment variable</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/gNmDHIo.png" alt=""></p>
<p>照指示加上 環境變數</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> KUBE_CONFIG_PATH=/root/.kube/config</span><br></pre></td></tr></table></figure>
<p>就莫名其妙成功了 = =</p>
<h3 id="補充">補充:</h3>
<ul>
<li>k8s provider 說明<br>
<a href="https://registry.terraform.io/providers/hashicorp/kubernetes/latest/docs#credentials-config">https://registry.terraform.io/providers/hashicorp/kubernetes/latest/docs#credentials-config</a></li>
<li>k8s cluster ca<br>
<a href="https://blog.csdn.net/ll837448792/article/details/103658502">https://blog.csdn.net/ll837448792/article/details/103658502</a></li>
</ul>
<h4 id="配置-TLS-連接">配置 TLS 連接</h4>
<ol>
<li>查看 kubectl 配置文件，裡面記錄了三個證書和 API server 的地址：</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">[<span class="string">root@testm</span> <span class="string">~</span>]<span class="comment"># cat .kube/config</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">clusters:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">cluster:</span></span><br><span class="line">    <span class="attr">certificate-authority-data:</span> <span class="string">LS0tLS1CR......</span></span><br><span class="line">    <span class="attr">server:</span> <span class="string">https://10.1.5.145:8443</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes</span></span><br><span class="line"><span class="attr">contexts:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">context:</span></span><br><span class="line">    <span class="attr">cluster:</span> <span class="string">kubernetes</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">kubernetes-admin</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-admin@kubernetes</span></span><br><span class="line"><span class="attr">current-context:</span> <span class="string">kubernetes-admin@kubernetes</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Config</span></span><br><span class="line"><span class="attr">preferences:</span> &#123;&#125;</span><br><span class="line"><span class="attr">users:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">kubernetes-admin</span></span><br><span class="line">  <span class="attr">user:</span></span><br><span class="line">    <span class="attr">client-certificate-data:</span> <span class="string">LS0tLS1CR......</span></span><br><span class="line">    <span class="attr">client-key-data:</span> <span class="string">LS0tLS1CRUdJTiBSU0......</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>匯出金鑰及證書</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@testm .kube]<span class="comment"># export clientcert=$(grep client-cert ~/.kube/config | cut -d&quot; &quot; -f 6)</span></span><br><span class="line">[root@testm .kube]<span class="comment"># echo $clientcert</span></span><br><span class="line">LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0=......</span><br><span class="line">[root@testm .kube]<span class="comment"># export clientkey=$(grep client-key-data ~/.kube/config | cut -d&quot; &quot; -f 6)</span></span><br><span class="line">[root@testm .kube]<span class="comment"># echo $clientkey</span></span><br><span class="line">LS0tLS1CRUdJTiBSU0EgUFJJVkFURSB......</span><br><span class="line">[root@testm .kube]<span class="comment"># export ca=$(grep certificate-authority-data ~/.kube/config | cut -d&quot; &quot; -f 6)</span></span><br><span class="line">[root@testm .kube]<span class="comment"># echo $ca</span></span><br><span class="line">LS0tLS1CRUdJTiBDRVJUSUZJQ0FU......</span><br><span class="line">[root@testm .kube]<span class="comment"># echo $clientcert | base64 -d &gt; ./client.pem</span></span><br><span class="line">[root@testm .kube]<span class="comment"># echo $clientkey | base64 -d &gt; ./client-key.pem</span></span><br><span class="line">[root@testm .kube]<span class="comment"># echo $ca | base64 -d &gt; ./ca.pem</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>從配置文件中讀取server 地址：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@testm ~]<span class="comment"># kubectl config view | grep server</span></span><br><span class="line">    server: https://10.1.5.145:8443</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>使用 curl 和剛剛加密的密鑰文件來訪問 API server：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl --cert ./client.pem --key ./client-key.pem --cacert ./ca.pem https://10.1.5.145:8443/api/v1/pods</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;kind&quot;</span>: <span class="string">&quot;PodList&quot;</span>,</span><br><span class="line">  <span class="string">&quot;apiVersion&quot;</span>: <span class="string">&quot;v1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;metadata&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;resourceVersion&quot;</span>: <span class="string">&quot;387199&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;items&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;metadata&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;ingress-nginx-controller-5c5bf8c854-7pcf7&quot;</span>,</span><br><span class="line">        <span class="string">&quot;generateName&quot;</span>: <span class="string">&quot;ingress-nginx-controller-5c5bf8c854-&quot;</span>,</span><br><span class="line">        <span class="string">&quot;namespace&quot;</span>: <span class="string">&quot;ingress-nginx&quot;</span>,</span><br><span class="line">        <span class="string">&quot;uid&quot;</span>: <span class="string">&quot;f84b09e4-7d7d-40bf-ae66-f2eb72ab7a59&quot;</span>,</span><br><span class="line">        <span class="string">&quot;resourceVersion&quot;</span>: <span class="string">&quot;104900&quot;</span>,</span><br><span class="line">        <span class="string">&quot;creationTimestamp&quot;</span>: <span class="string">&quot;2022-02-09T05:42:28Z&quot;</span>,</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>DevOps</category>
        <category>Terraform</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>Terraform</tag>
      </tags>
  </entry>
  <entry>
    <title>Terraform 從 0.14 升級到 1.1.7 問題排查</title>
    <url>/Terraform-upgrade-to-1.1.7/</url>
    <content><![CDATA[<p>手上有 Terraform 0.14 版跑的腳本，最近發現 Terraform 已經升級到 1.1.7 了，便打算在升級的環境下，跑 0.14 版跑成功的腳本，看看是否有誤，紀錄一下遇到的問題以及解法。</p>
<span id="more"></span>
<h2 id="Terraform-安裝">Terraform 安裝</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils</span><br><span class="line">yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo</span><br><span class="line">yum -y install terraform</span><br><span class="line">terraform version</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/c2TMsrQ.png" alt=""></p>
<h2 id="問題">問題</h2>
<h3 id="Error-Kubernetes-cluster-unreachable-invalid-configuration-no-configuration-has-been-provided-try-setting-KUBERNETES-MASTER-environment-variable">Error: Kubernetes cluster unreachable: invalid configuration: no configuration has been provided, try setting KUBERNETES_MASTER environment variable</h3>
<p><img src="https://imgur.com/WdJIg75.png" alt=""><br>
加上 <code>KUBE_CONFIG_PATH</code>  變數解決。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export KUBE_CONFIG_PATH=$HOME/.kube/config</span><br></pre></td></tr></table></figure>
<h3 id="Error-failed-to-download-“xxxx”">Error: failed to download “xxxx”</h3>
<p><img src="https://imgur.com/NC8nl7w.png" alt=""><br>
安裝 helm 並加入相對應的 repo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[ -f /usr/<span class="built_in">local</span>/bin/helm ] || (<span class="built_in">cd</span> /tmp &amp;&amp; curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 &amp;&amp; chmod 755 get_helm.sh &amp;&amp; /tmp/get_helm.sh)</span><br><span class="line">helm repo add stable https://charts.helm.sh/stable</span><br><span class="line">helm repo add prometheus-community https://prometheus-community.github.io/helm-charts</span><br><span class="line">helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx</span><br><span class="line">helm repo add nfs-subdir-external-provisioner https://kubernetes-sigs.github.io/nfs-subdir-external-provisioner/</span><br><span class="line">helm repo update</span><br></pre></td></tr></table></figure>
<h3 id="Error-Failed-to-create-Ingress-‘xxxingress’-because-the-server-could-not-find-the-requested-resource-post-ingresses-extensions">Error: Failed to create Ingress ‘xxxingress’ because: the server could not find the requested resource (post ingresses.extensions)</h3>
<p><img src="https://imgur.com/slalKPW.png" alt=""><br>
將原先的 <code>kubernetes_ingress</code> provider 改成 <code>kubernetes_ingress_v1</code>，另外 service name &amp; port 的參數格式有變，請參考<a href="https://registry.terraform.io/providers/hashicorp/kubernetes/latest/docs/resources/ingress_v1">官網</a>。</p>
<h3 id="Warning-Helm-release-“xxx”-was-created-but-has-a-failed-status-Use-the-helm-command-to-investigate-the-error-correct-it-then-run-Terraform-again">Warning: Helm release “xxx” was created but has a failed status. Use the <code>helm</code> command to investigate the error, correct it, then run Terraform again.</h3>
<p>基本上 terraform 安裝沒什麼問題，直接下 kubectl get pod 在相對應的 namespace 查看出問題的 pod 是哪些，並進一步 debug。</p>
]]></content>
      <categories>
        <category>DevOps</category>
        <category>Terraform</category>
      </categories>
      <tags>
        <tag>Terraform</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 20.04 安裝本地 deb 包</title>
    <url>/Ubuntu-20-04-install-local-deb/</url>
    <content><![CDATA[<p>apt 是 ubuntu 最常用的包命令，用於從 Ubuntu 存儲庫、PPA 和第三方 apt 存儲庫安裝、刪除和管理 package。從 Ubuntu 20.04 開始，apt 命令支持對本地 deb 文件的安裝。</p>
<span id="more"></span>
<h3 id="dpkg">dpkg</h3>
<p>在以前都是使用 <code>dpkg -i</code> 來安裝本地 deb。但是 dpkg 不會自動安裝依賴包，因此安裝很容易出現依賴相關的錯誤。之後需要通過運行 <code>sudo apt-get install -f</code> 來安裝依賴。</p>
<h3 id="apt-apt-get">apt/apt-get</h3>
<p>直接通過 apt/apt-get 來安裝本地 deb 包，只需要為 apt/apt-get 指定 deb 包的相對路徑或絕對路徑就行了，不能直接在 apt 命令後指定 deb 包的名字，必須要指定路徑，否則 apt 命令會嘗試從遠程倉庫中搜索 deb 包同名的 package，從而導致安裝失敗。如下範例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install ./PACKAGE_NAME.deb</span><br><span class="line">sudo apt install /home/ula/PACKAGE_NAME.deb</span><br></pre></td></tr></table></figure>
<h3 id="Reference">Reference</h3>
<ul>
<li><a href="https://ubuntuhandbook.org/index.php/2021/04/install-deb-file-ubuntu-4-ways/">https://ubuntuhandbook.org/index.php/2021/04/install-deb-file-ubuntu-4-ways/</a></li>
</ul>
]]></content>
      <categories>
        <category>OS</category>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>[Ubuntu] Create Application&#39;s Shortcut on Desktop</title>
    <url>/Ubuntu-Create-Applications-Shortcut-on-Desktop/</url>
    <content><![CDATA[<p>Follow the steps to create the app’s shortcut on desktop in Ubuntu.</p>
<span id="more"></span>
<ol>
<li>Find the target application’s .desktop file<br>
<img src="https://imgur.com/c7LJ8gF.png" alt=""><br>
The file usually can be found in the following path:
<ul>
<li>/usr/share/applications/</li>
<li>/var/lib/snapd/desktop/applications</li>
</ul>
</li>
<li>Copy the specific .desktop file to ~/Desktop</li>
<li>Go the Desktop and right-click the copied .desktop file</li>
<li>Enable the “Allow Launching” option<br>
<img src="https://imgur.com/txajNzJ.png" alt=""></li>
<li>Done<br>
<img src="https://imgur.com/QWBlEeq.png" alt=""></li>
</ol>
]]></content>
      <categories>
        <category>OS</category>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode 免密碼 SSH 到遠端機器</title>
    <url>/VSCode-ssh-remote-without-password/</url>
    <content><![CDATA[<h2 id="VS-Code-安裝插件">VS Code 安裝插件</h2>
<span id="more"></span>
<p><img src="https://imgur.com/DpEan3E.png" alt=""><br>
安裝完成後我們就可以看到在左側新增了一個新的Remote欄位<br>
<img src="https://imgur.com/ToGz1Ho.png" alt=""><br>
到 <code>Settings &gt; Extensions &gt;Remote - SSH</code> 中將 <code>Remote.SSH: Show Login Terminal</code> 勾選<br>
<img src="https://imgur.com/Ox8ScCa.png" alt=""></p>
<h2 id="Windows-設定安裝-OpenSSH">Windows 設定安裝 OpenSSH</h2>
<p>使用 Windows Server 2019 和 Windows 10 裝置上的 Windows 設定，安裝 OpenSSH 元件。</p>
<p>若要安裝 OpenSSH 元件：</p>
<ol>
<li>開啟 <strong>設定</strong>，選取 [應用程式] <strong>&gt; 應用程式 &amp; 功能</strong>，然後選取 [<strong>選用功能</strong>]。</li>
<li>掃描清單，查看是否已安裝 OpenSSH。 如果沒有，請在頁面頂端選取 [ <strong>新增功能</strong>]，然後：
<ul>
<li>尋找 <strong>OpenSSH 用戶端</strong>，然後按一下 [<strong>安裝</strong>]。</li>
<li>尋找 <strong>OpenSSH 伺服器</strong>，然後按一下 [<strong>安裝</strong>]。</li>
</ul>
</li>
</ol>
<p>安裝程式完成後，請返回 <strong>應用程式 &gt; 應用程式 &amp; 功能</strong> 和 <strong>選用功能</strong> ，應該會看到已列出 OpenSSH。</p>
<h2 id="SSH-Key-設定">SSH  Key 設定</h2>
<p>Remote-SSH extension 提供我們使用 ssh key 的方式進行連接，可以不用輸密碼更方便的連接。方式是將本地端的公鑰（id_rsa.pub）存到遠端的 <code>authorized_keys</code> 檔案中，然後在本地端的 config 檔中設定連線資訊。</p>
<ol>
<li>在本地機器上使用 <code>ssh-keygen</code> 產生 key pair</li>
<li>將本地公開金鑰加入到遠端機器上的 <code>authorized_keys</code> 檔案中，若遠端機器無該檔案，則 <code>touch ~/.ssh/authorized_keys</code>，並修改權限 <code>chmod 644 ~/.ssh/authorized_keys</code>，最後將本地端的 id_rsa.pub 內容複製到檔案中。</li>
<li>修改本地端機器的家目錄下的 .ssh 中的 <code>C:\Users\%USER%\.ssh\config</code> 檔 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host remoteLinux              #填寫別名例如 LabSever</span><br><span class="line">HostName 10.1.5.130           #主機名稱或是ip位置</span><br><span class="line">User root                     #登入的使用者名稱</span><br><span class="line">IdentityFile ~/.ssh/id_rsa    #指定連線的私鑰</span><br></pre></td></tr></table></figure>
</li>
<li>測試是否可 ssh 登入，開啟 CMD 執行指令 <code>ssh 登入帳戶@ServerIP</code>，即可免密碼直接登入 Linux Server，如果金鑰名稱不為預設 id_rsa，則使用 <code>-i</code> 參數指定金鑰 <code>ssh 登入帳戶@ServerIP -i C:\Users\%USER%\.ssh\mykey</code>。</li>
</ol>
<h2 id="SSH-Key-原理">SSH Key 原理</h2>
<p>透過<a href="https://zh.wikipedia.org/wiki/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86">公開金鑰加密</a> (Public-key cryptography) 或稱「非對稱金鑰加密」的兩把加解密鑰匙 Public Key (公鑰) 和 Private Key (私鑰)，取代 Client 使用 <a href="https://zh.wikipedia.org/wiki/Secure_Shell">SSH</a> (Secure Shell，安全殼協議) 協定連結 Server 登入時必須輸入驗證密碼的動作：</p>
<ol>
<li>Public Key：流通於公開網路上，在各伺服器上公鑰集中保存的檔案為 <code>authorized_keys</code>，必須依據 /etc/ssh/sshd_config 內的 AuthorizedKeysFile 定義來設定。</li>
<li>Private Key：存放於各伺服器的本地端，用來解密公開給不同來源端的 Public Key，不可外流。</li>
</ol>
<h2 id="權限">權限</h2>
<p>雖然 ssh-keygen 預設的權限就都是正確的了，但還是有必要了解一些規則，因為只要一個設定有誤，就可能會被判定為危險，而造成 Public Key 和 Private Key 無法順利比對：</p>
<table>
<thead>
<tr>
<th>目錄或檔案</th>
<th>許可權</th>
</tr>
</thead>
<tbody>
<tr>
<td>~/.ssh/</td>
<td>700 (drwx------)</td>
</tr>
<tr>
<td>~/.ssh/id_rsa (Private Key)</td>
<td>600 (-rw-------)</td>
</tr>
<tr>
<td>~/.ssh/authorized_keys &amp; ~/.ssh/id_rsa.pub (Public Key)</td>
<td>600 (-rw-------)。預設為 600，可以將許可權變更為 640 或 644，使公開金鑰變成可讀取。</td>
</tr>
</tbody>
</table>
<p>Reference</p>
<ul>
<li><a href="https://hackmd.io/@brick9450/vscode-remote">https://hackmd.io/@brick9450/vscode-remote</a></li>
<li><a href="https://www.footmark.info/linux/centos/windows-ssh-nopassword-linux/">https://www.footmark.info/linux/centos/windows-ssh-nopassword-linux/</a></li>
</ul>
]]></content>
      <categories>
        <category>程式初心者</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>Vagrant on Ubuntu</title>
    <url>/Vagrant-on-Ubuntu/</url>
    <content><![CDATA[<p>Vagrant 是由 HashiCorp 開源、使用 Ruby 開發的虛擬機器管理工具，用於管理如 VirtualBox、VMware、AWS 等 VM，主要好處是可以提供一個可配置、可移植和復用的虛擬機環境，可快速地使用設定檔 (Vagrantfile) 和 command line 自動化安裝、配置一台 VM，降低了開發者搭建環境的時間。</p>
<span id="more"></span>
<h3 id="Prerequisite">Prerequisite</h3>
<ul>
<li>Download Provider<br>
Vagrant 的術語中，底層的虛擬機器軟體叫作 provider，預設 provider 是 VirtualBox，其他支援的 provider 可參考<a href="https://www.vagrantup.com/docs/providers">官網</a>。本文使用官方推薦的 Virtualbox，依據<a href="https://www.virtualbox.org/wiki/Downloads">官網下載步驟安裝</a>。</li>
<li><a href="https://www.vagrantup.com/downloads">Download Vagrant</a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vagrant version</span><br><span class="line">Installed Version: 2.2.19</span><br><span class="line">Latest Version: 2.2.19</span><br><span class="line"> </span><br><span class="line">You<span class="string">&#x27;re running an up-to-date version of Vagrant!</span></span><br></pre></td></tr></table></figure>
<h3 id="Before-We-Start-Vagrant-Basic">Before We Start - Vagrant Basic</h3>
<p>Vagrant 提供一個命令行工具 <code>vagrant</code>，可以直接操作虛擬機。</p>
<ul>
<li>Box：Vagrant 的虛擬機鏡像，可以透過在公開的 <a href="https://app.vagrantup.com/boxes/search">Vagrant Box Catalog</a> 上搜尋適合的 box 使用。</li>
<li>Provisioning：虛擬機實例啟動後的初始化</li>
</ul>
<p>Vagrant 的工作流程大致如下：</p>
<ul>
<li>編寫設定檔 (Vagrantfile)</li>
<li>根據設定檔下載引入 Vagrant box 檔案。</li>
<li>Vagarnt 根據設定檔配置，開通並執行虛擬機器，讓它成為運行狀態。</li>
</ul>
<h3 id="建立-Vagrant-虛擬機">建立 Vagrant 虛擬機</h3>
<h4 id="初始化">初始化</h4>
<p>在公開的 box catalog 選定好想要的 box 後，透過 <code>vagrant init</code> 初始化，會在目錄下產生一個 Vagrantfile 檔案，建議創建一個專屬存放當下環境要用的目錄，vagrant 指令都在 Vagrantfile 所在的目錄執行，免得 Vagrant 搞錯成別台機器。</p>
<ul>
<li>直接在 init 指定</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vagrant init generic/centos7</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/Dgabn4i.png" alt=""></p>
<ul>
<li>透過 Vagrantfile 指定<br>
若不加 box 名稱，可直接下 <code>vagrant init</code>，再去修改 Vagrantfile 中的相關參數。<br>
<img src="https://imgur.com/aqfMYZp.png" alt=""><br>
<img src="https://imgur.com/Ox8nOm3.png" alt=""></li>
</ul>
<h4 id="啟動">啟動</h4>
<p>啟動虛擬機，第一次啟動須下載整份 box 的檔案，故可能會花幾分鐘的時間來啟動。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vagrant up</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/17sva0x.png" alt=""><br>
確認當前 Vagrant 主機的運作狀況</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vagrant status</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/BStuf6X.png" alt=""><br>
在啟動完成後，透過 SSH 來登入該虛擬機。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vagrant ssh</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/F6k1taT.png" alt=""><br>
打開 Virtualbox 可以看到 VM 透過 command line 迅速的建立完成了，而不用透過原始的方式從 iso 開始從頭安裝。<br>
<img src="https://imgur.com/lhECdc7.png" alt=""></p>
<h3 id="其他-vagrant-虛擬機的操作">其他 vagrant 虛擬機的操作</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 將虛擬機關機，會先嘗試優雅關機 (gracefully shutdown)，若失敗了或者指令有加上 -f 旗標，就會直接將虛擬機電源關閉。</span></span><br><span class="line">vagrant halt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新開機，當用於修改 Vagrantfile 後，使之生效。</span></span><br><span class="line">vagrant reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 徹底移除虛擬機器</span></span><br><span class="line">vagrant destroy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暫停機器，會保留暫停時的狀態，可在下次重新快速啟動，但會需要額外的空間來放記錄檔，且會佔用 RAM</span></span><br><span class="line">vagrant <span class="built_in">suspend</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢復機器</span></span><br><span class="line">vagrant resume</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把當前的運行的虛擬機環境進行打包為 box 文件</span></span><br><span class="line">vagrant package</span><br></pre></td></tr></table></figure>
<h3 id="vagrant-box-操作">vagrant box 操作</h3>
<p>可用來管理 box，有以下指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 手動下載至本機</span></span><br><span class="line">vagrant box add &lt;box_name&gt; &lt;box_url&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出本機已下載的 box</span></span><br><span class="line">vagrant box list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 刪除指定 box</span></span><br><span class="line">vagrant box remove &lt;box_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 檢查 box 是否有新的版本</span></span><br><span class="line">vagrant box outdated --box &lt;box_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升級 box</span></span><br><span class="line">vagrant box update --box &lt;box_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除舊版 box</span></span><br><span class="line">vagrant box prune --box &lt;box_name&gt;</span><br></pre></td></tr></table></figure>
<h3 id="Vagrantfile-配置檔說明">Vagrantfile 配置檔說明</h3>
<p>Vagrantfile 就是每一台的虛擬機的規格表，使用 ruby 語法撰寫，看起來很長，但其實幾乎都是註解說明。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- mode: ruby -*-</span></span><br><span class="line"><span class="comment"># vi: set ft=ruby :</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># All Vagrant configuration is done below. The &quot;2&quot; in Vagrant.configure</span></span><br><span class="line"><span class="comment"># configures the configuration version (we support older styles for</span></span><br><span class="line"><span class="comment"># backwards compatibility). Please don&#x27;t change it unless you know what</span></span><br><span class="line"><span class="comment"># you&#x27;re doing.</span></span><br><span class="line">Vagrant.configure(<span class="string">&quot;2&quot;</span>) <span class="keyword">do</span> <span class="params">|config|</span></span><br><span class="line">  <span class="comment"># The most common configuration options are documented and commented below.</span></span><br><span class="line">  <span class="comment"># For a complete reference, please see the online documentation at</span></span><br><span class="line">  <span class="comment"># https://docs.vagrantup.com.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Every Vagrant development environment requires a box. You can search for</span></span><br><span class="line">  <span class="comment"># boxes at https://vagrantcloud.com/search.</span></span><br><span class="line">  config.vm.box = <span class="string">&quot;generic/centos7&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Disable automatic box update checking. If you disable this, then</span></span><br><span class="line">  <span class="comment"># boxes will only be checked for updates when the user runs</span></span><br><span class="line">  <span class="comment"># `vagrant box outdated`. This is not recommended.</span></span><br><span class="line">  <span class="comment"># config.vm.box_check_update = false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Create a forwarded port mapping which allows access to a specific port</span></span><br><span class="line">  <span class="comment"># within the machine from a port on the host machine. In the example below,</span></span><br><span class="line">  <span class="comment"># accessing &quot;localhost:8080&quot; will access port 80 on the guest machine.</span></span><br><span class="line">  <span class="comment"># <span class="doctag">NOTE:</span> This will enable public access to the opened port</span></span><br><span class="line">  <span class="comment"># config.vm.network &quot;forwarded_port&quot;, guest: 80, host: 8080</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Create a forwarded port mapping which allows access to a specific port</span></span><br><span class="line">  <span class="comment"># within the machine from a port on the host machine and only allow access</span></span><br><span class="line">  <span class="comment"># via 127.0.0.1 to disable public access</span></span><br><span class="line">  <span class="comment"># config.vm.network &quot;forwarded_port&quot;, guest: 80, host: 8080, host_ip: &quot;127.0.0.1&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Create a private network, which allows host-only access to the machine</span></span><br><span class="line">  <span class="comment"># using a specific IP.</span></span><br><span class="line">  <span class="comment"># config.vm.network &quot;private_network&quot;, ip: &quot;192.168.33.10&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Create a public network, which generally matched to bridged network.</span></span><br><span class="line">  <span class="comment"># Bridged networks make the machine appear as another physical device on</span></span><br><span class="line">  <span class="comment"># your network.</span></span><br><span class="line">  <span class="comment"># config.vm.network &quot;public_network&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Share an additional folder to the guest VM. The first argument is</span></span><br><span class="line">  <span class="comment"># the path on the host to the actual folder. The second argument is</span></span><br><span class="line">  <span class="comment"># the path on the guest to mount the folder. And the optional third</span></span><br><span class="line">  <span class="comment"># argument is a set of non-required options.</span></span><br><span class="line">  <span class="comment"># config.vm.synced_folder &quot;../data&quot;, &quot;/vagrant_data&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="基本設置">基本設置</h3>
<ul>
<li>config.vm.box：指定連接的 box 名稱</li>
<li>config.vm.hostname：指定主機名稱</li>
<li>config.vm.define：命名虛擬機，若沒指定則預設為 default</li>
</ul>
<h4 id="網路配置">網路配置</h4>
<p>有幾種不同的配置</p>
<ul>
<li>公有網絡（bridge)<br>
虛擬機和宿主機相當於局域網中獨立的主機，設置靜態IP：</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">config.vm.network <span class="string">&quot;public_network&quot;</span>, <span class="symbol">ip:</span> <span class="string">&quot;192.168.1.120&quot;</span></span><br></pre></td></tr></table></figure>
<p>如果使用 public_network 而不配置 IP，那麼會 DHCP 自動獲取 IP 地址。</p>
<ul>
<li>私有網絡（host-only)<br>
只有宿主機能訪問虛擬機，多個虛擬機在同一個網段，相互可以訪問：</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">config.vm.network <span class="string">&quot;private_network&quot;</span>, <span class="symbol">ip:</span> <span class="string">&quot;192.168.21.4&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>端口映射<br>
將宿主機端口映射到虛擬機端口，例如宿主機 8080 端口映射到虛擬機 80 端口：</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">config.vm.network <span class="string">&quot;forwarded_port&quot;</span>, <span class="symbol">guest:</span> <span class="number">80</span>, <span class="symbol">host:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure>
<h4 id="共享目錄-Synced-Folders">共享目錄 Synced Folders</h4>
<p>vagrant 啟動時會預設將 Vagrantfile 位置掛載到虛擬機中的 <code>/vagrant</code>，如果要掛載其他目錄的話使用：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">config.vm.synced_folder <span class="string">&quot;src/&quot;</span>, <span class="string">&quot;/srv/website&quot;</span></span><br></pre></td></tr></table></figure>
<p>將本機的 src/ 目錄(相對路徑)掛載到虛擬機內的 /srv/website 中。</p>
<h4 id="Provisioning">Provisioning</h4>
<p>如果要一次執行多的相同環境的 VM，配置所需要的環境每次都要 ssh 個別進去裝太慢了，Vagrant 可以利用先寫好的自動安裝環境腳本來達到自動化配置。支持Shell，Puppet，Chef，Ansible 等等：</p>
<ul>
<li>shell</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">config.vm.provision <span class="string">&quot;shell&quot;</span>, <span class="symbol">run:</span> <span class="string">&quot;always&quot;</span>, <span class="symbol">inline:</span> <span class="string">&lt;&lt;-SHELL</span></span><br><span class="line"><span class="string">    sudo yum install -y net-tools</span></span><br><span class="line"><span class="string">SHELL</span></span><br></pre></td></tr></table></figure>
<p>run: “always” 表示每次 vagrant up 的時候，都執行 Provision。</p>
<ul>
<li>使用外部 shell script 腳本</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">config.vm.provision <span class="string">&quot;shell&quot;</span>, <span class="symbol">path:</span> <span class="string">&quot;script.sh</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Ansible</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">config.vm.provision <span class="string">&quot;ansible&quot;</span> <span class="keyword">do</span> <span class="params">|ansible|</span></span><br><span class="line">  ansible.playbook = <span class="string">&quot;playbook.yml&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<ul>
<li>使用虛擬機內部的Ansible：</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Vagrant.configure(<span class="string">&quot;2&quot;</span>) <span class="keyword">do</span> <span class="params">|config|</span></span><br><span class="line">  <span class="comment"># Run Ansible from the Vagrant VM</span></span><br><span class="line">  config.vm.provision <span class="string">&quot;ansible_local&quot;</span> <span class="keyword">do</span> <span class="params">|ansible|</span></span><br><span class="line">    ansible.playbook = <span class="string">&quot;playbook.yml&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>並非每次 vagrant up 的時候，都會執行 Provision。只有在下面 3 種情況下 Provision 才會執行：</p>
<ul>
<li>首次執行 vagrant up</li>
<li>執行 vagrant provision</li>
<li>執行 vagrant reload --provision</li>
</ul>
<h4 id="Provider">Provider</h4>
<p>可以另外自己設置 provider 的參數，以 virtualbox 為例，VirtualBox 提供了 VBoxManage 這個命令列工具，可以讓我們設定 VM，用 modifyvm 這個命令讓我們可以設定 VM 的名稱和記憶體大小等等，詳細可以設定的參數可以參考 <a href="https://www.virtualbox.org/manual/ch08.html#vboxmanage-modifyvm">virtualbox 官網的介紹</a>。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Vagrant.configure(<span class="string">&quot;2&quot;</span>) <span class="keyword">do</span> <span class="params">|config|</span></span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line">  config.vm.provider <span class="string">&quot;virtualbox&quot;</span> <span class="keyword">do</span> <span class="params">|vb|</span></span><br><span class="line">    <span class="comment"># 設定 CPU 使用率最多只能是本機的 50%</span></span><br><span class="line">    vb.customize [<span class="string">&quot;modifyvm&quot;</span>, <span class="symbol">:id</span>, <span class="string">&quot;--cpuexecutioncap&quot;</span>, <span class="string">&quot;50&quot;</span>]</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>DevOps</category>
        <category>Vagrant</category>
      </categories>
      <tags>
        <tag>Vagrant</tag>
      </tags>
  </entry>
  <entry>
    <title>[Vue] 安裝及基本組成簡介</title>
    <url>/Vue-%E5%AE%89%E8%A3%9D%E5%8F%8A%E7%B5%84%E6%88%90%E7%B0%A1%E4%BB%8B/</url>
    <content><![CDATA[<h3 id="install-nodejs-and-npm">install nodejs and npm</h3>
<p>安裝最新版 Nodejs 以及 npm</p>
<span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo apt update</span><br><span class="line">$ sudo apt install -y nodejs</span><br><span class="line">$ sudo apt install -y npm</span><br><span class="line">$ sudo npm install npm@latest -g</span><br><span class="line">$ sudo npm cache clean -f</span><br><span class="line">$ sudo npm install n -g</span><br><span class="line">$ sudo n latest stable</span><br><span class="line">$ sudo npm -v</span><br><span class="line">$ sudo node -v</span><br></pre></td></tr></table></figure>
<h3 id="install-vue">install vue</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo npm install -g @vue/cli</span><br><span class="line">$ sudo chown -R 1000:1000 &quot;/home/user/.npm&quot;</span><br><span class="line"># let npm install without sudo</span><br><span class="line">$ sudo chown -R $USER:$(id -gn $USER) /home/user/.config</span><br><span class="line"># npm update check without sudo</span><br></pre></td></tr></table></figure>
<h3 id="new-a-vue-project">new a vue project</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vue create . # 在當前目錄下建立</span><br><span class="line"># OR</span><br><span class="line">$ vue create myproject # 或是指定新的資料夾</span><br></pre></td></tr></table></figure>
<p>選擇要預安裝的套件。可以先選預設，後續還想新增其他的工具，可以再使用 npm 或是 yarn 安裝即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ue CLI v4.5.6</span><br><span class="line">? Please pick a preset: (Use arrow keys)</span><br><span class="line">❯ Default ([Vue 2] babel, eslint)</span><br><span class="line">  Default (Vue 3 Preview) ([Vue 3] babel, eslint)</span><br><span class="line">  Manually select features</span><br></pre></td></tr></table></figure>
<p>按下 Enter 之後就會開始專案建立，接著等它完成。<br>
<img src="https://imgur.com/h7SoLPG.png" alt=""></p>
<p>可以看到最下方提示，進入專案目錄後下 <code>npm run serve</code> 的命令就可以開始開發。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">🎉  Successfully created project myproject.</span><br><span class="line">👉  Get started with the following commands:</span><br><span class="line"></span><br><span class="line"> $ cd myproject</span><br><span class="line"> $ npm run serve</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="npm-run-serve">npm run serve</h3>
<p><img src="https://imgur.com/CYuCJvb.png" alt=""></p>
<p>完成後，就可以用瀏覽器來打開，看到預設專案的畫面了。</p>
<h3 id="project’s-composition">project’s composition</h3>
<p><img src="https://imgur.com/HB0ZoR1.png" alt=""></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">myproject/</span><br><span class="line">├── babel.config.js     # Babel 的配置文件</span><br><span class="line">├── package.json        # 專案所用到的套件列表</span><br><span class="line">├── package-lock.json   # 紀錄套件具體的版本號</span><br><span class="line">├── node_modules        # npm 套件存放位置</span><br><span class="line">├── public              # 公開(靜態)文件目錄，在打包過程中除了 html 模板檔案，其他資源會直接複製到 dist 資料夾下，而不需要編譯和壓縮。</span><br><span class="line">│   ├── favicon.ico</span><br><span class="line">│   └── index.html      # 首頁的 HTML 檔，裡面不會有主要內容，可編輯網頁所需的 meta tag 或是引入外部的 css 或 js</span><br><span class="line">├── README.md</span><br><span class="line">└── src                 # 開發目錄</span><br><span class="line">    ├── App.vue         # 頁面入口，綁定在 index.html 中的 &lt;div id =&quot;app&quot;&gt;&lt;/div&gt; ，要使用的 component 皆會掛在 App.vue 底下</span><br><span class="line">    ├── assets          # 資源，如 css、image</span><br><span class="line">    │   └── logo.png    </span><br><span class="line">    ├── components      # 不同的內容或功能分成的一個個元件，可以被互相引用</span><br><span class="line">    │   └── HelloWorld.vue</span><br><span class="line">    └── main.js         # 專案入口，影響全局，作用是引入全局使用的模組、全局的樣式和方法、設置路由等。</span><br></pre></td></tr></table></figure>
<h4 id="main-js">main.js</h4>
<p>為 vue 程式的進入點，用於初始化 vue instance 並載入各種公共元件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 載入所需套件、專案檔案等...</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 關閉 production 提示功能</span></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化應用程序，創建 vue instance，使用 render 函式將 App.vue component 渲染出來，然後將程序掛載在 DOM 上面，html 中 id 為 app 的元素</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>render: h =&gt; h(App) 的最原始寫法如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">render: function(createElement)&#123;</span><br><span class="line">    return createElement(App);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根據 ES6 語法可在簡寫成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">render(createElement)&#123;</span><br><span class="line">    return createElement(App);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最後再用箭頭表示法縮減成 <code>render: h =&gt; h(App)</code>。<br>
其中把 createElement 由 h 取代，createElement 函數是用來生成 HTML DOM 元素的。h 指 hyperscript，是 HTML 的一部分，表示的是超文本標記語言，為了方便而直接使用縮寫 h。</p>
<h4 id="App-vue">App.vue</h4>
<p>App.vue 為頁面的入口，所有頁面都是在這裡進行切換的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- 模板標籤 --&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;img alt=&quot;Vue logo&quot; src=&quot;./assets/logo.png&quot;&gt;</span><br><span class="line">    &lt;HelloWorld msg=&quot;Welcome to Your Vue.js App&quot;/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">&lt;!-- component 的邏輯 --&gt;</span><br><span class="line">import HelloWorld from &#x27;./components/HelloWorld.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    HelloWorld</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;!-- component 的 css 樣式 --&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: Avenir, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<h3 id="vue-檔結構">vue 檔結構</h3>
<p><code>*.vue</code> 檔案，是一個自定義的檔案型別，每個 .vue 檔案包含三種型別的語言塊 <code>&lt;template&gt;</code>、<code>&lt;script&gt;</code> 和 <code>&lt;style&gt;</code>，分別代表了 html、js、css。<br>
其中 <code>&lt;template&gt;</code> 和 <code>&lt;style&gt;</code> 是支援用預編譯語言來寫的，例如　<code>&lt;style lang=&quot;scss&quot;&gt;</code>，如果沒特別指定的話，就是使用原生寫法。</p>
<h4 id="template">&lt;template&gt;</h4>
<p>代表 html 結構，每個 .vue 文件最多包含<strong>一個</strong> <code>&lt;template&gt;</code> 模塊，必須在裡面放一個 html 標籤來包裹所有的程式碼，如 <code>&lt;div&gt;</code>。除了一般的 html 語法外，還可以使用 Vue 指令來操作、修改或是裝飾 DOM 元件。<br>
基本語法有：</p>
<ul>
<li><code>v-bind:class=&quot;xxx&quot;</code> 動態綁定 class</li>
<li><code>v-bind:style=&quot;ooo&quot;</code> 動態綁定 style</li>
<li><code>@event</code> 綁定事件，例如 <code>@click</code> 表示綁定一個 Click 事件。</li>
<li><code>&#123;&#123; variable &#125;&#125;</code> 顯示某一個變數資料、數字或是文字。</li>
<li><code>&lt;my-component&gt;</code> 使用自定義的元件，例如 <code>&lt;HelloWorld&gt;</code> 便是。</li>
<li><code>v-if</code>、<code>v-else</code> 與 <code>v-else-if</code> 用於判斷 DOM 生成與否。</li>
<li><code>v-show</code> 功能跟v-if很相似，不過它是改變元素的 CSS 的 display 屬性，當 v-show 的值為 false，元素則會隱藏。</li>
<li><code>v-for</code> 產生一個迴圈，當你需要重複產生某一段 DOM 時適用。</li>
<li><code>v-model</code> 特別用於表單元件，用以替代輸入的接收值。<br>
其他指令可參考<a href="https://vuejs.org/v2/guide/syntax.html">官方文件</a></li>
</ul>
<h4 id="script">&lt;script&gt;</h4>
<p>代表 javascript 指令，每個 .vue 文件最多包含<strong>一個</strong> <code>&lt;script&gt;</code> 模塊，要使用其他 JS 套件可以使用 require()。如果有安裝 babel，則可以使用 import 語法。使用 <code>export default &#123;...&#125;</code> 匯出一個 Vue 物件，程式將寫在這裡面。<br>
其中常用的方法與屬性如下：<br>
- <code>component:&#123;&#125;</code> 申明引用的元件，能在 template 中使用。<br>
- <code>data()&#123;&#125;</code> 宣告資料能在 template 中使用。<br>
- <code>methods:&#123;&#125;</code> 是指元件的方法，也可以說是函式。<br>
- <code>created()&#123;&#125;</code> 表示當我們的元件載入完成時，需要執行的內容。是 vue 中的勾子(可以理解為 vue 的生命週期)函式(生命週期內各個階段的事件方法)之一。<br>
<img src="https://imgur.com/rgg2soY.png" alt=""></p>
<h4 id="style">&lt;style&gt;</h4>
<p>代表 css 樣式，每個 .vue 文件可包含<strong>多個</strong> <code>&lt;style&gt;</code> 模塊，作用域預設為全局，如果想要限制為區域作用(只在該組件中有效)，可以加上 scoped 屬性 <code>&lt;style scoped&gt;...&lt;/style&gt;</code></p>
<h6 id="Reference">Reference</h6>
<ul>
<li><a href="https://github.com/vuejs-templates/webpack-simple/issues/29">https://github.com/vuejs-templates/webpack-simple/issues/29</a></li>
<li><a href="https://blog.hinablue.me/2019-ithome-ironman-day-1/">https://blog.hinablue.me/2019-ithome-ironman-day-1/</a></li>
</ul>
<h5 id="to-be-read">to be read</h5>
<p><strong>Render Function</strong><br>
<a href="https://medium.com/@speechless0922/vue%E7%9A%84%E4%BA%8C%E4%B8%89%E4%BA%8B-render-function-2b3705e4a5bd">https://medium.com/@speechless0922/vue的二三事-render-function-2b3705e4a5bd</a></p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>[SQA] 單元測試 &amp; Jest 簡介</title>
    <url>/Week3-%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6-Jest-%E7%B0%A1%E4%BB%8B/</url>
    <content><![CDATA[<h3 id="單元測試">單元測試</h3>
<p>單元測試（Unit Testing），是針對專案中每一個單一功能做測試。一般專案裡的最小單位是一個 function，而通常我們在寫完程式後都是用 console.log 來確認呼叫的結果：</p>
<span id="more"></span>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeat</span>(<span class="params">str, n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        result += str</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(repeat(<span class="string">&#x27;a&#x27;</span>,<span class="number">5</span>) === <span class="string">&#x27;aaaaa&#x27;</span>)  <span class="comment">//輸出 true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Jest">Jest</h3>
<p>Jest 是一套現成測試的框架</p>
<ol>
<li><code>$ npm install jest --save-dev</code> 下載</li>
<li>將要測試的程式 export 成 module</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//index.js</span><br><span class="line">//上半部不變，刪掉原先的測試用的 console.log 這行，加上：</span><br><span class="line">exports.repeat = repeat</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>新增 jest 測試檔案， 使用<code>&lt;NAME&gt;.test.js</code> 當作測試檔檔名</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.test.js</span></span><br><span class="line"><span class="keyword">var</span> repeat = <span class="built_in">require</span>(<span class="string">&#x27;./index.js&#x27;</span>)</span><br><span class="line">test(<span class="string">&#x27;repeat(&#x27;</span>a<span class="string">&#x27;,5)應該要等於&#x27;</span>aaaaa<span class="string">&#x27;&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    expect(repeat(<span class="string">&#x27;a&#x27;</span>, <span class="number">5</span>).toBe(<span class="string">&#x27;aaaaa&#x27;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>其中 () =&gt;{} 是 function(){} 的縮寫<br>
4. 在 package.json 的 script 中加上 jest</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;script&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;test&quot;</span> : <span class="string">&quot;jest&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>
<p>下 <code>$ npm run test</code> 就會自動去找附檔名為 .test.js 的檔案並跑測試</p>
</li>
<li>
<p>或是只是想測試單一的檔案，則在 script 中指明檔案即可</p>
</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;script&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;test&quot;</span> : <span class="string">&quot;jest repeat.test.js&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="加上-describe-歸納相同性質的測試">加上 describe 歸納相同性質的測試</h4>
<p><img src="https://imgur.com/Ea7Y3S3.png" alt=""><br>
<img src="https://imgur.com/fVkl5FZ.png" alt=""></p>
<h4 id="補充">補充</h4>
<p>如果直接在 terminal 下 jest index.test.js 指令的話，會出現 command not found 的錯誤訊息。因為 jest 只安裝在專案底下，而下在 terminal 是去你的系統找，所以會有錯誤。<br>
使用 package.json 的 script 來下指令外還可以使用 <code>npx</code> 來達成直接在 terminal 下 jest 的功能，<code>$ npx jest repeat.test.js</code>。</p>
<h3 id="TDD-測試驅動開發">TDD, 測試驅動開發</h3>
<p>Test-driven Development，一種開發方法，會先寫出測試程式，在依預期的測試結果去開發程式。</p>
<h6 id="Source">Source</h6>
<p>[All] 此篇為觀看 Lidemy JS102 的筆記，圖片來源以及部分內容取自上課影片</p>
]]></content>
      <categories>
        <category>SQA</category>
      </categories>
      <tags>
        <tag>單元測試</tag>
        <tag>jest</tag>
      </tags>
  </entry>
  <entry>
    <title>VirtualBox 安裝 VM 錯誤 (E_FAIL 0x80004005) 之解決</title>
    <url>/VirtualBox-VM-EFAIL-0x80004005/</url>
    <content><![CDATA[<p>在 Win10 使用 VirtualBox 安裝 VM 時遇到下述錯誤，紀錄一下解決方式。</p>
<span id="more"></span>
<h3 id="Error">Error:</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Failed to open a session for the virtual machine xxx.</span><br><span class="line">Call to WHvSetupPartition failed: ERROR_SUCCESS (Last=0xc000000d/87) (VERR_NEM_VM_CREATE_FAILED).</span><br><span class="line">Result Code: E_FAIL (0x80004005)</span><br><span class="line">Component: ConsoleWrap</span><br><span class="line">Interface: IConsole &#123;872da645-4a9b-1727-bee2-5585105b9eed&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Reason">Reason</h3>
<p>許多虛擬化應用程式依賴處理器上的硬體虛擬化擴充，包括 Intel VT-x 和 AMD-V，一次僅能允許一個軟體使用。若要使用其他虛擬化軟體如 VirtualBOX 或 VMware，必須停用 Hyper-V 虛擬機器監控程式、裝置防護和認證防護。</p>
<h3 id="Solution">Solution:</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows Features</span><br><span class="line">----------------------</span><br><span class="line">Disabled -&gt; Hyper-V</span><br><span class="line">Enabled  -&gt; Virtual Machine Platform</span><br><span class="line">Enabled  -&gt; Windows Hypervisor Platform</span><br><span class="line">Disabled -&gt; Windows Sandbox</span><br><span class="line"></span><br><span class="line">Elevated Powershell/Cmd</span><br><span class="line">-------------------------------</span><br><span class="line">bcdedit /set hypervisorlaunchtype off</span><br><span class="line"></span><br><span class="line">BIOS</span><br><span class="line">-----</span><br><span class="line">Enabled  -&gt; Virtualization Technology (VTx)</span><br><span class="line">Enabled  -&gt; Virtualization Technology for Directed I/O (VTd)</span><br><span class="line">Disabled -&gt; HP Hypervisor</span><br></pre></td></tr></table></figure>
<p>Other Windows Features (Possibly irrelevant, can view img below)<br>
<img src="https://i.imgur.com/NgDGQvW.png" alt=""></p>
<h3 id="Reference">Reference</h3>
<p><a href="https://forums.virtualbox.org/viewtopic.php?f=6&amp;t=93443">https://forums.virtualbox.org/viewtopic.php?f=6&amp;t=93443</a><br>
<a href="https://docs.microsoft.com/zh-tw/troubleshoot/windows-client/application-management/virtualization-apps-not-work-with-hyper-v">https://docs.microsoft.com/zh-tw/troubleshoot/windows-client/application-management/virtualization-apps-not-work-with-hyper-v</a></p>
]]></content>
      <categories>
        <category>DevOps</category>
        <category>VirtualBox</category>
      </categories>
      <tags>
        <tag>VirtualBox</tag>
      </tags>
  </entry>
  <entry>
    <title>[Git] Your branch and &#39;origin/master&#39; have diverged</title>
    <url>/Your-branch-and-origin-master-have-diverged/</url>
    <content><![CDATA[<p>在 git status 的時後發現本地端跟遠端倉庫 commit 分岔 (diverged)，代表本地所在的分支跟遠端倉庫的分支各走各的路。</p>
<span id="more"></span>
<h3 id="問題">問題</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br><span class="line">  On branch master</span><br><span class="line">  Your branch and <span class="string">&#x27;origin/master&#x27;</span> have diverged,</span><br><span class="line">  and have 1 and 1 different commits each, respectively.</span><br><span class="line">    (use <span class="string">&quot;git pull&quot;</span> to merge the remote branch into yours)</span><br><span class="line"></span><br><span class="line">  nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>
<h3 id="原因排查">原因排查</h3>
<p>查看各自的 commit log，在本地端的 log 中沒有發現 origin/master 遠端倉庫的 master HEAD，所以代表分支已經分歧。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --oneline origin/master</span><br><span class="line">  45b6977 (origin/master) v1.1 modified <span class="built_in">return</span> body</span><br><span class="line">  2714cef add changelog</span><br><span class="line">  4a19b17 ula modified reverse rule</span><br><span class="line">  92d48af origin <span class="string">&#x27;reverstapi&#x27;</span> version</span><br><span class="line">git <span class="built_in">log</span> --oneline</span><br><span class="line">  733e302 (HEAD -&gt; master) v1.2 rebase from v1 and modified the sql <span class="built_in">command</span></span><br><span class="line">  2714cef add changelog</span><br><span class="line">  4a19b17 ula modified reverse rule</span><br><span class="line">  92d48af origin <span class="string">&#x27;reverstapi&#x27;</span> version</span><br><span class="line"><span class="comment"># 利用 git cherry origin/master 來看遠端與本地端 commit 的差別</span></span><br><span class="line">git cherry origin/master</span><br><span class="line">  + 733e302d65419093b386de9b286c96eecaa95200</span><br><span class="line"><span class="comment"># 顯示有一個版本忘了提交</span></span><br></pre></td></tr></table></figure>
<h3 id="同步遠端與本地分支">同步遠端與本地分支</h3>
<p>有以下四種狀況，主要分為合併兩分支與忽略某一方分支。合併又分為兩種 merge &amp; rebase；而忽略其中一方分支，則要先確定哪一邊的分支是對的，如果是多人協做的環境，通常遠端倉庫是對的情況下，我們就是處理本地端的部分就好。</p>
<h4 id="分支合併-merge">分支合併(merge)</h4>
<ol>
<li>更新 remote branch，fetch 會去讀取 remote repo 的內容，並且更新 remote branch 的內容，但不會修改本地端分支。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch origin master</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>如同 status 提示，使用 git pull 來 merge 遠端的分支</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull origin master</span><br><span class="line"><span class="comment"># 同等於 git merge remotes/origin/master</span></span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/8MhgIh5.png" alt=""><br>
git pull 會幫我們做 merge，若沒有發生版本衝突，就會直接 Fast-Forward，會直接修改 master branch 的 HEAD 指向位置，直接移動到遠端 master branch 的 HEAD 也就是 FETCH_HEAD。但若發生了版本衝突的時候，就需要提交 Merge Patch，但若改動很少，使用 merge 會產生多餘且沒意義的 Merge Patch，較不建議使用。</p>
<h4 id="分支合併-rebase">分支合併(rebase)</h4>
<ol>
<li>更新 remote branch</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch origin</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>git rebase，重新修改特定分支的「基礎版本」，把另外一個分支(remote master)的變更，當成我這個分支(local master)的基礎。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull --rebase origin/master</span><br><span class="line"><span class="comment"># 同等於 git rebase remotes/github/master</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>master 分支同步成功之後，就可以把後來 master 新修改的 commit push 出去了</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure>
<h4 id="處理本地端倉庫-忽略本地端倉庫的修改">處理本地端倉庫(忽略本地端倉庫的修改)</h4>
<p>先使用 reset 回到與遠端倉庫一樣的 commit (2714cef)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard 2714cef</span><br></pre></td></tr></table></figure>
<p>回到了與遠端倉庫一樣擁有的 commit，但這個 commit 並不是 origin/master 倉庫最新的 commit，git 告訴我們落後了 1 個 commit</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status                                                                    </span><br><span class="line"> On branch master                                                                </span><br><span class="line"> Your branch is behind <span class="string">&#x27;origin/master&#x27;</span> by 1 commits, and can be fast-forwarded.  </span><br><span class="line">   (use <span class="string">&quot;git pull&quot;</span> to update your <span class="built_in">local</span> branch)                                  </span><br><span class="line"></span><br><span class="line"> nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>
<p>將遠端倉庫拉回來補上這些漏掉的 commit 就解了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull origin master</span><br><span class="line">git status</span><br><span class="line"> On branch master                                                                </span><br><span class="line"> Your branch is up to date with <span class="string">&#x27;origin/master&#x27;</span>.                                 </span><br><span class="line"></span><br><span class="line"> nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>
<h4 id="處理遠端倉庫-忽略遠端倉庫的修改">處理遠端倉庫(忽略遠端倉庫的修改)</h4>
<div class="danger">
<p>基本上，用此方法強制 push 本地端的更新到遠端，會使遠端修改丢失，一般是不可取的，尤其是多人協作開發的時候。</p>
</div>
<p>但我這次遇到的狀況恰好就是要蓋掉遠端的更新。在 master branch，強制更新 remote master branch。<br>
**需要先解除 remote master branch 的 protect (Github or Gitlab 的遠端倉庫上 Settings / Repository / Protected branches)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin master -f</span><br><span class="line">  Enumerating objects: 13, <span class="keyword">done</span>.</span><br><span class="line">  Counting objects: 100% (13/13), <span class="keyword">done</span>.</span><br><span class="line">  Delta compression using up to 8 threads</span><br><span class="line">  Compressing objects: 100% (7/7), <span class="keyword">done</span>.</span><br><span class="line">  Writing objects: 100% (7/7), 905 bytes | 905.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">  Total 7 (delta 5), reused 0 (delta 0)</span><br><span class="line">  To ssh://git.nexmasa.com:10022/root/reverseapi.git</span><br><span class="line">   + 45b6977...733e302 master -&gt; master (forced update)</span><br></pre></td></tr></table></figure>
<p>完成後，查看兩邊的 git log，可以發現遠端的 commit 強制與本地端的 master 同步了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --oneline origin/master</span><br><span class="line">  733e302 (HEAD -&gt; master, origin/master) v1.2 rebase from v1 and modified the sql <span class="built_in">command</span></span><br><span class="line">  2714cef add changelog</span><br><span class="line">  4a19b17 ula modified reverse rule</span><br><span class="line">  92d48af frank origin <span class="string">&#x27;reverstapi&#x27;</span> version</span><br><span class="line">git <span class="built_in">log</span> --oneline master</span><br><span class="line">  733e302 (HEAD -&gt; master, origin/master) v1.2 rebase from v1 and modified the sql <span class="built_in">command</span></span><br><span class="line">  2714cef add changelog</span><br><span class="line">  4a19b17 ula modified reverse rule</span><br><span class="line">  92d48af frank origin <span class="string">&#x27;reverstapi&#x27;</span> version</span><br></pre></td></tr></table></figure>
<h3 id="補充-revert">補充(revert)</h3>
<p>git revert 命令意思是撤銷某次提交。它會產生一個新的提交，雖然程式碼回退了，但是版本依然是向前的，所以，當你用 revert 回退之後，其他開法者 pull 遠端倉庫之後，他們的程式碼也自動的回退了。通常比較適用於已經 push 出去的 Commit，或是不允許使用 Reset 修改歷史紀錄的指令的場合。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 撤銷最近一次提交</span><br><span class="line">git revert HEAD</span><br><span class="line"># 撤銷最近 2 次提交，注意：數字從 0 開始</span><br><span class="line">git revert HEAD~1</span><br><span class="line"># 撤銷指定的提交</span><br><span class="line">git revert &lt;commitID&gt;</span><br><span class="line"></span><br><span class="line"># 更新遠端</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>
<h3 id="Reference">Reference</h3>
<ul>
<li><a href="https://www.nvda.org.tw/discussion/ui=100204tm=1973254239">https://www.nvda.org.tw/discussion/ui=100204tm=1973254239</a></li>
<li><a href="https://backlog.com/git-tutorial/tw/stepup/stepup3_2.html">https://backlog.com/git-tutorial/tw/stepup/stepup3_2.html</a></li>
<li><a href="https://zlargon.gitbooks.io/git-tutorial/content/remote/sync.html">https://zlargon.gitbooks.io/git-tutorial/content/remote/sync.html</a></li>
</ul>
]]></content>
      <categories>
        <category>DevOps</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>[TCP/IP] 網路基礎概念- 傳紙條、TCP/IP 四層概述</title>
    <url>/Week4-basic-net1/</url>
    <content><![CDATA[<h3 id="網路">網路</h3>
<p>網路的目的就是為了溝通，可以把整個網路運作想像成傳紙條。</p>
<span id="more"></span>
<h4 id="一開始單純的傳紙條">一開始單純的傳紙條</h4>
<p>只需：</p>
<ul>
<li>寫明來源 (client IP)</li>
<li>寫明目的地 (server IP)</li>
<li>經過三次前置作業 (發送端發訊息、接收端接訊息並回復、發送端收到訊息)，確保雙方都能收發。(TCP 三次交握)<br>
<img src="https://imgur.com/yK4lTIu.png" alt=""></li>
</ul>
<h4 id="把動作標準化">把動作標準化</h4>
<ul>
<li>標準化內容格式，分為 header &amp; body<br>
header：擴充性強，放額外資訊。<br>
body：放主要的訊息。</li>
<li>用狀態碼標準化 server 回應結果 (200, 301, 404, 502…)</li>
<li>用動詞標準化 client 要求的動作 (GET, POST, PUT, DELETE…)</li>
</ul>
<h4 id="進入規模化">進入規模化</h4>
<p>愈來愈多的服務下，使用 <strong>port</strong> 將不同服務標示開來</p>
<ul>
<li>一個 port 負責一個服務 (http:80, ftp:21…)</li>
<li>不同服務有不同訊息格式 (比如 GET 不須帶 body，POST 要帶 request body)</li>
<li>有些不需要使用者回傳訊息的服務，意即不需要經過三次確認 (UDP)</li>
</ul>
<hr>
<h3 id="protocol">protocol</h3>
<p>協定就是一個標準，為了要讓彼此能夠溝通而建立的一個規範，有了標準就可以規模化讓它變成在不同作業系統、環境下的一個共同的準則。</p>
<hr>
<h3 id="TCP-IP">TCP/IP</h3>
<p>網路的層級，理論上有標準的 OSI 七層。但實際上網路的實作，通常都以 <strong>TCP/IP</strong> 四層模型為主流，每一層都負責不同的事情、有不同的通訊協定。<br>
<img src="https://imgur.com/9QQQFU0.png" alt=""><br>
[1]<br>
上層的協定都是建立在下層之上的，舉例 http 建立在 TCP 之上，TCP 又建立在 IP 之上…以此類推。</p>
<h4 id="TCP-IP-鏈結層-Link-Layer">TCP/ IP - 鏈結層 Link Layer</h4>
<p>位於整個網路架構的最底層，負責制定資料傳輸的「實體」規格。所謂「實體」，就是我們眼睛看的到，手可以摸到的部分。以乙太網路來說，凡是接頭規格、傳輸線材種類、MAC 實體位址，都是鏈結層負責的內容。</p>
<div class="info">
<p>剩下的三層，網路層、傳輸層、以及應用層將分為後面三篇文章紀錄。</p>
</div>
<h6 id="source">source</h6>
<p>[1]<a href="http://linux.vbird.org/linux_server/0110network_basic.php">http://linux.vbird.org/linux_server/0110network_basic.php</a><br>
[all] 記此篇為觀看 Lidemy NET101 的筆記，圖片來源以及部分內容取自上課影片</p>
]]></content>
      <categories>
        <category>程式初心者</category>
        <category>TCP/IP</category>
      </categories>
      <tags>
        <tag>Network</tag>
        <tag>TCP/IP</tag>
      </tags>
  </entry>
  <entry>
    <title>[Zookeeper] ACL</title>
    <url>/Zookeeper-ACL/</url>
    <content><![CDATA[<h2 id="ACL-Access-Control-List">ACL(Access Control List)</h2>
<p>Zookeeper 對 znode 操作採用 ACL 進行了存取權限控制，類似於UNIX/Linux的文件權限機制。使用 <code>scheme:id:perm</code> 來標識，主要涵蓋 3 個方面：</p>
<span id="more"></span>
<ul>
<li>權限模式（Scheme）：授權的策略</li>
<li>授權對象（ID）：授權的對象</li>
<li>權限（Permission）：授予的權限<br>
其特性如下：</li>
<li>ZooKeeper 的權限控制是基於每個 znode 節點的，需要對每個節點設置權限</li>
<li>每個 znode 支持設置多種權限控制方案和多個權限</li>
<li>子節點<strong>不會</strong>繼承父節點的權限，客戶端無權訪問某節點，但可能可以訪問它的子節點</li>
</ul>
<hr>
<h3 id="Scheme-id">Scheme:id</h3>
<p>ZK 支持 pluggable authentication schemes，可以通過擴充套件scheme，來擴充 ACL 的機制。</p>
<h4 id="Built-in-ACL-Schemes">Built-in ACL Schemes</h4>
<p>ZK有以下的内置schemes：</p>
<ul>
<li>world：默認方式，僅對應一個 id <code>anyone</code>，為所有用戶端開發權限。</li>
<li>auth：代表<strong>已經</strong>認證通過的用戶 (cli中可以通過 <code>addauth digest user:pwd</code> 來添加當前上下文中的授權用戶；或是通過 kerberos 來進行 authencation)</li>
<li>digest：即<code>用戶名:密碼</code>這種方式認證。用 <code>username:BASE64(SHA1(password))</code> 字符串作為 ACL ID。意思是認證是通過明文發送 <code>username:password</code> 來進行的，當用在 ACL 時，表達式為 <code>username:BASE64(SHA1(password))</code>。</li>
<li>ip：使用客戶端的主機 IP 作為 ACL ID 。可以使用一個網段，如 10.15.0.0/16。</li>
<li>super：在這種 scheme 情況下，對應的 id 擁有超級許可權，可以做任何事情 (cdrwa)。</li>
<li>sasl：設置為用戶的 uid，通過 sasl Authentication 用戶的 id，在 3.4.4 版本後 sasl 是通過 Kerberos 實現（即只有通過 Kerberos 認證的用戶才可以訪問權限的 znode），使用 <code>sasl:uid:cdwra</code> 字符串作為節點 ACL 的 id（如：sasl:user:cdwra）。</li>
</ul>
<h3 id="Permission">Permission</h3>
<p>5種權限簡寫為 crwda</p>
<ul>
<li>CREATE c 可以創建當前節點的<strong>子節點</strong></li>
<li>DELETE d 可以刪除當前節點的<strong>子節點</strong></li>
<li>READ r 可以讀取<strong>節點</strong>數據及顯示<strong>子節點</strong>列表</li>
<li>WRITE w 可以向當前<strong>節點</strong>寫數據</li>
<li>ADMIN a 可以設置<strong>節點</strong>訪問控制列表權限</li>
</ul>
<hr>
<h3 id="ACL-相關命令">ACL 相關命令</h3>
<table>
<thead>
<tr>
<th>命令</th>
<th>使用方式</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>addauth</td>
<td><code>addauth &lt;scheme&gt; &lt;auth&gt;</code></td>
<td>添加認證用戶</td>
</tr>
<tr>
<td>setAcl</td>
<td><code>setAcl &lt;path&gt; &lt;acl&gt;</code></td>
<td>設置 ACL 權限</td>
</tr>
<tr>
<td>getAcl</td>
<td><code>getAcl &lt;path&gt;</code></td>
<td>讀取 ACL 權限</td>
</tr>
</tbody>
</table>
<p>進入 zkCli</p>
<h4 id="auth-舉例">auth 舉例</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ addauth digest user:123456</span><br><span class="line">$ setAcl /test auth:user:cdrwa</span><br></pre></td></tr></table></figure>
<p>之後使用 getAcl 查看權限時，密碼會自動轉為密文<code>BASE64(SHA1(password))</code>。<br>
<img src="https://imgur.com/IBGSdHf.png" alt=""><br>
查看節點數據之前，必須確保已驗證加入，否則會有 <code>Authentication is not valid : /test</code> 的錯誤。</p>
<h4 id="digest-舉例">digest 舉例</h4>
<p>digest 加密模式相對於 auth 來說要稍微麻煩一些，需要對明文密碼進行 <code>BASE64(SHA1(password))</code> 的處理。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ setAcl &lt;path&gt; digest:&lt;user&gt;:&lt;密文密碼&gt;:&lt;acl&gt;</span><br></pre></td></tr></table></figure>
<h5 id="對密碼進行加密的方法">對密碼進行加密的方法</h5>
<ul>
<li>使用 openssl 命令產生</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo -n &lt;user&gt;:&lt;password&gt; | openssl dgst -binary -sha1 | openssl base64</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/sdvKo1X.png" alt=""><br>
生成 <code>&lt;user&gt;:&lt;password&gt;</code> 對應的密文。請注意，如果將 user 改掉，則生成的密文也會不一樣。</p>
<ul>
<li>使用 zookeeper 提供的 java class 來產生<br>
先進入zookeeper的安裝目錄，然後執行下述命令：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ java -cp ./lib/*:./* org.apache.zookeeper.server.auth.DigestAuthenticationProvider ula:123456</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/sdvKo1X.png" alt=""></p>
<p><strong>使用 digest 可直接 setAcl 設置權限，不用添加身份認證。但如果要訪問節點，仍需先身分認證</strong></p>
<p><img src="https://imgur.com/xOpBvQI.png" alt=""></p>
<hr>
<h3 id="設置超級管理員">設置超級管理員</h3>
<p>假如忘記了認證用戶的密碼，或者想要存取某些被保護的 znode，怎麼辦呢？可以為zookeeper 設置超級管理員，superuser 預設對所有節點有權限存取。</p>
<ol>
<li>取得欲設置帳號對應的密碼的密文，同上一小節<strong>對密碼進行加密的方法</strong></li>
<li>編輯啟用 zookeeper service 的 script <code>zkServer.sh</code>，將以下參數加入下方圖片中位置或是 export 為環境變數。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;-SERVER_JVMFLAGS=-Dzookeeper.DigestAuthenticationProvider.superDigest=[帳號]:[密文密碼]</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/vwyzUie.png" alt=""></p>
<ol start="3">
<li>
<p>保存文件，重啟該節點上的zookeeper service 便設置成功了。</p>
</li>
<li>
<p>進入 zkCli 模式後執行</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">addauth digest [帳號]:[明文密碼]</span><br></pre></td></tr></table></figure>
<p>認證身份，這樣就具備超級管理員角色，可以操作任意節點了。</p>
<hr>
<div class="info">
<p>補充<br>
在 Linux 中執行某些程序前會對啟動它的用戶進行認證，符合一定的要求之後才允許執行，例如 login, su 等。在 linux 中進行身份或是狀態的驗證程序是由 PAM 來進行的。<br>
PAM（Pluggable Authentication Modules）是由 Sun 提出的一種認證機制。它通過提供一些動態鏈接庫和一套統一的 API，將系統提供的服務和該服務的認證方式分開，使得系統管理員可以靈活地根據需要給不同的服務配置不同的認證方式而無需更改服務程序，同時也便於向系統中添加新的認證手段。PAM 模塊是一種嵌入式模塊，修改後即時生效。</p>
</div>
<h5 id="Reference">Reference</h5>
<ul>
<li><a href="https://baike.baidu.com/item/PAM/3747946">https://baike.baidu.com/item/PAM/3747946</a></li>
<li><a href="https://www.cnblogs.com/qlqwjy/p/10517231.html">https://www.cnblogs.com/qlqwjy/p/10517231.html</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1414462">https://cloud.tencent.com/developer/article/1414462</a></li>
</ul>
]]></content>
      <categories>
        <category>Big Data</category>
        <category>Zookeeper</category>
      </categories>
      <tags>
        <tag>Zookeeper</tag>
        <tag>ACL</tag>
      </tags>
  </entry>
  <entry>
    <title>[Zookeeper] Dynamic Configuration</title>
    <url>/Zookeeper-Dynamic-Configuration/</url>
    <content><![CDATA[<p>Zookeeper 在 3.5.0 版發行後，支持動態新增節點，不需將整個集群重啟。這篇文章主要紀錄 dymamic configuration 如何實作。</p>
<span id="more"></span>
<h3 id="環境準備">環境準備</h3>
<p>準備三台 VM，<a href="https://ulahsieh.github.io/Build-Zookeeper-Cluster.html">安裝 Zookeeper</a></p>
<ul>
<li>10.1.5.31</li>
<li>10.1.5.32</li>
<li>10.1.5.33</li>
</ul>
<h3 id="配置-zoo-cfg">配置 zoo.cfg</h3>
<p>配置三台 Zookeeper 的配置檔，新增參數說明如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dataDir=/var/lib/zookeeper</span><br><span class="line">syncLimit=5</span><br><span class="line">tickTime=2000</span><br><span class="line">initLimit=10</span><br><span class="line">maxClientCnxns=100</span><br><span class="line">standaloneEnabled=false</span><br><span class="line">reconfigEnabled=true</span><br><span class="line">4lw.commands.whitelist=*</span><br><span class="line">dynamicConfigFile=/opt/zookeeper/conf/zoo.cfg.dynamic</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>standaloneEnabled<br>
在 3.5.0 版之前，可以在獨立模式或分佈式模式下運行 ZooKeeper。並且無法在運行時在它們之間進行切換。 默認情況下 standaloneEnabled 設置為 true。使用默認值的話，則當以單個服務器啟動時，不允許集合增長；而如果是以叢集方式啟動，則不允許減少小於等於兩個參與者。由於運行分佈式模式可以提供更大的靈活性，因此建議將標誌設置為 false。</p>
</li>
<li>
<p>reconfigEnabled<br>
從 3.5.0 版開始到 3.5.3 之前，動態重新配置功能皆無法禁用，涉及安全問題，惡意行為者可以對 ZooKeeper 集合的配置進行任意更改，或是將受感染的服務器添加到集合中。<br>
3.5.3 新增了這個參數，並加入一些安全機制（請見下方說明），讓使用者自行決定是否啟用。reconfigEnabled 設為 false 可以完全禁用重新配置功能，默認情況下，無論是否使用身份驗證通過 reconfig API 重新配置群集的任何嘗試都將失敗，除非 reconfigEnabled 設置為 true 。</p>
</li>
<li>
<p>dynamicConfigFile<br>
從 3.5.0 版開始，zookeeper 區分<code>動態配置參數</code>和<code>靜態配置參數</code>，靜態配置參數在 servie 啟動時從配置文件 zoo.cfg 中讀取，並且在執行期間不會更改。動態配置參數則可以寫入 dynamicConfigFile 中。<font style="background:MistyRose">目前動態配置的參數有 server, group and weight。</font>動態參數將由 ZooKeeper 推送，並覆蓋所有服務器上的動態配置文件。因此，不同服務器上的動態配置文件通常是相同的（它們只能在重新配置進行時暫時不同，或者如果新配置尚未傳播到某些服務器）。創建後，不應手動更改動態配置文件。只可以通過 API 或者 reconfig 命令進行更改。</p>
</li>
</ul>
<h3 id="配置-zoo-cfg-dynamic">配置 zoo.cfg.dynamic</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server.1 = 10.1.5.31:2888:3888:participant;2181</span><br><span class="line">server.2 = 10.1.5.32:2888:3888:participant;2181</span><br><span class="line">server.3 = 10.1.5.33:2888:3888:participant;2181</span><br></pre></td></tr></table></figure>
<p>格式為<br>
<code>server.&lt;id&gt; = &lt;address1&gt;:&lt;port1&gt;:&lt;port2&gt;[:role];[&lt;client port address&gt;:]&lt;client port&gt;</code></p>
<ul>
<li>第一個 port 是用來和集群中的 Leader 交換訊息的；</li>
<li>第二個 port 是在 leader 掛掉時用來進行選舉的。</li>
<li>角色是可選的，可以是 participant (default) 或者 observer。</li>
<li>client ip &amp; port 放在最後面且用分號分開。client IP 是可選的，默認是<code>0.0.0.0</code>。</li>
</ul>
<p>下面是合法的範例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server.5 = 125.23.63.23:1234:1235;2181</span><br><span class="line">server.5 = 125.23.63.23:1234:1235:participant;2181</span><br><span class="line">server.5 = 125.23.63.23:1234:1235:observer;2181</span><br><span class="line">server.5 = 125.23.63.23:1234:1235;125.23.63.24:2181</span><br><span class="line">server.5 = 125.23.63.23:1234:1235:participant;125.23.63.23:2181</span><br></pre></td></tr></table></figure>
<p>myid 的數字<span class="dotunderletter"><strong>不一定</strong></span>是從 1 開始依序排序，可以自己指定，但不同的服務器的 id 要唯一。</p>
<h3 id="初始化-myid">初始化 myid</h3>
<p>在每台 Zookeeper 的 dataDir 目錄分別執行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 10.1.5.31</span><br><span class="line">$ echo &quot;1&quot;&gt;/var/lib/zookeeper/myid</span><br><span class="line"># 10.1.5.32</span><br><span class="line">$ echo &quot;2&quot;&gt;/var/lib/zookeeper/myid</span><br><span class="line"># 10.1.5.33</span><br><span class="line">$ echo &quot;3&quot;&gt;/var/lib/zookeeper/myid</span><br></pre></td></tr></table></figure>
<h3 id="啟動服務">啟動服務</h3>
<p>在三台機上上啟動 Zookeeper</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ /opt/zookeeper/bin/zkServer.sh start /opt/zookeeper/conf/zoo.cfg</span><br></pre></td></tr></table></figure>
<p>進入其中一台 Zookeeper CLI，比如 10.1.5.31，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ /opt/zookeeper/bin/zkCli.sh -server 10.1.5.31:2181</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/ThMerfx.png" alt=""><br>
這裡可以發現集群訊息中有個 <code>version=xxxxxxxxx</code> 的配置，這是動態配置文件的版本號，在 zookeeper 的 conf 文件夾下，你會發現多了一個配置文件 <code>zoo.cfg.dynamic.xxxxxxxxx</code>，說明集群當前使用的是這個配置文件，會依每次動態配置後而改動。</p>
<h3 id="安全性">安全性</h3>
<p>在 3.5.3 版之前，任何可以連接到 ZooKeeper 集群的 client 都可以通過 reconfig 來更改 ZooKeeper 集群的狀態，進而使惡意客戶端有機可趁。因此 3.5.3 開始引入了對 reconfig 或 API 訪問的控制。<br>
動態配置存儲在特殊的 znode，ZooDefs.CONFIG_NODE = /zookeeper/config 中。默認情況下，此節點對所有用戶都是 <code>read-only</code> 的，但超級使用者和 CONFIG_NODE 配置為<code>寫</code>訪問權限的 user 除外。<br>
關於如何修改 ACL 權限，請參考上一篇文章 － <a href="https://ulahsieh.github.io/Zookeeper-ACL.html">Zookeeper ACL</a></p>
<div class="warning">
<p>另外也可以使用 <code>skipACL</code> 來禁用 ACL 檢查，ZooKeeper 支持在　zoo.cfg 中的 <code>skipACL</code> 參數設置為 <code>yes</code> 時完全跳過 ACL。在這種情況下，任何未經身份驗證的用戶都可以使用 reconfig API。不安全，建議不要使用。</p>
</div>
<h3 id="動態增加-刪除節點">動態增加 &amp; 刪除節點</h3>
<h4 id="新增節點">新增節點</h4>
<p>準備另一台機器 10.1.5.90，安裝 zookeeper 後，靜態配置檔 zoo.cfg 如同上方配置。動態配置檔 zoo.cfg.dynamic 需新增自己的資訊：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server.1=10.1.5.31:2888:3888:participant;2181</span><br><span class="line">server.2=10.1.5.32:2888:3888:participant;2181</span><br><span class="line">server.3=10.1.5.33:2888:3888:participant;2181</span><br><span class="line">server.4=10.1.5.90:2888:3888:participant;2181</span><br></pre></td></tr></table></figure>
<p>進入前三台中的任一台 zkCli 後執行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reconfig -add server.4=10.1.5.90:2888:3888:participant;2181</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/a3WeNXb.png" alt=""></p>
<h4 id="刪除節點">刪除節點</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reconfig -remove 4</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/2pOb4s9.png" alt=""></p>
<h4 id="確認新增節點是否搭建成功">確認新增節點是否搭建成功</h4>
<p>確認節點狀態<br>
<img src="https://imgur.com/0q26paF.png" alt=""><br>
在 10.1.5.31 新增一個 znode<br>
<img src="https://imgur.com/Be4DUG6.png" alt=""><br>
到 10.1.5.90 確認是否有同步成功<br>
<img src="https://imgur.com/rt7IiHJ.png" alt=""></p>
<h6 id="Reference">Reference</h6>
<ul>
<li><a href="https://github.com/apache/zookeeper/blob/master/zookeeper-docs/src/main/resources/markdown/zookeeperReconfig.md">https://github.com/apache/zookeeper/blob/master/zookeeper-docs/src/main/resources/markdown/zookeeperReconfig.md</a></li>
<li><a href="https://docs4dev.com/docs/zh/zookeeper/r3.5.6/reference/zookeeperReconfig.html#sc_reconfig_access_control">https://docs4dev.com/docs/zh/zookeeper/r3.5.6/reference/zookeeperReconfig.html#sc_reconfig_access_control</a></li>
<li><a href="https://blog.csdn.net/zhoulenihao/article/details/107076188">https://blog.csdn.net/zhoulenihao/article/details/107076188</a></li>
</ul>
]]></content>
      <categories>
        <category>Big Data</category>
        <category>Zookeeper</category>
      </categories>
      <tags>
        <tag>Zookeeper</tag>
        <tag>Dynamic Configuration</tag>
      </tags>
  </entry>
  <entry>
    <title>[Zookeeper] Encryption - 產生 self-signed 金鑰</title>
    <url>/Zookeeper-Encryption1/</url>
    <content><![CDATA[<p>Netty 是一個基於 NIO 的 client/server 通信框架，它通過直接使用 NIO 簡化了 Java 應用程序的 network level 通信的複雜度。 此外，Netty 框架內置了對加密（SSL）和身份驗證（CA）的支持。 這些是可選功能，可以單獨打開或關閉。</p>
<span id="more"></span>
<p>Zookeeper 3.5 版開始，通過將環境變數的設定允許 ZooKeeper server 使用 Netty 代替 NIO（默認項）。</p>
<p>接下來將用幾篇文章記錄如何加密 Zookeeper 通訊。</p>
<h2 id="產生金鑰">產生金鑰</h2>
<p>每個 server 必須具有包含金鑰證書（private key + public certificate）的金鑰庫 (keystore)。 金鑰證書可以是 self-signed 的，也可以由證書頒發機構（CA）簽名。</p>
<h3 id="產生-self-signed-金鑰">產生 self-signed 金鑰</h3>
<ol>
<li>進入 Zookeeper server 所在機器</li>
<li>使用 Java keytool 工具產生 keypair</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ keytool -genkeypair -alias $(hostname -f) \</span><br><span class="line">  -keyalg RSA -keysize 2048 \</span><br><span class="line">  -dname &quot;CN=$(hostname -f)&quot; </span><br><span class="line">  -validity &lt;days&gt; \</span><br><span class="line">  -keypass &lt;password&gt; \</span><br><span class="line">  -keystore keystore.jks \</span><br><span class="line">  -storepass &lt;same password&gt; \</span><br><span class="line">  -storetype JKS</span><br></pre></td></tr></table></figure>
<ul>
<li>hostname -f 顯示主機的 FQDN (fully qualified domain name) 完全限定域名。</li>
<li>別名（-alias）和專有名稱（-dname）必須與與之關聯的 server hostname 匹配，否則主機名驗證會失敗。</li>
</ul>
<ol start="3">
<li>從 keystore 中導出證書</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ keytool -exportcert -alias $(hostname -f) \</span><br><span class="line">  -keystore keystore.jks \</span><br><span class="line">  -file $(hostname -f).cer -rfc</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>在 Zookeeper quorum 重複以上動作。</li>
</ol>
<h2 id="將證書放入-truststore-中">將證書放入 truststore 中</h2>
<p>為了使 server 間彼此信任，它們必須在自己的信任庫(truststore)中具有其他 server 的證書。 Truststore 可用於client-to-node 加密以及 node-to-node 的加密。</p>
<ol>
<li>使用 Java keytool 工具將所有 Zookeeper 實例的 certificate 導入至 truststore 中</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ keytool -importcert -alias [host1..3] </span><br><span class="line">  -file [host1..3].cer \</span><br><span class="line">  -keystore truststore.jks \</span><br><span class="line">  -storepass &lt;password&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>alias：別名可以是任何值。可以與 keystore 使用相同別名，也可是諸如 self 之類的描述性標籤。</li>
<li>file：指出愈導入的公開證書</li>
</ul>
<ol start="2">
<li>出現提示時，輸入 <code>y</code> 將證書添加到信任庫中：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Trust this certificate? [no]:  y </span><br><span class="line">Certificate was added to keystore</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>重複以上動作，為在 quorum 的 Zookeeper 建立 truststore。</li>
</ol>
<h6 id="Reference">Reference</h6>
<ul>
<li><a href="https://zookeeper.apache.org/doc/r3.6.1/zookeeperAdmin.html#Quorum+TLS">https://zookeeper.apache.org/doc/r3.6.1/zookeeperAdmin.html#Quorum+TLS</a></li>
</ul>
]]></content>
      <categories>
        <category>Big Data</category>
        <category>Zookeeper</category>
      </categories>
      <tags>
        <tag>Zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>[Zookeeper] Encryption - 產生 CA-signed 金鑰</title>
    <url>/Zookeeper-Encryption2/</url>
    <content><![CDATA[<h3 id="產生-CA-加簽金鑰">產生 CA 加簽金鑰</h3>
<ol>
<li>產生 CA 金鑰憑證<br>
在隨意一台機器上產生 CA 憑證，用於為其他金鑰加簽。</li>
</ol>
<span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ openssl req -new -x509 \</span><br><span class="line">  -keyout test.ca.key \</span><br><span class="line">  -out test.ca.crt \</span><br><span class="line">  -days &lt;days&gt; \</span><br><span class="line">  -passout pass:&lt;password&gt; \</span><br><span class="line">  -subj &quot;/C=TW/ST=NewTaipei/L=NewTaipei/O=ORG/OU=test/CN=localhost&quot;</span><br></pre></td></tr></table></figure>
<p>會產生加密的 RSA 密鑰 <code>test.ca.key</code> 以及加密的公開 CA 憑證 <code>test.ca.crt</code></p>
<ol start="2">
<li>產生 keypair<br>
在每一台要加入 SSL 的機器上使用 Java keytool 工具產生屬於自己的 keypair。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ keytool -genkeypair \</span><br><span class="line">  -alias $(hostname -f) \</span><br><span class="line">  -keyalg RSA -keysize 2048 \</span><br><span class="line">  -dname &quot;CN=$(hostname -f)&quot; \</span><br><span class="line">  -validity &lt;days&gt; \</span><br><span class="line">  -keypass &lt;password&gt; \</span><br><span class="line">  -keystore keystore.jks \</span><br><span class="line">  -storepass &lt;same password&gt; \</span><br><span class="line">  -storetype JKS</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>將第一步驟產生的 CA 憑證加到個別機器上的 truststore</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ keytool -importcert \</span><br><span class="line">  -keystore truststore.jks \</span><br><span class="line">  -file test.ca.crt \</span><br><span class="line">  -alias CARoot \</span><br><span class="line">  -keypass &lt;password&gt; \</span><br><span class="line">  -storepass &lt;password&gt; \</span><br><span class="line">  -noprompt</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>從第二步驟產生的 keypair keystore.jks 中匯出 public certificate</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ keytool -certreq \</span><br><span class="line">  -keystore keystore.jks \</span><br><span class="line">  -file $(hostname).crt \</span><br><span class="line">  -<span class="built_in">alias</span> $(hostname) \</span><br><span class="line">  --keypass &lt;password&gt; \</span><br><span class="line">  --storepass &lt;password&gt;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>使用 CA 簽署第四步驟產生的憑證</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ openssl x509 -req \</span><br><span class="line">  -CA test.ca.crt \</span><br><span class="line">  -CAkey test.ca.key \</span><br><span class="line">  -<span class="keyword">in</span> $(hostname).crt \</span><br><span class="line">  -out $(hostname).signed.crt \</span><br><span class="line">  -days &lt;days&gt; \</span><br><span class="line">  -CAcreateserial \</span><br><span class="line">  -passin pass:&lt;password&gt;</span><br></pre></td></tr></table></figure>
<p>完成後會看到以下訊息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Signature ok</span><br><span class="line">subject=CN = &lt;hostname&gt;</span><br><span class="line">Getting CA Private Key</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>將第五步產生的 signed certificate 匯入到自己的 keystore 中</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ keytool -importcert \</span><br><span class="line">  -keystore keystore.jks \</span><br><span class="line">  -file $(hostname).signed.crt \</span><br><span class="line">  -<span class="built_in">alias</span> $(hostname) \</span><br><span class="line">  -keypass &lt;password&gt; \</span><br><span class="line">  -storepass &lt;password&gt; \</span><br><span class="line">  -noprompt</span><br></pre></td></tr></table></figure>
<ol start="7">
<li>將第五步產生的 signed certificate 匯入到其他機器的 truststore 中，便可以使用 TLS 與其他機器連接。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ keytool -importcert \</span><br><span class="line">  -keystore truststore.jks \</span><br><span class="line">  -file $(hostname).signed.crt \</span><br><span class="line">  -alias CARoot \</span><br><span class="line">  -keypass &lt;password&gt; \</span><br><span class="line">  -storepass &lt;password&gt; \</span><br><span class="line">  -noprompt</span><br></pre></td></tr></table></figure>
<h6 id="Reference">Reference</h6>
<ul>
<li><a href="https://wenku.baidu.com/view/2f1a69078e9951e79b8927df.html">https://wenku.baidu.com/view/2f1a69078e9951e79b8927df.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Big Data</category>
        <category>Zookeeper</category>
      </categories>
      <tags>
        <tag>Zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>[Zookeeper] Encryption - node-node &amp; client-node</title>
    <url>/Zookeeper-Encryption3/</url>
    <content><![CDATA[<h2 id="Node-Node-Encryption">Node-Node Encryption</h2>
<p>節點到節點加密使用 SSL 保護 ZooKeeper server 間的內部連接，加密完全在 ZooKeeper 節點之間完成。默認情況下，Quorom TLS 是禁用的，必須通過編輯所有 server 中的 <code>zoo.cfg</code> 文件來啟用：</p>
<span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># zoo.cfg</span><br><span class="line">sslQuorum=true</span><br><span class="line">serverCnxnFactory=org.apache.zookeeper.server.NettyServerCnxnFactory</span><br><span class="line">ssl.quorum.keyStore.location=&lt;path to keystore&gt;</span><br><span class="line">ssl.quorum.keyStore.password=&lt;password&gt;</span><br><span class="line">ssl.quorum.trustStore.location=&lt;path to truststore&gt;</span><br><span class="line">ssl.quorum.trustStore.password=&lt;password&gt;</span><br></pre></td></tr></table></figure>
<p>接著重新啟用 zookeeper 集群，查看 Zookeeper server log 出現以下訊息，便可以使用 ssl 在 server 間通訊。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INFO [main:QuorumPeer@1789] - Using TLS encrypted quorum communication INFO [main:QuorumPeer@1797] - Port unification disabled ... INFO [QuorumPeerListener:QuorumCnxManager$Listener@877] - Creating TLS-only quorum server socket</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="Client-Node-Encryption">Client-Node Encryption</h2>
<ol>
<li>針對 server 端，編輯 <a href="http://zkServer.sh">zkServer.sh</a> 檔案，加入以下環境變數</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export SERVER_JVMFLAGS=&quot;</span><br><span class="line">-Dzookeeper.serverCnxnFactory=org.apache.zookeeper.server.NettyServerCnxnFactory</span><br><span class="line">-Dzookeeper.ssl.keyStore.location=&lt;path to keystore&gt;</span><br><span class="line">-Dzookeeper.ssl.keyStore.password=&lt;password&gt;</span><br><span class="line">-Dzookeeper.ssl.trustStore.location=&lt;path to truststore&gt;</span><br><span class="line">-Dzookeeper.ssl.trustStore.password=&lt;password&gt;&quot;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>編輯 zoo.cfg 檔案，加入 secureClientPort</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">secureClientPort=2281</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>針對 client 端，以 zkCli 為例，編輯 <a href="http://zkCli.sh">zkCli.sh</a> 加入以下環境變數</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export CLIENT_JVMFLAGS=&quot;</span><br><span class="line">-Dzookeeper.clientCnxnSocket=org.apache.zookeeper.ClientCnxnSocketNetty </span><br><span class="line">-Dzookeeper.client.secure=true </span><br><span class="line">-Dzookeeper.ssl.keyStore.location=&lt;path to keystore&gt;</span><br><span class="line">-Dzookeeper.ssl.keyStore.password=&lt;password&gt;</span><br><span class="line">-Dzookeeper.ssl.trustStore.location=&lt;path to truststore&gt;</span><br><span class="line">-Dzookeeper.ssl.trustStore.password=&lt;password&gt;&quot;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>重啟 Zookeeper，並透過 secure client port 使用 zkCli 連進 Zookeeper server。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ /opt/zookeeper/bin/zkServer.sh restart /opt/zookeeper/conf/zoo.cfg</span><br><span class="line">$ /opt/zookeeper/binzkServer -server 10.1.5.31:2281</span><br></pre></td></tr></table></figure>
<h2 id="補充：如何使用-ssl-在-zkCLi-中使用-dynamic-reconfig-的功能">補充：如何使用 ssl 在 zkCLi 中使用 dynamic reconfig 的功能</h2>
<p>在這篇<a href="https://ulahsieh.github.io/Zookeeper-Dynamic-Configuration.html">文章</a>中有提到 reconfig 存取的 znode 需要有 ACL 讀寫的權限或是 super user 的身分。<br>
透過 ssl 使用 zkCLi 加密連線登入時，需要使用 <code>X509AuthenticationProvider.superUser</code> 參數，值設為 X500 principal name，將 x509 金鑰使用者加入 super user。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># zoo.cfg</span><br><span class="line">-Dzookeeper.X509AuthenticationProvider.superUser=CN=pc31</span><br></pre></td></tr></table></figure>
<h6 id="Reference">Reference</h6>
<ul>
<li><a href="https://zookeeper.apache.org/doc/r3.6.1/zookeeperAdmin.html#Quorum+TLS">https://zookeeper.apache.org/doc/r3.6.1/zookeeperAdmin.html#Quorum+TLS</a></li>
<li><a href="https://cwiki.apache.org/confluence/display/ZOOKEEPER/ZooKeeper+SSL+User+Guide">https://cwiki.apache.org/confluence/display/ZOOKEEPER/ZooKeeper+SSL+User+Guide</a></li>
</ul>
]]></content>
      <categories>
        <category>Big Data</category>
        <category>Zookeeper</category>
      </categories>
      <tags>
        <tag>Zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>[Zookeeper] fsync &amp; EndOfStreamException 導致 zookeeper shutdown</title>
    <url>/Zookeeper-error/</url>
    <content><![CDATA[<h2 id="問題">問題</h2>
<p>Zookeeper 及 Kafka 在參數保持預設的狀況下，做壓力測試時 Zookeeper 會發生以下錯誤訊息：</p>
<span id="more"></span>
<ol>
<li>fsync-ing the write ahead log in SyncThread</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2020-07-24 08:24:15,665 [myid:1] - WARN [SyncThred:2:FileTxnLog@408] - fsync-ing the write ahead log in SyncThread:3 took 8154ms which will adversely effect operation latency.File size is 67108880 bytes. See the ZooKeeper troubleshooting guide</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>EndOfStreamException: Unable to read additional data from client, it probably closed the socket</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2020-07-24 08:26:38,929 [myid:1] - WARN  [NIOWorkerThread-2:NIOServerCnxn@364] - Unexpected exception</span><br><span class="line">EndOfStreamException: Unable to read additional data from client, it probably closed the socket: address = /10.1.5.33:51856, session = 0x200150baa0a0004</span><br><span class="line">org.apache.zookeeper.server.NIOServerCnxn.handleFailedRead(NIOServerCnxn.java:163)</span><br><span class="line">org.apache.zookeeper.server.NIOServerCnxn.doIO(NIOServerCnxn.java:326)</span><br><span class="line">org.apache.zookeeper.server.NIOServerCnxnFactory$IOWorkRequest.doWork(NIOServerCnxnFactory.java:522)</span><br><span class="line">org.apache.zookeeper.server.WorkerService$ScheduledWorkRequest.run(WorkerService.java:154)</span><br><span class="line">java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</span><br><span class="line">java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</span><br><span class="line"> at java.lang.Thread.run(Thread.java:748)</span><br><span class="line">2020-07-24 08:26:48,440 [myid:1] - INFO  [NIOWorkerThread-3:Learner@137] - Revalidating client: 0x200150baa0a0004</span><br></pre></td></tr></table></figure>
<p>出現後通常會伴隨 Zookeeper 集群 shutdown，雖然過一段時間後即群會自動回復，但是整體性能會大幅下降。</p>
<h2 id="配置">配置</h2>
<p>先說明一下機器環境及壓力測試條件：</p>
<h4 id="環境">環境</h4>
<p>CPU 24 cores<br>
RAM 256 GB<br>
網卡 10 GB<br>
共三台 server 各跑一個 Zookeeper 以及一個 kafka container。</p>
<h4 id="測試">測試</h4>
<p>模擬 10 個 client，每個 clinet 丟 5000 萬筆訊息，每筆訊息大小為 1K，Kafka topic 的分區數及副本數都設為 3。</p>
<h2 id="解決方法">解決方法</h2>
<ol>
<li>session timeout<br>
問題的原因在於，配置的超時時間太短，Zookeeper 沒有讀完 Consumer (這裡指 Kafka) 的數據，連接就被 Consumer斷開了。<br>
所以在 Kafka 的 server.properties 文件中將針對 Zookeeper 的超時連接屬性的值調大一點，例如 :</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># server.properties</span><br><span class="line">zookeeper.session.timeout.ms=500000</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>fysnc<br>
發生原因是因為 ZooKeeper 將數據 write ahead log(WAL) 寫入磁碟的速度過慢，導致 ZooKeeper 節點間 heartbeat (follower 需與同步 leader) 超時。<br>
根本解決的方式是掛載新的硬碟到 Zookeeper 節點機器上，並建議將應用如 Kafka 與 Zookeeper 的機器分開，提高磁碟 IO 性能。<br>
折衷處理方式則是提高 Zookeeper/config/zoo.cfg 中<strong>tickTime</strong> 以及 <strong>fsync.warningthresholdms</strong> 參數。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># zoo.cfg</span><br><span class="line">tickTime=4000</span><br><span class="line">fsync.warningthresholdms=10000</span><br></pre></td></tr></table></figure>
<h3 id="補充">補充</h3>
<ul>
<li>Zookeeper 儲存機制<br>
ZooKeeper 主要是在記憶體中維護數據，但每個改變都會被寫入一個在存儲介質上的持久 WAL（Write Ahead Log）。當一個服務故障時，它能夠通過回放 WAL 恢復之前的狀態。為了防止 WAL 無限制的增長，ZooKeeper 服務會定期的將記憶體狀態快照保存到存儲介質。這些快照能夠直接加載到內存中，所有在這個快照之前的 WAL 條目都可以被安全的丟棄。</li>
<li>fsync.warningthresholdms 參數<br>
用於配置 Zookeeper 進行 WAL fsync 操作時消耗時間的報警閾值。一旦 fsync 操作消耗的時間大於該參數指定的值，就在日誌中打印出報警日誌。</li>
</ul>
<h6 id="Reference">Reference</h6>
<p>[1] <a href="https://zookeeper.apache.org/doc/r3.4.10/zookeeperAdmin.html">https://zookeeper.apache.org/doc/r3.4.10/zookeeperAdmin.html</a><br>
[2] <a href="https://blog.csdn.net/levy_cui/article/details/52242715?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.channel_param">https://blog.csdn.net/levy_cui/article/details/52242715?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.channel_param</a><br>
[3] <a href="https://v1-16.docs.kubernetes.io/zh/docs/tutorials/stateful-application/zookeeper/">https://v1-16.docs.kubernetes.io/zh/docs/tutorials/stateful-application/zookeeper/</a></p>
]]></content>
      <categories>
        <category>Big Data</category>
        <category>Zookeeper</category>
      </categories>
      <tags>
        <tag>zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>[Docker] 在不同電腦中傳 Docker image</title>
    <url>/copy-docker-image-to-different-host/</url>
    <content><![CDATA[<p>通常 docker image 都會放在公開的 repository DockerHub 或是私有的 docker registry 上供使用者 pull，但如果沒有打算公開到網路上或是無架設 repo 的需求，又要在別台電腦上使用 build 好的 docker image 時，就需要使用備份的方式傳遞 image。</p>
<span id="more"></span>
<h3 id="儲存並壓縮-image">儲存並壓縮 image</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker save -o filename.tar dockerImage</span><br></pre></td></tr></table></figure>
<ul>
<li>o: output，輸出檔案</li>
</ul>
<p><img src="https://imgur.com/7ybCElS.png" alt=""></p>
<h3 id="傳到別台電腦上">傳到別台電腦上</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pscp -scp filename.tar &lt;username&gt;@&lt;ip&gt;:&lt;path&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>scp：use scp (secure copy) protocol</li>
</ul>
<h3 id="在目的地將檔案-load-到-docker-中">在目的地將檔案 load 到 docker 中</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker load -i filename.tar</span><br></pre></td></tr></table></figure>
<ul>
<li>i: import，輸入檔案</li>
</ul>
<p><img src="https://imgur.com/ui0nEhc.png" alt=""></p>
<h6 id="Reference">Reference</h6>
<ul>
<li><a href="https://stackoverflow.com/questions/23935141/how-to-copy-docker-images-from-one-host-to-another-without-using-a-repository">https://stackoverflow.com/questions/23935141/how-to-copy-docker-images-from-one-host-to-another-without-using-a-repository</a></li>
</ul>
]]></content>
      <categories>
        <category>DevOps</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>[Kubernetes] 在容器裡 curl Kubernetes API server</title>
    <url>/curl-Kubernetes-API-server-within-Pod/</url>
    <content><![CDATA[<p>連接 k8s 的 api-server 有三種方式：</p>
<ol>
<li>Kubernetes Node 通過 kubectl proxy 中轉連接</li>
<li>通過授權驗證直接連接，例如 kubectl 和各種 client 就是這種情況</li>
<li>容器內部通過 ServiceAccount 連接</li>
</ol>
<p>本文以第三種情況作範例。</p>
<span id="more"></span>
<h3 id="Kubernetes-API-Server">Kubernetes API Server</h3>
<p>在 Kubernetes 集群被創建時，預設會在 default namespace 中創建 kubernetes 的服務，用於訪問 Kubernetes apiserver。因此，Pod 之間可以直接使用 kubernetes.default.svc 主機名來查詢 API server。<br>
<img src="https://imgur.com/DNlD28U.png" alt=""></p>
<h3 id="Service-Account">Service Account</h3>
<p>ServiceAccount 是給執行在 Pod 的程式使用的身份認證，給 Pod 容器的程式訪問 API Server 時使用；ServiceAccount 僅侷限它所在的 namespace，每個 namespace 建立時都會自動建立一個 default service account；建立 Pod 時，如果沒有指定 Service Account，Pod 則會使用 default Service Account。<br>
<img src="https://imgur.com/YPM8C0A.png" alt=""></p>
<h3 id="Service-Account-Secret">Service Account Secret</h3>
<p>SA 對應的 Secret 會自動掛載到 Pod 的 /var/run/secrets/kubernetes.io/serviceaccount/ 目錄中(包含 token、ca.crt、namespace)。<br>
<img src="https://imgur.com/cDSpKGI.png" alt=""></p>
<h3 id="創建-Role-Role-Binding">創建 Role &amp; Role Binding</h3>
<p>如果直接使用預設的 sa 訪問 api server 會遇到權限不足的問題<br>
<img src="https://imgur.com/vyPzlfl.png" alt=""><br>
此時需要建立角色開放存取 api 指定路徑的權限並綁定角色到 SA 上</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># role&amp;binding.yaml</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">default-role</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">converg-it</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">pods</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">pods/log</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">default-roldbinding</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">converg-it</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">default-role</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl -n converg-it apply -f role&amp;binding.yaml</span><br><span class="line">role.rbac.authorization.k8s.io/default-role created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/default-roldbinding created</span><br></pre></td></tr></table></figure>
<h3 id="curl-API">curl API</h3>
<p>進入容器環境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl exec -it -n converg-it converg-it-adapter-oracle-8575f54dc6-7lnv6 -- bash</span><br></pre></td></tr></table></figure>
<p>get target API</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt --header &quot;Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)&quot; -X GET https://kubernetes.default.svc/api/v1/namespaces/converg-it/pods/converg-it-adapter-oracle-8575f54dc6-7lnv6/log?sinceSeconds=300</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/1aEtzgL.png" alt=""></p>
<h3 id="Reference">Reference</h3>
<ul>
<li><a href="https://kubernetes.io/docs/tasks/run-application/access-api-from-pod/">https://kubernetes.io/docs/tasks/run-application/access-api-from-pod/</a></li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>[Docker] docker build network error</title>
    <url>/docker-build-network-error/</url>
    <content><![CDATA[<p>在 build docker image 時發生 <code>network error</code> 的錯誤</p>
<span id="more"></span>
<h4 id="Dockerfile">Dockerfile</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM golang:1.15.3-alpine3.12 AS builder</span><br><span class="line">WORKDIR /</span><br><span class="line">COPY . .</span><br><span class="line"></span><br><span class="line">RUN apk update &amp;&amp; apk add --update git</span><br><span class="line">RUN CGO_ENABLED=0 go build -installsuffix cgo -o /it-preprocess-adapter ./cmd/it-preprocess-adapter/it-preprocess-adapter.go</span><br><span class="line"></span><br><span class="line">FROM alpine:3.12</span><br><span class="line">COPY --from=builder /it-preprocess-adapter /it-preprocess-adapter</span><br><span class="line">COPY ./configs /configs</span><br><span class="line">COPY ./settings /settings</span><br><span class="line">COPY ./build/docker/startup.sh /startup.sh</span><br><span class="line"></span><br><span class="line">RUN chmod 2777 -R /settings</span><br><span class="line">#USER 1001</span><br><span class="line"></span><br><span class="line">CMD [&quot;sh&quot;, &quot;/startup.sh&quot;]</span><br></pre></td></tr></table></figure>
<h4 id="Docker-build-error">Docker build error</h4>
<p><img src="https://imgur.com/QCOL9ZO.png" alt=""></p>
<h4 id="Solution">Solution</h4>
<p>重啟 docker 就解決了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>
<h6 id="Reference">Reference</h6>
<p><a href="https://github.com/laradock/laradock/issues/2551">https://github.com/laradock/laradock/issues/2551</a></p>
]]></content>
      <categories>
        <category>DevOps</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>[Docker] 使用 docker-compose 建立 GitLab (w/ https)</title>
    <url>/docker-compose-GitLab-https/</url>
    <content><![CDATA[<h2 id="安裝-docker-docker-compose">安裝 docker &amp; docker compose</h2>
<p>請參考之前的筆記</p>
<ul>
<li><a href="https://ulahsieh.github.io/Install-Docker-Docker-Compose-on-CentOS7.html">Install Docker &amp; Docker Compose on CentOS</a></li>
<li><a href="https://ulahsieh.github.io/Docker-Install-Docker-Docker-Compose-on-Ubuntu18-04.html">Install Docker &amp; Docker Compose on Ubuntu18.04</a></li>
</ul>
<span id="more"></span>
<h2 id="準備自簽憑證">準備自簽憑證</h2>
<h3 id="建立-ssl-conf-設定檔">建立 ssl.conf 設定檔</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[req]</span><br><span class="line">prompt = no</span><br><span class="line">default_md = sha256</span><br><span class="line">default_bits = 2048</span><br><span class="line">distinguished_name = dn</span><br><span class="line">x509_extensions = v3_req</span><br><span class="line"></span><br><span class="line">[dn]</span><br><span class="line">C = TW</span><br><span class="line">ST = Taiwan</span><br><span class="line">L = Taipei</span><br><span class="line">O = ABC Inc.</span><br><span class="line">OU = IT Department</span><br><span class="line">emailAddress = ulahsieh@abc.com</span><br><span class="line">CN = 10.1.5.8</span><br><span class="line"></span><br><span class="line">[v3_req]</span><br><span class="line">subjectAltName = @alt_names</span><br><span class="line"></span><br><span class="line">[alt_names]</span><br><span class="line">DNS.1 = 10.1.5.8</span><br><span class="line">IP.1 = 10.1.5.8</span><br></pre></td></tr></table></figure>
<p><code>[dn]</code> 區段 (<a href="https://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol">Distinguished Name</a>) 為憑證的相關資訊</p>
<ul>
<li>C: 國碼，臺灣是 TW</li>
<li>ST: 州</li>
<li>L: 地區</li>
<li>O: 組織名稱</li>
<li>OU: 部門名稱</li>
<li>emailAddress: E-Mail</li>
<li>CN: 憑證名稱，通常填域名名稱</li>
</ul>
<p><code>alt_names</code> 用來設定 SSL 憑證的域名。可以設定很多組，也可以把區網的 IP 填上去。</p>
<h3 id="產生自簽憑證與私密金鑰">產生自簽憑證與私密金鑰</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl req -x509 -new -nodes -sha256 -utf8 -days 3650 -newkey rsa:2048 -keyout gitlab.key -out gitlab.crt -config ssl.conf</span><br></pre></td></tr></table></figure>
<p>產生 stronger DHE parameters 加強 server 安全性</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl dhparam -out dhparam.pem 2048</span><br></pre></td></tr></table></figure>
<p>完成後，總共會產生出兩個檔案，分別是：</p>
<ol>
<li><code>server.key</code> (私密金鑰) (使用 PEM 格式) (無密碼保護)</li>
<li><code>server.crt</code> (憑證檔案) (使用 PEM 格式)</li>
<li><code>dhparam.pem</code></li>
</ol>
<h3 id="將憑證移到指定要掛載的-volume-路徑下的-certs-資料夾下">將憑證移到指定要掛載的 volume 路徑下的 certs 資料夾下</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir -p /srv/docker/gitlab/gitlab/certs</span><br><span class="line">$ cp gitlab.key /srv/docker/gitlab/gitlab/certs/</span><br><span class="line">$ cp gitlab.crt /srv/docker/gitlab/gitlab/certs/</span><br><span class="line">$ cp dhparam.pem /srv/docker/gitlab/gitlab/certs/</span><br><span class="line">$ chmod 400 /srv/docker/gitlab/gitlab/certs/gitlab.key <span class="comment"># 將金鑰設為唯讀確保安全性</span></span><br></pre></td></tr></table></figure>
<h2 id="開始安裝-GitLab">開始安裝 GitLab</h2>
<h3 id="下載-docker-compose-yaml-檔案">下載 docker-compose.yaml 檔案</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/sameersbn/docker-gitlab/master/docker-compose.yml</span><br></pre></td></tr></table></figure>
<h3 id="修改設定">修改設定</h3>
<p>請注意下方 gitlab 的 volumes 設定，因為 gitlab container 內部會預設到 <code>~/data/certs</code> 下找憑證 ，故使用指定的 bind mount path <code>/srv/docker/gitlab/gitlab</code>將前面放到 <code>certs</code> 目錄下的金鑰與證書 mount 進 container。</p>
<p>另外此 image 也提供三個參數指定金鑰與證書位置：</p>
<ul>
<li>SSL_KEY_PATH</li>
<li>SSL_CERTIFICATE_PATH</li>
<li>SSL_DHPARAM_PATH</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2.3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:6.2</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--loglevel</span> <span class="string">warning</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/srv/docker/gitlab/redis:/data:Z</span> <span class="comment"># 前面可以指定本機端要 mount 的路徑, 或取一個 volume 名字</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">postgresql:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">sameersbn/postgresql:12-20200524</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/srv/docker/gitlab/postgresql:/var/lib/postgresql:Z</span> <span class="comment"># 前面可以指定本機端要 mount 的路徑, 或取一個 volume 名字</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DB_USER=gitlab</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DB_PASS=password</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DB_NAME=gitlabhq_production</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DB_EXTENSION=pg_trgm,btree_gist</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">gitlab:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">sameersbn/gitlab:14.3.3</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">postgresql</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span> <span class="comment">## 冒號前面的端口改為本機想要使用的端口</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;10022:22&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;443:443&quot;</span> <span class="comment">## 如果要使用 https, container 端口要加上 443, 對應出冒號前面想要的本機端口</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/srv/docker/gitlab/gitlab:/home/git/data:Z</span> <span class="comment"># 前面可以指定本機端要 mount 的路徑, 或取一個 volume 名字</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;/usr/local/sbin/healthcheck&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">5m</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">3</span></span><br><span class="line">      <span class="attr">start_period:</span> <span class="string">5m</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DEBUG=false</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DB_ADAPTER=postgresql</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DB_HOST=postgresql</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DB_PORT=5432</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DB_HOST=postgresql</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DB_PORT=5432</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DB_USER=gitlab</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DB_PASS=password</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DB_NAME=gitlabhq_production</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">REDIS_HOST=redis</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">REDIS_PORT=6379</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">TZ=Asia/Taipei</span> <span class="comment"># 指定時區</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_TIMEZONE=Taipei</span> <span class="comment"># 指定時區</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_HTTPS=true</span> <span class="comment"># 如果需要使用 HTTPS，需要設為 true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">SSL_SELF_SIGNED=true</span> <span class="comment"># 如果使用自簽証書，需要設為 ture</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_HOST=10.1.5.8</span> <span class="comment"># 改為自己的域名, 或是 IP Address</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_PORT=443</span> <span class="comment"># 若有啟用 HTTPS 則設為 HTTPS 本機使用的端口</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_SSH_PORT=10022</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_RELATIVE_URL_ROOT=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_SECRETS_DB_KEY_BASE=long-and-random-alphanumeric-string</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_SECRETS_SECRET_KEY_BASE=long-and-random-alphanumeric-string</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_SECRETS_OTP_KEY_BASE=long-and-random-alphanumeric-string</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 設定 root email &amp; password, 用於第一次以 administrator 登入</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_ROOT_PASSWORD=nexdata.com</span> <span class="comment"># 請注意密碼需要至少八碼</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_ROOT_EMAIL=admin@nexdata.com</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_NOTIFY_ON_BROKEN_BUILDS=true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_NOTIFY_PUSHER=false</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_EMAIL=notifications@example.com</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_EMAIL_REPLY_TO=noreply@example.com</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_INCOMING_EMAIL_ADDRESS=reply@example.com</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_BACKUP_SCHEDULE=daily</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GITLAB_BACKUP_TIME=01:00</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># SMTP 用於發送郵件 (忘記密碼、通知等)</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">SMTP_ENABLED=false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">SMTP_DOMAIN=www.example.com</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">SMTP_HOST=smtp.gmail.com</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">SMTP_PORT=587</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">SMTP_USER=mailer@example.com</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">SMTP_PASS=password</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">SMTP_STARTTLS=true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">SMTP_AUTHENTICATION=login</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># IMAP 用於接收郵件</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">IMAP_ENABLED=false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">IMAP_HOST=imap.gmail.com</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">IMAP_PORT=993</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">IMAP_USER=mailer@example.com</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">IMAP_PASS=password</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">IMAP_SSL=true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">IMAP_STARTTLS=false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 下面是各種用於通過 GITHUB 等平台授權登錄設定</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_ENABLED=false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_AUTO_SIGN_IN_WITH_PROVIDER=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_ALLOW_SSO=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_BLOCK_AUTO_CREATED_USERS=true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_AUTO_LINK_LDAP_USER=false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_AUTO_LINK_SAML_USER=false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_EXTERNAL_PROVIDERS=</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_CAS3_LABEL=cas3</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_CAS3_SERVER=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_CAS3_DISABLE_SSL_VERIFICATION=false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_CAS3_LOGIN_URL=/cas/login</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_CAS3_VALIDATE_URL=/cas/p3/serviceValidate</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_CAS3_LOGOUT_URL=/cas/logout</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_GOOGLE_API_KEY=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_GOOGLE_APP_SECRET=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_GOOGLE_RESTRICT_DOMAIN=</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_FACEBOOK_API_KEY=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_FACEBOOK_APP_SECRET=</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_TWITTER_API_KEY=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_TWITTER_APP_SECRET=</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_GITHUB_API_KEY=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_GITHUB_APP_SECRET=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_GITHUB_URL=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_GITHUB_VERIFY_SSL=</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_GITLAB_API_KEY=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_GITLAB_APP_SECRET=</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_BITBUCKET_API_KEY=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_BITBUCKET_APP_SECRET=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_BITBUCKET_URL=</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_SAML_ASSERTION_CONSUMER_SERVICE_URL=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_SAML_IDP_CERT_FINGERPRINT=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_SAML_IDP_SSO_TARGET_URL=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_SAML_ISSUER=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_SAML_LABEL=&quot;Our</span> <span class="string">SAML</span> <span class="string">Provider&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_SAML_NAME_IDENTIFIER_FORMAT=urn:oasis:names:tc:SAML:2.0:nameid-format:transient</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_SAML_GROUPS_ATTRIBUTE=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_SAML_EXTERNAL_GROUPS=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_SAML_ATTRIBUTE_STATEMENTS_EMAIL=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_SAML_ATTRIBUTE_STATEMENTS_NAME=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_SAML_ATTRIBUTE_STATEMENTS_USERNAME=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_SAML_ATTRIBUTE_STATEMENTS_FIRST_NAME=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_SAML_ATTRIBUTE_STATEMENTS_LAST_NAME=</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_CROWD_SERVER_URL=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_CROWD_APP_NAME=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_CROWD_APP_PASSWORD=</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_AUTH0_CLIENT_ID=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_AUTH0_CLIENT_SECRET=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_AUTH0_DOMAIN=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_AUTH0_SCOPE=</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_AZURE_API_KEY=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_AZURE_API_SECRET=</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">OAUTH_AZURE_TENANT_ID=</span></span><br></pre></td></tr></table></figure>
<h3 id="啟動-docker-compose">啟動 docker-compose</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker-compose up -d</span><br></pre></td></tr></table></figure>
<p>啟動後可以進入 logs 看使否有成功跑起服務，建立過程大概要等三到五分鐘左右</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker-compose logs -f gitlab</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/ET4o1pg.png" alt=""></p>
<p><img src="https://imgur.com/lRy0kBG.png" alt=""></p>
<p>完成後可以打開瀏覽器前往 GitLab，若有開啟 https 的設定，則瀏覽器會自動跳轉 redirect 到 https，使用在 yaml 檔設定的 root email &amp; password 登入。</p>
<p><img src="https://imgur.com/d9vuES3.png" alt=""></p>
<p><img src="https://imgur.com/sRn09l0.png" alt=""></p>
<h5 id="Reference">Reference</h5>
<ul>
<li><a href="https://github.com/sameersbn/docker-gitlab#installation-of-the-ssl-certificates">sameersbn github &amp; installation of the ssl certificates</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10204317">https://ithelp.ithome.com.tw/articles/10204317</a></li>
<li><a href="https://blog.miniasp.com/post/2019/02/25/Creating-Self-signed-Certificate-using-OpenSSL">如何使用 OpenSSL 建立開發測試用途的自簽憑證 (Self-Signed Certificate)<br>
</a></li>
</ul>
]]></content>
      <categories>
        <category>DevOps</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>GitLab</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 docker compose 安裝 kafka</title>
    <url>/docker-compose-install-kafka/</url>
    <content><![CDATA[<h2 id="安裝單節點-Kafka">安裝單節點 Kafka</h2>
<h3 id="1-準備-docker-compose-yaml-檔案">1. 準備 docker-compose.yaml 檔案</h3>
<span id="more"></span>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">zookeeper:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">confluentinc/cp-zookeeper:latest</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">ZOOKEEPER_CLIENT_PORT:</span> <span class="number">2181</span></span><br><span class="line">      <span class="attr">ZOOKEEPER_TICK_TIME:</span> <span class="number">2000</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">22181</span><span class="string">:2181</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./zoo/data:/var/lib/zookeeper/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./zoo/log:/var/lib/zookeeper/log</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">kafka:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">confluentinc/cp-kafka:latest</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zookeeper</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">29092</span><span class="string">:29092</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./kafka/data:/var/lib/kafka/data</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">KAFKA_BROKER_ID:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">KAFKA_ZOOKEEPER_CONNECT:</span> <span class="string">zookeeper:2181</span></span><br><span class="line">      <span class="attr">KAFKA_ADVERTISED_LISTENERS:</span> <span class="string">PLAINTEXT://kafka:9092,PLAINTEXT_HOST://10.13.1.100:29092</span></span><br><span class="line">      <span class="attr">KAFKA_LISTENER_SECURITY_PROTOCOL_MAP:</span> <span class="string">PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT</span></span><br><span class="line">      <span class="attr">KAFKA_INTER_BROKER_LISTENER_NAME:</span> <span class="string">PLAINTEXT</span></span><br><span class="line">      <span class="attr">KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<ul>
<li>在使用 docker 或是公有雲部屬 kafka 時，需要用到 <code>KAFKA_ADVERTISED_LISTENER</code> 參數。其中第一個值是真正建立 kafka broker 用的，第二個數值是用於對外發布的服務端口。</li>
<li><code>KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR</code> 用來配置 <code>__consumer_offsets</code> 副本數。</li>
</ul>
<h3 id="2-啟動-container">2. 啟動 container</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br><span class="line">Creating network &quot;kafka_default&quot; with the default driver</span><br><span class="line">Creating kafka_zookeeper_1 ... done</span><br><span class="line">Creating kafka_kafka_1     ... done</span><br></pre></td></tr></table></figure>
<h3 id="3-查看服務">3. 查看服務</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps</span><br><span class="line">CONTAINER ID   IMAGE                              COMMAND                  CREATED          STATUS          PORTS                                                             NAMES</span><br><span class="line">9afa79af69e7   confluentinc/cp-kafka:latest       &quot;/etc/confluent/dock…&quot;   39 minutes ago   Up 39 minutes   9092/tcp, 0.0.0.0:29092-&gt;29092/tcp, :::29092-&gt;29092/tcp           kafka_kafka_1</span><br><span class="line">2445639c8af9   confluentinc/cp-zookeeper:latest   &quot;/etc/confluent/dock…&quot;   39 minutes ago   Up 39 minutes   2888/tcp, 3888/tcp, 0.0.0.0:22181-&gt;2181/tcp, :::22181-&gt;2181/tcp   kafka_zookeeper_1</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="4-檢查運作">4. 檢查運作</h3>
<p>使用下載 kafka 套件提供的 script 測試</p>
<ul>
<li>list topic，若無錯誤訊息則代表建立並連線 kafka broker 成功。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@ula bin]# ./kafka-topics.sh --list --bootstrap-server 10.13.1.100:29092</span><br><span class="line"></span><br><span class="line">[root@ula bin]#</span><br></pre></td></tr></table></figure>
<ul>
<li>produce message</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@ula bin]# ./kafka-console-producer.sh --bootstrap-server 10.13.1.100:29092 --topic test</span><br><span class="line">&gt;life</span><br><span class="line">&gt;is</span><br><span class="line">&gt;what</span><br><span class="line">&gt;you</span><br><span class="line">&gt;make</span><br><span class="line">&gt;it</span><br><span class="line">&gt;!</span><br><span class="line">&gt;^C[root@ula bin]#</span><br></pre></td></tr></table></figure>
<ul>
<li>consume message</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@ula bin]#</span><br><span class="line">[root@ula bin]# ./kafka-console-consumer.sh --bootstrap-server 10.13.1.100:29092 --topic test --from-beginning</span><br><span class="line">life</span><br><span class="line">is</span><br><span class="line">what</span><br><span class="line">you</span><br><span class="line">make</span><br><span class="line">it</span><br><span class="line">!</span><br><span class="line">^CProcessed a total of 7 messages</span><br></pre></td></tr></table></figure>
<h2 id="安裝-Kafka-Cluster">安裝 Kafka Cluster</h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">zookeeper-1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">confluentinc/cp-zookeeper:latest</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">ZOOKEEPER_CLIENT_PORT:</span> <span class="number">2181</span></span><br><span class="line">      <span class="attr">ZOOKEEPER_TICK_TIME:</span> <span class="number">2000</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">22181</span><span class="string">:2181</span></span><br><span class="line">  <span class="attr">zookeeper-2:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">confluentinc/cp-zookeeper:latest</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">ZOOKEEPER_CLIENT_PORT:</span> <span class="number">2181</span></span><br><span class="line">      <span class="attr">ZOOKEEPER_TICK_TIME:</span> <span class="number">2000</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">32181</span><span class="string">:2181</span></span><br><span class="line">  <span class="attr">kafka-1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">confluentinc/cp-kafka:latest</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zookeeper-1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zookeeper-2</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">29092</span><span class="string">:29092</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">KAFKA_BROKER_ID:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">KAFKA_ZOOKEEPER_CONNECT:</span> <span class="string">zookeeper-1:2181,zookeeper-2:2181</span></span><br><span class="line">      <span class="attr">KAFKA_ADVERTISED_LISTENERS:</span> <span class="string">PLAINTEXT://kafka-1:9092,PLAINTEXT_HOST://10.13.1.100:29092</span></span><br><span class="line">      <span class="attr">KAFKA_LISTENER_SECURITY_PROTOCOL_MAP:</span> <span class="string">PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT</span></span><br><span class="line">      <span class="attr">KAFKA_INTER_BROKER_LISTENER_NAME:</span> <span class="string">PLAINTEXT</span></span><br><span class="line">      <span class="attr">KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">kafka-2:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">confluentinc/cp-kafka:latest</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zookeeper-1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zookeeper-2</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">39092</span><span class="string">:39092</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">KAFKA_BROKER_ID:</span> <span class="number">2</span></span><br><span class="line">      <span class="attr">KAFKA_ZOOKEEPER_CONNECT:</span> <span class="string">zookeeper-1:2181,zookeeper-2:2181</span></span><br><span class="line">      <span class="attr">KAFKA_ADVERTISED_LISTENERS:</span> <span class="string">PLAINTEXT://kafka-2:9092,PLAINTEXT_HOST://10.13.1.100:39092</span></span><br><span class="line">      <span class="attr">KAFKA_LISTENER_SECURITY_PROTOCOL_MAP:</span> <span class="string">PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT</span></span><br><span class="line">      <span class="attr">KAFKA_INTER_BROKER_LISTENER_NAME:</span> <span class="string">PLAINTEXT</span></span><br><span class="line">      <span class="attr">KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Big Data</category>
        <category>Kafka</category>
      </categories>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>[Git] 在同一台電腦中設置多個 Git 帳號</title>
    <url>/git-multi-account/</url>
    <content><![CDATA[<h4 id="為每個帳號產生-ssh-key">為每個帳號產生 ssh key</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;userName@address&quot;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h4 id="產生完畢後，將公鑰放到對應帳號的-github-中">產生完畢後，將公鑰放到對應帳號的 github 中</h4>
<p><img src="https://imgur.com/lNXpiXi.png" alt=""></p>
<h4 id="將新金鑰新增到-SSH-agent-中">將新金鑰新增到 SSH agent 中</h4>
<p>因為作業系統預設只讀取私鑰 id_rsa，為了讓 SSH 識別新的私鑰，需將其新增到 SSH agent中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh-add ~/.ssh/金鑰名稱</span><br></pre></td></tr></table></figure>
<p>如果出現 Could not open a connection to your authentication agent 的錯誤，就試著用以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh-agent bash</span><br><span class="line">$ ssh-add ~/.ssh/金鑰名稱</span><br></pre></td></tr></table></figure>
<div class="warning">
<p>重啟電腦後都需要重新 ssh-add。因為這個命令不會永久性的記住私鑰。使用 ssh-add 會把指定的私鑰新增到 ssh-agent 所管理的一個 session 當中。而 ssh-agent 是一個用於儲存私鑰的臨時性的 session 服務，也就是說當你重啟之後，ssh-agent 服務便會重置，session 會話也會失效。</p>
</div>
<h4 id="解決每次重啟都要-ssh-add-的問題">解決每次重啟都要 ssh-add 的問題</h4>
<p>在 git 安裝目錄下的 etc/bash.bashrc 文件中末加入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eval &quot;$(ssh-agent -s)&quot;</span><br><span class="line">ssh-add ~/.ssh/金鑰名稱</span><br></pre></td></tr></table></figure>
<h4 id="配置多個-ssh-key">配置多個 ssh-key</h4>
<p>修改 <code>~/.ssh/config</code> 文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#default github</span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line">Host github_second</span><br><span class="line">HostName github.com</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_second</span><br></pre></td></tr></table></figure>
<p>其中 <code>Host</code> 為 <code>HostName</code> 的別名。</p>
<h4 id="測試連線">測試連線</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@[Host]</span><br></pre></td></tr></table></figure>
<p>出現</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>
<p>代表連線成功</p>
<h4 id="在專案下設配置使用者">在專案下設配置使用者</h4>
<p>先取消 global</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git config --global --unset user.name</span><br><span class="line">$ git config --global --unset user.email</span><br></pre></td></tr></table></figure>
<p>設置 repo 自己的 user &amp; email</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git config  user.email &quot;xxxx@xx.com&quot;</span><br><span class="line">$ git config  user.name &quot;xxxx&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>clone 遠端資料</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone git@[Host]:UserName/repositoryName</span><br></pre></td></tr></table></figure>
<p>git push</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git remote add origin git@[Host]:UserName/repositoryName.git</span><br><span class="line">$ git add -am &quot;commit msg&quot;</span><br><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure>
<h5 id="Reference">Reference</h5>
<p>[1] <a href="https://segmentfault.com/q/1010000000835302">https://segmentfault.com/q/1010000000835302</a><br>
[2] <a href="https://blog.csdn.net/EsonJohn/article/details/79134665">https://blog.csdn.net/EsonJohn/article/details/79134665</a><br>
[3]  <a href="http://blog.lessfun.com/blog/2014/06/11/two-github-account-in-one-client/">http://blog.lessfun.com/blog/2014/06/11/two-github-account-in-one-client/</a></p>
]]></content>
      <categories>
        <category>DevOps</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>git-ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>[golang]  go mod replace 解决 fork repo 匯入問題</title>
    <url>/go-mod-replace-for-fork-repo/</url>
    <content><![CDATA[<p>開發程式時使用 github 上各大神開發的第三方套件，有時候有自己的額外需求需要進行改造，所以 fork 到自己的 github 修改後，再 import 到自己的專案中。但當在進行構建的時候，報錯如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go get: github.com/bbb/xxx@v1.0.2: parsing go.mod:</span><br><span class="line">        module declares its path as: github.com/aaa/xxx</span><br><span class="line">                but was required as: github.com/bbb/xxx</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="解决方式">解决方式</h3>
<p>使用 replace 將新的 package 去替換另一個 package，他們可以是不同的 package，也可以是同一個 package 的不同版本。<br>
基本語法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go mod edit -replace=old[@v]=new@v</span><br></pre></td></tr></table></figure>
<p>新的 package 後面的 version 不可省略，可以是 release 版本號或是 git 的提交號（commit-id）。 （edit所有操作都需要版本 tag）</p>
<p>也可以直接编辑 go.mod 文件：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">module test</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="number">1.16</span></span><br><span class="line"></span><br><span class="line">require (</span><br><span class="line">	github.com/gin-contrib/cors v1<span class="number">.3</span><span class="number">.1</span></span><br><span class="line">	github.com/gin-gonic/gin v1<span class="number">.7</span><span class="number">.7</span></span><br><span class="line">	github.com/sirupsen/logrus v1<span class="number">.8</span><span class="number">.1</span></span><br><span class="line">	github.com/spf13/viper v1<span class="number">.10</span><span class="number">.1</span></span><br><span class="line">	github.com/tebeka/selenium v0<span class="number">.9</span><span class="number">.9</span></span><br><span class="line">	gopkg.in/alecthomas/kingpin.v2 v2<span class="number">.2</span><span class="number">.6</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">replace github.com/tebeka/selenium =&gt; github.com/ulahsieh/selenium v0<span class="number">.9</span><span class="number">.10</span><span class="number">-0.20220105013444</span>-c7d3f285d0e7</span><br><span class="line"><span class="comment">// 注意版本號是用空格隔開</span></span><br></pre></td></tr></table></figure>
<p>完成後在程式下面跑 <code>go mod tidy</code> 獲取新的套件並取代舊的，就大功告成啦！</p>
<h3 id="Reference">Reference</h3>
<ul>
<li><a href="https://github.com/Bpazy/blog/issues/164">https://github.com/Bpazy/blog/issues/164</a></li>
<li><a href="https://www.cnblogs.com/sunsky303/p/12150575.html">https://www.cnblogs.com/sunsky303/p/12150575.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Programming</category>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>[golang] 使用 tebeka selenium 爬蟲模擬操控網頁</title>
    <url>/golang-tebeka-selenium/</url>
    <content><![CDATA[<p>最近碰到一個需從網頁去擷取圖片的需求，原本拿到的 sample code 是由 python 的 selenium 爬的，但後來發現有大神將此包改寫成 golang <a href="https://github.com/tebeka/selenium">tebeka/selenium</a>，所以就試著改寫看看，在此紀錄一下。</p>
<span id="more"></span>
<h3 id="目標網頁爬取需求">目標網頁爬取需求</h3>
<p><img src="https://imgur.com/xlxg7kZ.png" alt=""><br>
目標網頁是一個爐溫監控的網站，任務是爬取指定產品所經的迴焊爐的生產歷史紀錄。需要模擬的步驟如下</p>
<ol>
<li>查詢頁面需先輸入的參數有：
<ul>
<li>下拉式選單選取線別</li>
<li>文字框時間範圍 （開始與結束）</li>
<li>文字框產品編號</li>
</ul>
</li>
<li>點選查詢按鈕</li>
<li>回傳搜尋結果表格，點選表格的每一列的任意位置/欄位</li>
<li>彈出一個 modal 視窗，內容為被點選列的詳細爐溫圖表<br>
<img src="https://imgur.com/TBkYGVS.png" alt=""></li>
<li>擷取螢幕並裁切圖片到目標範圍存到本機</li>
<li>點選 OK 按鈕以關閉 modal 視窗</li>
<li>繼續點選下列，重複 3～6 步驟，直到表格的最後一列資訊</li>
</ol>
<h3 id="運行環境">運行環境</h3>
<ul>
<li>Ubuntu v20.04</li>
<li>Golang v1.15</li>
<li>Google Chrome v96.0.4664.110</li>
</ul>
<h3 id="事前準備">事前準備</h3>
<p>須在 ubuntu 下載 Chrome 以及相對應的 chromedriver。</p>
<ol>
<li>更新系统</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>安裝相關的必要套件</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libxss1 libappindicator1 libindicator7</span><br><span class="line"># 安裝 xvfb 以便可以用 headless 模式（跑在背景，不開啟瀏覽器）運行 Chrome</span><br><span class="line">sudo apt-get install xvfb</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>下載安裝包</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>安装 chrome</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install dpkg </span><br><span class="line"># 安装chrome，安裝過程中由於缺少一些依賴而報錯是正常的</span><br><span class="line">sudo dpkg -i google-chrome*.deb</span><br><span class="line">#自動安裝上一步缺少的依賴</span><br><span class="line">sudo apt-get install -f</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>下載 chromedriver<br>
確認安裝的 Chrome 版本，並下載與之匹配的 chromedriver。<br>
<img src="https://imgur.com/sO3eqDc.png" alt=""></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -N https://chromedriver.storage.googleapis.com/96.0.4664.110/chromedriver_linux64.zip</span><br><span class="line">unzip chromedriver_linux64.zip</span><br><span class="line"># 移動 driver 到指定資料夾</span><br><span class="line">sudo mv -f /home/ula/Downloads/chromedriver ~</span><br></pre></td></tr></table></figure>
<h3 id="程式碼">程式碼</h3>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;image&quot;</span></span><br><span class="line">	<span class="string">&quot;image/png&quot;</span></span><br><span class="line">	<span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">	<span class="string">&quot;strconv&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/anaskhan96/soup&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/tebeka/selenium&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/tebeka/selenium/chrome&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 1. enable selenium service</span></span><br><span class="line">	opts := []selenium.ServiceOption&#123;</span><br><span class="line">		<span class="comment">//selenium.Output(os.Stderr), // Output debug information to STDERR</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// lauch a webdriver instance</span></span><br><span class="line">	service, err := selenium.NewChromeDriverService(<span class="string">&quot;/home/nexdata/chromedriver&quot;</span>, <span class="number">9515</span>, opts...)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;Error starting the ChromeDriver server: %v&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// delay service shutdown</span></span><br><span class="line">	<span class="keyword">defer</span> service.Stop()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 2. call browser</span></span><br><span class="line">	caps := selenium.Capabilities&#123;</span><br><span class="line">		<span class="string">&quot;browserName&quot;</span>: <span class="string">&quot;chrome&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// set chrome arguments</span></span><br><span class="line">	chromeCaps := chrome.Capabilities&#123;</span><br><span class="line">		Args: []<span class="keyword">string</span>&#123;</span><br><span class="line">			<span class="comment">// &quot;--headless&quot;,   // do not open the browser (run in background)</span></span><br><span class="line">			<span class="string">&quot;--no-sandbox&quot;</span>, <span class="comment">//  allow non-root to execute chrome</span></span><br><span class="line">			<span class="string">&quot;--disable-deb-shm-usage&quot;</span>,</span><br><span class="line">			<span class="comment">// &quot;--window-size=1400,1500&quot;,</span></span><br><span class="line">			<span class="string">&quot;--start-maximized&quot;</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">	caps.AddChrome(chromeCaps)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// connect to the webdriver instance which running locally</span></span><br><span class="line">	wd, err := selenium.NewRemote(caps, <span class="string">&quot;http://127.0.0.1:9515/wd/hub&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;connect to the webDriver faild: %v&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// delay closing Chrome</span></span><br><span class="line">	<span class="keyword">defer</span> wd.Quit()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// connect to the target website</span></span><br><span class="line">	<span class="keyword">if</span> err := wd.Get(<span class="string">&quot;http://10.90.1.100:9000/productionRecordHistory&quot;</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;connect to the reflow server failed: %v&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// select the line</span></span><br><span class="line">	sel_line, _ := wd.FindElement(selenium.ByXPATH, <span class="string">&quot;/html/body/div/div/div/div/section[2]/div[1]/div/div/div[2]/div[1]/select&quot;</span>)</span><br><span class="line">	line, _ := selenium.Select(sel_line)</span><br><span class="line">	line.SelectByValue(<span class="string">&quot;6&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// select start date</span></span><br><span class="line">	start_date, _ := wd.FindElement(selenium.ByXPATH, <span class="string">&quot;/html/body/div/div/div/div/section[2]/div[1]/div/div/div[2]/div[2]/table/tbody/tr[2]/td[1]/div/input&quot;</span>)</span><br><span class="line">	start_date.Clear()</span><br><span class="line">	start_date.SendKeys(<span class="string">&quot;11/28/2021 12:00 PM&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// select end date</span></span><br><span class="line">	end_date, _ := wd.FindElement(selenium.ByXPATH, <span class="string">&quot;/html/body/div/div/div/div/section[2]/div[1]/div/div/div[2]/div[2]/table/tbody/tr[2]/td[2]/div/input&quot;</span>)</span><br><span class="line">	end_date.Clear()</span><br><span class="line">	end_date.SendKeys(<span class="string">&quot;11/30/2021 12:00 AM&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// input serial number</span></span><br><span class="line">	barcode, _ := wd.FindElement(selenium.ByXPATH, <span class="string">&quot;/html/body/div/div/div/div/section[2]/div[1]/div/div/div[2]/table/tbody/tr[2]/td[3]/input&quot;</span>)</span><br><span class="line">	barcode.SendKeys(<span class="string">&quot;TBCBB2039913&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// click query button</span></span><br><span class="line">	query_button, _ := wd.FindElement(selenium.ByXPATH, <span class="string">&quot;/html/body/div/div/div/div/section[2]/div[1]/div/div/div[2]/p/button&quot;</span>)</span><br><span class="line">	<span class="comment">// args := []interface&#123;&#125;&#123;query_button&#125;</span></span><br><span class="line">	<span class="comment">// wd.ExecuteScript(&quot;arguments[0].click();&quot;, args)</span></span><br><span class="line">	query_button.SendKeys(selenium.EnterKey)</span><br><span class="line"></span><br><span class="line">	time.Sleep(time.Duration(<span class="number">3</span>) * time.Second)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// parse to get the number of the column</span></span><br><span class="line">	html_parse, _ := wd.PageSource()</span><br><span class="line">	doc := soup.HTMLParse(html_parse)</span><br><span class="line">	table := doc.Find(<span class="string">&quot;div&quot;</span>, <span class="string">&quot;class&quot;</span>, <span class="string">&quot;react-bs-container-body&quot;</span>).FindAll(<span class="string">&quot;tr&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// enter to the result by the order of the columns</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(table); i++ &#123;</span><br><span class="line">		ele := <span class="string">&quot;/html/body/div/div/div/div/section[2]/div[2]/div/div/div[2]/div[2]/div/div/div/div[2]/div[2]/table/tbody/tr[&quot;</span> + strconv.Itoa(i+<span class="number">1</span>) + <span class="string">&quot;]/td[1]&quot;</span></span><br><span class="line">		enter_modal, _ := wd.FindElement(selenium.ByXPATH, ele)</span><br><span class="line">		enter_modal.Click()</span><br><span class="line">		pop_up, _ := wd.WindowHandles()</span><br><span class="line">		wd.SwitchWindow(pop_up[<span class="number">0</span>])</span><br><span class="line">		<span class="comment">//fmt.Println(pop_up)</span></span><br><span class="line">		time.Sleep(time.Duration(<span class="number">1</span>) * time.Second)</span><br><span class="line">		scrnshot, _ := wd.Screenshot()</span><br><span class="line">		ioutil.WriteFile(<span class="string">&quot;test&quot;</span>+strconv.Itoa(i+<span class="number">1</span>)+<span class="string">&quot;.png&quot;</span>, scrnshot, <span class="number">0666</span>)</span><br><span class="line">		<span class="comment">// get the modal location and size to crop the image</span></span><br><span class="line">		modal, _ := wd.FindElement(selenium.ByClassName, <span class="string">&quot;modal-body&quot;</span>)</span><br><span class="line">		loc, _ := modal.Location()</span><br><span class="line">		sz, _ := modal.Size()</span><br><span class="line">		<span class="comment">// fmt.Println(loc)</span></span><br><span class="line">		<span class="comment">// fmt.Println(sz)</span></span><br><span class="line">		file, _ := os.Open(<span class="string">&quot;./test&quot;</span> + strconv.Itoa(i+<span class="number">1</span>) + <span class="string">&quot;.png&quot;</span>)</span><br><span class="line">		<span class="keyword">defer</span> file.Close()</span><br><span class="line">		img, _ := png.Decode(file)</span><br><span class="line">		sub_image := img.(<span class="keyword">interface</span> &#123;</span><br><span class="line">			SubImage(r image.Rectangle) image.Image</span><br><span class="line">		&#125;).SubImage(image.Rect(loc.X, loc.Y, loc.X+sz.Width, loc.Y+sz.Height))</span><br><span class="line">		file, _ = os.Create(<span class="string">&quot;./crop&quot;</span> + strconv.Itoa(i+<span class="number">1</span>) + <span class="string">&quot;.png&quot;</span>)</span><br><span class="line">		png.Encode(file, sub_image)</span><br><span class="line"></span><br><span class="line">		time.Sleep(time.Duration(<span class="number">5</span>) * time.Second)</span><br><span class="line"></span><br><span class="line">		ok_button, _ := wd.FindElement(selenium.ByXPATH, <span class="string">&quot;/html/body/div[2]/div/div[2]/div/div/div[3]/div/div[2]/button[4]&quot;</span>)</span><br><span class="line">		<span class="comment">// args = []interface&#123;&#125;&#123;ok_button&#125;</span></span><br><span class="line">		<span class="comment">// wd.ExecuteScript(&quot;arguments[0].click();&quot;, args)</span></span><br><span class="line">		ok_button.SendKeys(selenium.EnterKey)</span><br><span class="line"></span><br><span class="line">		time.Sleep(time.Duration(<span class="number">2</span>) * time.Second)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>中途遇到幾個問題在這紀錄一下，</p>
<ol>
<li>button click() 沒反應<br>
中間操作時，button 元素找到後進行 Click() 點擊，但是沒有反應。在爬文後還是沒找出確切原因，但有兩個方法可以解決：
<ul>
<li>直接調用 javascript 的點擊事件</li>
</ul>
</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">query_button, _ := wd.FindElement(selenium.ByXPATH, <span class="string">&quot;/html/body/div/div/div/div/section[2]/div[1]/div/div/div[2]/p/button&quot;</span>)</span><br><span class="line">args := []<span class="keyword">interface</span>&#123;&#125;&#123;query_button&#125;</span><br><span class="line">wd.ExecuteScript(<span class="string">&quot;arguments[0].click();&quot;</span>, args)</span><br></pre></td></tr></table></figure>
<pre><code>- 使用 enter 操作
</code></pre>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line">query_button, _ := wd.FindElement(selenium.ByXPATH, <span class="string">&quot;/html/body/div/div/div/div/section[2]/div[1]/div/div/div[2]/p/button&quot;</span>)</span><br><span class="line">query_button.SendKeys(selenium.EnterKey)</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>解析 HTML 原始碼<br>
因為要取得回傳表格的 row 數，如果用 selenium package 有點難爬。後來發現大部份的人如果要解析及取得 HTML 原始碼各個標籤的元素資料，都會用 python 的靜態爬取的爬蟲 Beatifulsoup 套件，而 golang 也有大神改寫成 <a href="https://github.com/anaskhan96/soup">soup</a>。<br>
目標需要爬取的元素包在 <code>react-bs-container-body</code> class 中，如下圖。爬取整個 html 後，用 Find 找指定 class 後再用 FindAll 篩選 tr 標籤以取得 row 數（len(table)）。<br>
<img src="https://imgur.com/jF71MfF.png" alt=""></li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// parse to get the number of the column</span></span><br><span class="line">html_parse, _ := wd.PageSource()</span><br><span class="line">doc := soup.HTMLParse(html_parse)</span><br><span class="line">table := doc.Find(<span class="string">&quot;div&quot;</span>, <span class="string">&quot;class&quot;</span>, <span class="string">&quot;react-bs-container-body&quot;</span>).FindAll(<span class="string">&quot;tr&quot;</span>)</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>
<p>tebeka/selenium 沒有包 select function<br>
所幸 issue 中有大神把 SeleniumHQ Java code 改寫成 golang，請參考這個 <a href="https://github.com/tebeka/selenium/pull/238">pull request</a>。可以無痛參考使用 T_T</p>
</li>
<li>
<p>tebeka/selenium 的 Screenshot 無法指定範圍<br>
所以只好將就，先把整個畫面截圖後儲存，再另外使用圖片處理的套件 image，將圖片讀取後另外擷取再儲存。 （速度慢但目前無其他方法 Q_Q）</p>
</li>
</ol>
<h3 id="Reference">Reference</h3>
<ul>
<li><a href="https://leileiluoluo.com/posts/golang-selenium.html">https://leileiluoluo.com/posts/golang-selenium.html</a></li>
<li><a href="https://blog.epoch.tw/2021/05/28/%E4%BD%BF%E7%94%A8-Go-%E6%93%8D%E4%BD%9C-Chrome-%E7%80%8F%E8%A6%BD%E5%99%A8/">https://blog.epoch.tw/2021/05/28/使用-Go-操作-Chrome-瀏覽器/</a></li>
<li><a href="https://blog.csdn.net/shjsfx/article/details/106006255">https://blog.csdn.net/shjsfx/article/details/106006255</a></li>
</ul>
]]></content>
      <categories>
        <category>Programming</category>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Selenium</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 helm 安裝 Metrics Server</title>
    <url>/helm-install-Metrics-Server/</url>
    <content><![CDATA[<p>Metrics Server 通過 kubelet（cAdvisor）獲取監控數據，主要作用是為 kube-scheduler、HPA(Horizontal Pod Autoscaler)等 k8s 核心組件，以及 kubectl top 命令和 Dashboard 等 UI 組件提供數據來源，可以用來看 node 或 pod 的資源 (CPU &amp; Memory) 消耗。須注意的是，Metric Server 是 in memory 的 monitor，只可以查詢當前的度量數據，並不保存歷史數據。</p>
<span id="more"></span>
<h3 id="安裝">安裝</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm repo add metrics-server https://kubernetes-sigs.github.io/metrics-server/</span><br><span class="line">helm upgrade --install metrics-server metrics-server/metrics-server --namespace kube-system</span><br><span class="line">Release <span class="string">&quot;metrics-server&quot;</span> does not exist. Installing it now.</span><br><span class="line">NAME: metrics-server</span><br><span class="line">LAST DEPLOYED: Mon Mar 21 16:32:14 2022</span><br><span class="line">NAMESPACE: kube-system</span><br><span class="line">STATUS: deployed</span><br><span class="line">REVISION: 1</span><br><span class="line">TEST SUITE: None</span><br><span class="line">NOTES:</span><br><span class="line">***********************************************************************</span><br><span class="line">* Metrics Server                                                      *</span><br><span class="line">***********************************************************************</span><br><span class="line">  Chart version: 3.8.2</span><br><span class="line">  App version:   0.6.1</span><br><span class="line">  Image tag:     k8s.gcr.io/metrics-server/metrics-server:v0.6.1</span><br><span class="line">***********************************************************************</span><br></pre></td></tr></table></figure>
<h3 id="連線失敗問題">連線失敗問題</h3>
<p>可以發現使用預設值安裝完後 deployment 一直無法 ready，查看 deployment 資訊</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl describe deployments.apps -n kube-system metrics-server</span></span><br><span class="line"><span class="attr">Name:</span>                   <span class="string">metrics-server</span></span><br><span class="line"><span class="attr">Namespace:</span>              <span class="string">kube-system</span></span><br><span class="line"><span class="attr">CreationTimestamp:</span>      <span class="string">Mon,</span> <span class="number">21</span> <span class="string">Mar</span> <span class="number">2022 16:32:17</span> <span class="string">+0800</span></span><br><span class="line"><span class="attr">Labels:</span>                 <span class="string">app.kubernetes.io/instance=metrics-server</span></span><br><span class="line">                        <span class="string">app.kubernetes.io/managed-by=Helm</span></span><br><span class="line">                        <span class="string">app.kubernetes.io/name=metrics-server</span></span><br><span class="line">                        <span class="string">app.kubernetes.io/version=0.6.1</span></span><br><span class="line">                        <span class="string">helm.sh/chart=metrics-server-3.8.2</span></span><br><span class="line"><span class="attr">Annotations:            deployment.kubernetes.io/revision:</span> <span class="number">1</span></span><br><span class="line">                        <span class="attr">meta.helm.sh/release-name:</span> <span class="string">metrics-server</span></span><br><span class="line">                        <span class="attr">meta.helm.sh/release-namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">Selector:</span>               <span class="string">app.kubernetes.io/instance=metrics-server,app.kubernetes.io/name=metrics-server</span></span><br><span class="line"><span class="attr">Replicas:</span>               <span class="number">1</span> <span class="string">desired</span> <span class="string">|</span> <span class="number">1</span> <span class="string">updated</span> <span class="string">|</span> <span class="number">1</span> <span class="string">total</span> <span class="string">|</span> <span class="number">0</span> <span class="string">available</span> <span class="string">|</span> <span class="number">1</span> <span class="string">unavailable</span></span><br><span class="line"><span class="attr">StrategyType:</span>           <span class="string">RollingUpdate</span></span><br><span class="line"><span class="attr">MinReadySeconds:</span>        <span class="number">0</span></span><br><span class="line"><span class="attr">RollingUpdateStrategy:</span>  <span class="number">25</span><span class="string">%</span> <span class="string">max</span> <span class="string">unavailable,</span> <span class="number">25</span><span class="string">%</span> <span class="string">max</span> <span class="string">surge</span></span><br><span class="line"><span class="attr">Pod Template:</span></span><br><span class="line">  <span class="attr">Labels:</span>           <span class="string">app.kubernetes.io/instance=metrics-server</span></span><br><span class="line">                    <span class="string">app.kubernetes.io/name=metrics-server</span></span><br><span class="line">  <span class="attr">Service Account:</span>  <span class="string">metrics-server</span></span><br><span class="line">  <span class="attr">Containers:</span></span><br><span class="line">   <span class="attr">metrics-server:</span></span><br><span class="line">    <span class="attr">Image:</span>      <span class="string">k8s.gcr.io/metrics-server/metrics-server:v0.6.1</span></span><br><span class="line">    <span class="attr">Port:</span>       <span class="number">4443</span><span class="string">/TCP</span></span><br><span class="line">    <span class="attr">Host Port:</span>  <span class="number">0</span><span class="string">/TCP</span></span><br><span class="line">    <span class="attr">Args:</span></span><br><span class="line">      <span class="string">--secure-port=4443</span></span><br><span class="line">      <span class="string">--cert-dir=/tmp</span></span><br><span class="line">      <span class="string">--kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname</span></span><br><span class="line">      <span class="string">--kubelet-use-node-status-port</span></span><br><span class="line">      <span class="string">--metric-resolution=15s</span></span><br><span class="line">    <span class="attr">Liveness:</span>     <span class="string">http-get</span> <span class="string">https://:https/livez</span> <span class="string">delay=0s</span> <span class="string">timeout=1s</span> <span class="string">period=10s</span> <span class="comment">#success=1 #failure=3</span></span><br><span class="line">    <span class="attr">Readiness:</span>    <span class="string">http-get</span> <span class="string">https://:https/readyz</span> <span class="string">delay=20s</span> <span class="string">timeout=1s</span> <span class="string">period=10s</span> <span class="comment">#success=1 #failure=3</span></span><br><span class="line">    <span class="attr">Environment:</span>  <span class="string">&lt;none&gt;</span></span><br><span class="line">    <span class="attr">Mounts:</span></span><br><span class="line">      <span class="string">/tmp</span> <span class="string">from</span> <span class="string">tmp</span> <span class="string">(rw)</span></span><br><span class="line">  <span class="attr">Volumes:</span></span><br><span class="line">   <span class="attr">tmp:</span></span><br><span class="line">    <span class="attr">Type:</span>               <span class="string">EmptyDir</span> <span class="string">(a</span> <span class="string">temporary</span> <span class="string">directory</span> <span class="string">that</span> <span class="string">shares</span> <span class="string">a</span> <span class="string">pod&#x27;s</span> <span class="string">lifetime)</span></span><br><span class="line">    <span class="attr">Medium:</span></span><br><span class="line">    <span class="attr">SizeLimit:</span>          <span class="string">&lt;unset&gt;</span></span><br><span class="line">  <span class="attr">Priority Class Name:</span>  <span class="string">system-cluster-critical</span></span><br><span class="line"><span class="attr">Conditions:</span></span><br><span class="line">  <span class="string">Type</span>           <span class="string">Status</span>  <span class="string">Reason</span></span><br><span class="line">  <span class="string">----</span>           <span class="string">------</span>  <span class="string">------</span></span><br><span class="line">  <span class="string">Available</span>      <span class="literal">False</span>   <span class="string">MinimumReplicasUnavailable</span></span><br><span class="line">  <span class="string">Progressing</span>    <span class="literal">True</span>    <span class="string">ReplicaSetUpdated</span></span><br><span class="line"><span class="attr">OldReplicaSets:</span>  <span class="string">&lt;none&gt;</span></span><br><span class="line"><span class="attr">NewReplicaSet:</span>   <span class="string">metrics-server-7d76b744cd</span> <span class="string">(1/1</span> <span class="string">replicas</span> <span class="string">created)</span></span><br><span class="line"><span class="attr">Events:</span></span><br><span class="line">  <span class="string">Type</span>    <span class="string">Reason</span>             <span class="string">Age</span>    <span class="string">From</span>                   <span class="string">Message</span></span><br><span class="line">  <span class="string">----</span>    <span class="string">------</span>             <span class="string">----</span>   <span class="string">----</span>                   <span class="string">-------</span></span><br><span class="line">  <span class="string">Normal</span>  <span class="string">ScalingReplicaSet</span>  <span class="string">3m50s</span>  <span class="string">deployment-controller</span>  <span class="string">Scaled</span> <span class="string">up</span> <span class="string">replica</span> <span class="string">set</span> <span class="string">metrics-server-7d76b744cd</span> <span class="string">to</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>查看 Pod log</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl logs -f -n kube-system metrics-server-7d76b744cd-fv9ns</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/1NaduDA.png" alt=""></p>
<h3 id="連線失敗問題修正">連線失敗問題修正</h3>
<p>加上 <code>--kubelet-insecure-tls</code> 啟動參數</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl patch -n kube-system deployment metrics-server --type=json -p &#x27;[&#123;&quot;op&quot;:&quot;add&quot;,&quot;path&quot;:&quot;/spec/template/spec/containers/0/args/-&quot;,&quot;value&quot;:&quot;--kubelet-insecure-tls&quot;&#125;]&#x27;</span><br></pre></td></tr></table></figure>
<h3 id="測試">測試</h3>
<p>查看節點資源消耗</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@node ~]# kubectl top nodes</span><br><span class="line">NAME      CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%</span><br><span class="line">node      312m         7%     2769Mi          36%</span><br><span class="line">rockyw    234m         2%     3335Mi          21%</span><br><span class="line">rockyw2   199m         2%     2727Mi          17%</span><br></pre></td></tr></table></figure>
<h3 id="Reference">Reference</h3>
<p>在找資料的時候發現以下兩篇針對 metric server 的介紹，值得拜讀。</p>
<ul>
<li><a href="https://levelup.gitconnected.com/kubernetes-monitoring-101-core-pipeline-services-pipeline-a34cd4cc9627">Kubernetes Monitoring 101 — Core pipeline &amp; Services Pipeline</a></li>
<li><a href="https://www.xtplayer.cn/kubernetes/k8s-automatic-elastic-expansion/r">Kubernetes 自動彈性伸縮</a></li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>metrics-server</tag>
      </tags>
  </entry>
  <entry>
    <title>[Hexo] 升級至 5.x 與 NexT 主題 8.x</title>
    <url>/hexo-next-upgrade/</url>
    <content><![CDATA[<h3 id="Hexo-升級">Hexo 升級</h3>
<p>Hexo 版本及系統插件可以透過 npm 實現，請按照下列步驟執行：</p>
<span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全局升級 hexo-cli</span></span><br><span class="line">npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 檢察已安裝的插件(package.json)是否可升級</span></span><br><span class="line">npm install -g npm-check</span><br><span class="line">npm-check</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升級系統中的插件</span></span><br><span class="line">npm install -g npm-upgrade</span><br><span class="line">npm-upgrade</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新全局插件</span></span><br><span class="line">npm update -g</span><br><span class="line">npm update --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 hexo 版本，看是否有升級成功</span></span><br><span class="line">hexo v</span><br></pre></td></tr></table></figure>
<p>更新完成後我就直接下 <code>hexo g</code> 了，因為前後版的配置有些許差異，所以報錯不須緊張，只要根據錯誤訊息修改已 deprecated 的配置項。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Deprecated</span><br><span class="line">external_link: true|false</span><br><span class="line"># New option</span><br><span class="line">external_link:</span><br><span class="line">  enable: true # Open external links in new tab</span><br><span class="line">  field: site # Apply to the whole site</span><br><span class="line">  exclude: &#x27;&#x27;</span><br><span class="line"></span><br><span class="line"># Deprecated</span><br><span class="line">use_date_for_updated: true</span><br><span class="line"># New option</span><br><span class="line">updated_option: date</span><br></pre></td></tr></table></figure>
<h3 id="NexT升級">NexT升級</h3>
<ol>
<li>用不同於原先版本的名字，下載新的 v8 倉庫</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/next-theme/hexo-theme-next themes/next8</span><br></pre></td></tr></table></figure>
<p>如此，你可以在不修改原有的 NexT 舊版目錄的同時使用 next8 目錄中的新版本主題。</p>
<ol start="2">
<li>在 hexo 的主配置文件設置主題：</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next8</span></span><br></pre></td></tr></table></figure>
<p>如此，新主題將在生成站點時被加載。如果升級途中遇到了任何錯誤、或只是不喜歡這一新版本，可以隨時切換回舊版本。</p>
<ol start="3">
<li>比對新舊主題的 _config.yml，針對客製化的樣式進行設定，如字體、icon…</li>
</ol>
<h3 id="Reference">Reference</h3>
<ul>
<li><a href="https://www.cylong.com/blog/2020/08/10/update-hexo-next/">https://www.cylong.com/blog/2020/08/10/update-hexo-next/</a></li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>安裝監聽於所有 namespace 的 strimzi kafka operator，可在不同 namespace 下安裝不同座 Kafka cluster</title>
    <url>/install-strimzi-kafka-operator-to-watch-all-namespace/</url>
    <content><![CDATA[<p>以下紀錄如何隔離 kafka operator 與建立的 kafka cluster 的命名空間，預計是可以在一座 kubernetes cluster 上只需安裝一個 kafka operator 來建立多個 kafka cluster。</p>
<span id="more"></span>
<h3 id="安裝-operator">安裝 operator</h3>
<p>下載 CRD 資源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/strimzi/strimzi-kafka-operator/releases/download/0.28.0/strimzi-0.28.0.tar.gz -P /tmp &amp;&amp; tar zxvf /tmp/strimzi-0.28.0.tar.gz -C /tmp</span><br></pre></td></tr></table></figure>
<p>修改 <code>strimzi-0.28.0/install/cluster-operator/060-Deployment-strimzi-cluster-operator.yaml</code> 檔案中的 <code>STRIMZI_NAMESPACE</code> 的值，改為監聽所有 <code>&quot;*&quot;</code> namespace。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /tmp/strimzi-0.28.0/install/cluster-operator/060-Deployment-strimzi-cluster-operator.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="comment"># ...</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">strimzi-cluster-operator</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">strimzi-cluster-operator</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">strimzi/operator:0.16.2</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">STRIMZI_NAMESPACE</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">        <span class="comment"># ...</span></span><br></pre></td></tr></table></figure>
<p>以上可以用下面一行 command 解決</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -z <span class="string">&#x27;s/              valueFrom:\n                fieldRef:\n                  fieldPath: metadata.namespace/              value: \&quot;*\&quot;/&#x27;</span> -i /tmp/strimzi-0.28.0/install/cluster-operator/060-Deployment-strimzi-cluster-operator.yaml</span><br></pre></td></tr></table></figure>
<p>建立 ClusterRoleBindings，使可授權 Cluster Operator 存取 cluster-wide 的所有 namespaces</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create clusterrolebinding strimzi-cluster-operator-namespaced --clusterrole=strimzi-cluster-operator-namespaced --serviceaccount system-kafka-operator:strimzi-cluster-operator</span><br><span class="line">kubectl create clusterrolebinding strimzi-cluster-operator-entity-operator-delegation --clusterrole=strimzi-entity-operator --serviceaccount system-kafka-operator:strimzi-cluster-operator</span><br><span class="line">kubectl create clusterrolebinding strimzi-cluster-operator-topic-operator-delegation --clusterrole=strimzi-topic-operator --serviceaccount system-kafka-operator:strimzi-cluster-operator</span><br></pre></td></tr></table></figure>
<p>正式佈署 operator</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl apply -f /tmp/strimzi-0.28.0/install/cluster-operator -n system-kafka-operator</span><br></pre></td></tr></table></figure>
<p>查看資源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@node ~]# kubectl get all -n system-kafka-operator</span><br><span class="line">NAME                                            READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/strimzi-cluster-operator-7548bd689f-xlr9j   1/1     Running   0          29m</span><br><span class="line"></span><br><span class="line">NAME                                       READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">deployment.apps/strimzi-cluster-operator   1/1     1            1           29m</span><br><span class="line"></span><br><span class="line">NAME                                                  DESIRED   CURRENT   READY   AGE</span><br><span class="line">replicaset.apps/strimzi-cluster-operator-7548bd689f   1         1         1       29m</span><br></pre></td></tr></table></figure>
<h3 id="安裝-kafka-cluster">安裝 kafka cluster</h3>
<p>準備 kafka.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">kafka.strimzi.io/v1beta2</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Kafka</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-cluster</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kafka</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">kafka:</span></span><br><span class="line">    <span class="attr">version:</span> <span class="number">3.1</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">    <span class="attr">listeners:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">plain</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">9092</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">internal</span></span><br><span class="line">        <span class="attr">tls:</span> <span class="literal">false</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tls</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">9093</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">internal</span></span><br><span class="line">        <span class="attr">tls:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">external</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">9094</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">loadbalancer</span></span><br><span class="line">        <span class="attr">tls:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">default.replication.factor:</span> <span class="number">3</span></span><br><span class="line">      <span class="attr">num.partitions:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">offsets.topic.replication.factor:</span> <span class="number">3</span></span><br><span class="line">      <span class="attr">transaction.state.log.replication.factor:</span> <span class="number">3</span></span><br><span class="line">      <span class="attr">transaction.state.log.min.isr:</span> <span class="number">2</span></span><br><span class="line">      <span class="attr">log.message.format.version:</span> <span class="string">&quot;3.1&quot;</span></span><br><span class="line">    <span class="attr">storage:</span></span><br><span class="line">      <span class="attr">class:</span> <span class="string">nfs</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">jbod</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="number">0</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">persistent-claim</span></span><br><span class="line">        <span class="attr">size:</span> <span class="string">10Gi</span></span><br><span class="line">        <span class="attr">deleteClaim:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">zookeeper:</span></span><br><span class="line">    <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">    <span class="attr">storage:</span></span><br><span class="line">      <span class="attr">class:</span> <span class="string">nfs</span></span><br></pre></td></tr></table></figure>
<p>佈署 cluster</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl apply -f kafka.yaml</span><br></pre></td></tr></table></figure>
<p>查看資源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@node terraform]# kubectl get all -n kafka</span><br><span class="line">NAME                         READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/my-cluster-kafka-0       1/1     Running   0          25s</span><br><span class="line">pod/my-cluster-kafka-1       1/1     Running   0          25s</span><br><span class="line">pod/my-cluster-kafka-2       1/1     Running   0          25s</span><br><span class="line">pod/my-cluster-zookeeper-0   1/1     Running   0          52s</span><br><span class="line">pod/my-cluster-zookeeper-1   1/1     Running   0          52s</span><br><span class="line">pod/my-cluster-zookeeper-2   1/1     Running   0          52s</span><br><span class="line"></span><br><span class="line">NAME                                          TYPE           CLUSTER-IP       EXTERNAL-IP   PORT(S)                               AGE</span><br><span class="line">service/my-cluster-kafka-0                    LoadBalancer   10.109.143.19    10.1.5.151    9094:32608/TCP                        27s</span><br><span class="line">service/my-cluster-kafka-1                    LoadBalancer   10.96.7.88       10.1.5.154    9094:32057/TCP                        27s</span><br><span class="line">service/my-cluster-kafka-2                    LoadBalancer   10.99.44.55      10.1.5.152    9094:31265/TCP                        27s</span><br><span class="line">service/my-cluster-kafka-bootstrap            ClusterIP      10.105.207.155   &lt;none&gt;        9091/TCP,9092/TCP,9093/TCP            27s</span><br><span class="line">service/my-cluster-kafka-brokers              ClusterIP      None             &lt;none&gt;        9090/TCP,9091/TCP,9092/TCP,9093/TCP   27s</span><br><span class="line">service/my-cluster-kafka-external-bootstrap   LoadBalancer   10.96.136.137    10.1.5.153    9094:30262/TCP                        27s</span><br><span class="line">service/my-cluster-zookeeper-client           ClusterIP      10.107.192.225   &lt;none&gt;        2181/TCP                              53s</span><br><span class="line">service/my-cluster-zookeeper-nodes            ClusterIP      None             &lt;none&gt;        2181/TCP,2888/TCP,3888/TCP            53s</span><br><span class="line"></span><br><span class="line">NAME                                    READY   AGE</span><br><span class="line">statefulset.apps/my-cluster-kafka       3/3     25s</span><br><span class="line">statefulset.apps/my-cluster-zookeeper   3/3     52s</span><br></pre></td></tr></table></figure>
<h3 id="Reference">Reference</h3>
<ul>
<li><a href="https://strimzi.io/docs/0.16.2/full.html#deploying-cluster-operator-to-watch-whole-cluster-deploying-co">https://strimzi.io/docs/0.16.2/full.html#deploying-cluster-operator-to-watch-whole-cluster-deploying-co</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>新手刷題前應該知道的事</title>
    <url>/mentor-alg101-1/</url>
    <content><![CDATA[<p>這篇文章是 Lidemy Mentor Program 第二周觀看 ALG101 先別急著寫 Leetcode 的筆記。</p>
<h3 id="新手寫題目怎麼開始">新手寫題目怎麼開始</h3>
<ol>
<li>先想解法</li>
<li>在把解法轉成程式碼<br>
而不是著急的直接邊寫程式碼邊解，要先有一個架構之後再去想怎麼轉換成 code。</li>
</ol>
<span id="more"></span>
<p>舉例：印出 1~100 的奇數</p>
<ol>
<li>想解法
<ul>
<li>印出一到一百</li>
<li>印的時候判斷是不是奇數</li>
</ul>
</li>
<li>把解法換成程式碼</li>
</ol>
<p>利用虛擬碼 psedu code來表示程式碼<br>
<img src="https://imgur.com/NR7Hxwo.png" alt=""></p>
<div class="warning">
<p>縮排的重要性！縮牌等於一個區塊，例如 if-end if 代表一個區塊，大大的增加程式可讀性。</p>
</div>
<p><img src="https://imgur.com/a9znaI2.png" alt=""><br>
需要練習當看到程式碼時，腦中要能知道程式的流程。<br>
可以想想看如果把 max 的初始值設成 arr[0] 的話，arr 在 [7, 5] 的狀況下答案會是對的嗎?</p>
<h3 id="善用-log-debugger">善用 log &amp; debugger</h3>
<p>用 Debugger 可以讓程式一行一行的跑 code，方便新手了解程式執行流程並找出哪一行有錯。<br>
關於 Chrome Devtool Debbuger 的使用之前就有特別記錄成一篇<a href="https://ulahsieh.github.io/Javascript-Debugging-in-Chrome.html">文章</a>。</p>
<h3 id="範圍很重要">範圍很重要</h3>
<p>因為不同輸入範圍代表不同限制，同一個題目可能輸入範圍不一樣，解法就會不同。解題時可能會碰到的三種限制：</p>
<ol>
<li>空間限制</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一般程式語言中的 int： 4 bytes；double：8 bytes</span><br><span class="line">JS 中的 Number：8 bytes</span><br></pre></td></tr></table></figure>
<p>當今天程式要使用到一百萬個數字，則大約需要 7.6 MB；十億個數字，則大約需要 7.4 GB 的空間，若要排序一百萬個數字可能還可以宣告陣列來存，但如果換成十億筆的話就需要使用其他方式，比如說先放在檔案，再取出比較。<br>
2. 時間限制<br>
3. 型態限制<br>
不同型態可以儲存的範圍不同，例如 Number.MAX_SAFE_INTEGER 是 Javascript 可以儲存的最大安全數值，如果超過此數，就沒辦法保證正確性，如下範例：<br>
<img src="https://imgur.com/yRtYnpJ.png" alt=""><br>
另外還有浮點數的精準度問題<br>
<img src="https://imgur.com/GzPTLN7.png" alt=""></p>
<h3 id="遇到困難時">遇到困難時</h3>
<p>請利用函式填空法以及簡化法，先避開題目的細節，把架構先做出來。當你把架構寫出來後，會發現剩下的東西其實沒那麼困難。如下圖範例，多了函式，整體架構會看起來更清楚。<br>
<img src="https://imgur.com/6bWA65a.png" alt=""></p>
<h3 id="一些上課學到的小技巧">一些上課學到的小技巧</h3>
<ol>
<li></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">total</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(total%<span class="number">10</span>===<span class="number">0</span>)&#123;</span><br><span class="line">	    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以轉換成 <code>return total % 10 === 0</code> 一行</p>
<ol start="2">
<li>key-value 對應關係除了使用 switch case 以及 if-else 判斷外，可以使用<code>物件.屬性(key)</code>做存取。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getValue</span>(<span class="params">s</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> mapping = &#123;</span><br><span class="line">    	<span class="attr">A</span>:<span class="number">10</span>,</span><br><span class="line">        <span class="attr">B</span>:<span class="number">11</span>,</span><br><span class="line">        <span class="attr">C</span>:<span class="number">12</span>,</span><br><span class="line">        <span class="attr">D</span>:<span class="number">13</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mapping[s]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getValue(A)) <span class="comment">//輸出 10</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>callback function 與 <code>=&gt;</code> 的轉換</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> arr= [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">  <span class="keyword">let</span> target = <span class="number">3</span></span><br><span class="line">  <span class="keyword">let</span> newArr = filter(arr, <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x !== target </span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 可以寫成 filter(arr, x =&gt; x !== target)</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">console</span>.log(newArr)</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params">arr, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = []</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(callback(arr[i])) &#123;</span><br><span class="line">      result.push(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>使用<code>.map</code> 將陣列中元素換成 Number 型態</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr = [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;].map(Number)</span><br></pre></td></tr></table></figure>
<p>一行結束!!</p>
<ol start="5">
<li><code>return &lt;判斷式&gt;</code> 的簡寫</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function isPositive(n) &#123;</span><br><span class="line">	return n &gt; 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>判斷 n 是否為正的 function ，回傳 true / false 可以直接在 return 使用判斷式判斷並回傳。</p>
<h3 id="程式效率">程式效率</h3>
<p>使用<strong>時間複雜度</strong> Big O 符號來表示執行所需步驟與資料量 n 的關聯：<br>
O(n)：執行所需步驟與 n 成正比<br>
O(2^n)：執行所需步驟與 2^n 成正比<br>
O(1):執行所需步驟與 n 沒有關係<br>
<img src="https://imgur.com/Vivt0gQ.png" alt=""><br>
[1]<br>
相對的是空間複雜度，通常兩者不可兼得。<br>
關於時間與空間複雜度，前幾篇計概的<a href="https://ulahsieh.github.io/Mentor-CS101-Note.html#more">文章</a>有稍微提到。</p>
<h3 id="Source">Source</h3>
<p>[1] <a href="http://bigocheatsheet.com/">http://bigocheatsheet.com/</a><br>
[All] 此篇文章 Lidemy &lt;ALG101 先別急著寫 Leetcode&gt; 的筆記，內容及圖片大部分取自上課影片</p>
]]></content>
      <categories>
        <category>程式初心者</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Istio 沒掛，但正確的設置 gateway 跟 virtual service 後，卻一直 404 not found</title>
    <url>/istio-404-not-found/</url>
    <content><![CDATA[<p>手上有一個寫好的 API 要對外釋出，在設置完 istio 資源之後，curl istio ingress gateway/targetAPI 卻一直回傳 404 Not Found，照理來說這個 API 如果找不到資料回傳的 404 訊息應該是 <code>&#123;&quot;error&quot;:&quot;Record Not Found, the serial number doesn't exist&quot;&#125;</code>，用這篇文章記錄問題跟解決方式。</p>
<span id="more"></span>
<h3 id="問題排查">問題排查</h3>
<ol>
<li>在相同的 istio ingress gateway 上的 API 皆正常運作，排除 istio 本身可能會有問題</li>
<li>用同樣的配置檔，部屬在另外一個 K8s 環境上的 istio，發現運作正常，排除配置檔有誤的問題</li>
<li>用其他 API 部屬，也一樣直接 404 Not Found，排除原先 API 本身可能有誤的問題</li>
<li>查看 istio ingress gateway 的 log</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[2022-03-24T06:23:07.653Z] &quot;GET /api/convergence/findRecord/TBCC32008806 HTTP/1.1&quot; 200 - &quot;-&quot; &quot;-&quot; 0 9491 5 4 &quot;10.1.5.32&quot; &quot;PostmanRuntime/7.29.0&quot; &quot;3655dd39-9c2c-9c14-ac5c-53fc7547a155&quot; &quot;10.1.5.41&quot; &quot;10.244.64.149:8080&quot; outbound|8080||converg-api.converg-api.svc.cluster.local 10.244.128.48:42104 10.244.128.48:8080 10.1.5.32:39159 - http-Sbups</span><br><span class="line">---</span><br><span class="line">[2022-03-24T06:26:32.759Z] &quot;GET /api/convergence/grabreflow/TBCBB2039913 HTTP/1.1&quot; 404 - &quot;-&quot; &quot;-&quot; 0 18 1 1 &quot;10.1.5.32&quot; &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:98.0) Gecko/20100101 Firefox/98.0&quot; &quot;61998a8c-0c79-94a0-9c84-cb03a2f10390&quot; &quot;10.1.5.41&quot; &quot;10.244.128.19:8080&quot; outbound|8080||reverseapi.converg-apipost.svc.cluster.local 10.244.128.48:36740 10.244.128.48:8080 10.1.5.32:15717 - http-XbhqV</span><br></pre></td></tr></table></figure>
<p>上面 200 的是正常運作的 API，下面 404 是新設置的 API，所以其實 404 這個 istio gw &amp; virtual service 其實是有運作的，得出來的結論就是，<font style="background:PeachPuff"><u>istio 找不到新設置的 API 去路由，極大可能是跟其他 URL 規則衝突。</u></font></p>
<h3 id="解決">解決</h3>
<p>終於發現前面最後一個設置的 API 沒有設 prefix，所以 istio 就直接監聽 <code>/</code>，導致後面怎麼設新的 API，都認不到!!!</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">kubectl</span> <span class="string">get</span> <span class="string">virtualservices.networking.istio.io</span> <span class="string">-n</span> <span class="string">converg-apipost</span> <span class="string">converg-apipost-vs</span> <span class="string">-o</span> <span class="string">yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">VirtualService</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="string">&quot;2021-08-04T10:04:00Z&quot;</span></span><br><span class="line">  <span class="attr">generation:</span> <span class="number">9</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">http</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">converg-apipost-vs</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">converg-apipost</span></span><br><span class="line">  <span class="attr">resourceVersion:</span> <span class="string">&quot;241532937&quot;</span></span><br><span class="line">  <span class="attr">selfLink:</span> <span class="string">/apis/networking.istio.io/v1beta1/namespaces/converg-apipost/virtualservices/converg-apipost-vs</span></span><br><span class="line">  <span class="attr">uid:</span> <span class="string">15049a96-f97f-4b00-bee9-001fafcdd2ff</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">gateways:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">converg-apipost-gw</span></span><br><span class="line">  <span class="attr">hosts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  <span class="attr">http:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">match:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uri:</span></span><br><span class="line">        <span class="attr">prefix:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">http-OuFqP</span></span><br><span class="line">    <span class="attr">route:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">destination:</span></span><br><span class="line">        <span class="attr">host:</span> <span class="string">reverseapi</span></span><br><span class="line">        <span class="attr">port:</span></span><br><span class="line">          <span class="attr">number:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure>
<p>把 prefix 加上去後，原本後加的 API 就成功運作了 ✌️</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[root@k8sm1 ~]# curl <span class="number">10.1</span><span class="number">.5</span><span class="number">.41</span>/api/convergence/grabreflow/test</span><br><span class="line">&#123;<span class="attr">&quot;error&quot;</span>:<span class="string">&quot;Record Not Found, the serial number doesn&#x27;t exist&quot;</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Kubernetes</category>
        <category>Istio</category>
      </categories>
      <tags>
        <tag>Istio</tag>
      </tags>
  </entry>
  <entry>
    <title>[Kubernetes] 已登入 harbor 但 kubelet 仍會 ImagePullBackOff</title>
    <url>/kubelet-pullImageBackoff/</url>
    <content><![CDATA[<p>在 kubernetes 環境上拉取私有鏡像倉庫 harbor 的 image 時，一直卡在 ImagePullBackOff 的狀態，decribe pod 發現是權限問題導致拉取失敗。</p>
<span id="more"></span>
<h3 id="狀況說明">狀況說明</h3>
<p>錯誤訊息如下<br>
<img src="https://imgur.com/2QcmPnq.png" alt=""></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Failed to pull image &quot;10.1.5.142:4433/test/findkpsn:9d2e44d2&quot;: rpc error: code = Unknown desc = Error response from daemon: unauthorized: unauthorized to access repository: test/findkpsn, action: pull: unauthorized to access repository: test/findkpsn, action: pull</span><br></pre></td></tr></table></figure>
<p><strong>然而實際上在本機上已經 docker login 成功過了，也可以直接使用 docker pull 拉取，但透過 k8s 拉取仍會失敗。</strong><br>
<img src="https://imgur.com/n9aBDLP.png" alt=""></p>
<h3 id="debug-思路">debug 思路</h3>
<ol>
<li>確認在同樣 repo 的 project 下的其他 image 是否也發生同樣的情況<br>
是，同樣 repo 的 project 的其他 image 也相同。</li>
<li>確認在不同的 repo 是否也發生同樣的情況<br>
否，其他 repo 能正常夠過 kubectl 拉取，應能推斷部屬環境上沒問題。</li>
</ol>
<h3 id="原因">原因</h3>
<p>結果是因為沒有把 project 公開 =_=<br>
<img src="https://imgur.com/WTWv7l6.png" alt=""></p>
<h3 id="意外發現">意外發現</h3>
<p>仍然還是可以讓 project 維持在私有的狀況下，透過 kubectl 拉取。只要在定義資源時，加上 <code>imagePullSecrets</code> 的屬性，值指定為欲創建資源的 namespace 下的 <a href="http://kubernetes.io/dockerconfigjson">kubernetes.io/dockerconfigjson</a> 的 secret，即可拉取成功。</p>
<h4 id="創建-docker-registry-secret">創建 docker-registry secret</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl create secret docker-registry &lt;secretName&gt; \</span><br><span class="line">--docker-server=DOCKER_REGISTRY_SERVER \</span><br><span class="line">--docker-username=DOCKER_USER \</span><br><span class="line">--docker-password=DOCKER_PASSWORD -n &lt;NAMESPACE&gt;</span><br></pre></td></tr></table></figure>
<h4 id="deployment-部屬檔">deployment 部屬檔</h4>
<p>在 spec.template.spec 下新增 imagePullSecrets</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">test</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span></span><br><span class="line">        <span class="attr">image:</span> <span class="number">10.1</span><span class="number">.5</span><span class="number">.142</span><span class="string">:4433/test/test/findkpsn:9d2e44d2</span></span><br><span class="line">      <span class="attr">imagePullSecrets:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">harbor</span></span><br></pre></td></tr></table></figure>
<h4 id="重新佈署">重新佈署</h4>
<p><img src="https://imgur.com/STQZ44K.png" alt=""><br>
加上 imagePullSecrets 後，就可以成功拉取私有專案的鏡像了!</p>
<h3 id="Reference">Reference</h3>
<ul>
<li><a href="https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod">https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod</a></li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>[nifi] Consume Kafka Topic and Put to MongoDB</title>
    <url>/nifi-Consume-Kafka-Topic-and-Put-to-MongoDB/</url>
    <content><![CDATA[<p>這個範例將示範消費指定的 kafka topic，並寫進指定的 MongoDB。</p>
<span id="more"></span>
<p><img src="https://imgur.com/wOVPXlu.png" alt=""></p>
<p>kafka 的資料源為 JSON 結構的 string，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&#123;&quot;Time&quot;:1630652601.119,&quot;SMT_B_3_machine_name&quot;:null,&quot;SMT_B_3_SN&quot;:null,&quot;SMT_B_3_program_number&quot;:null,&quot;SMT_B_3_WO&quot;:null,&quot;SMT_B_3_whole_OK&quot;:null,&quot;SMT_B_3_whole_NG&quot;:null,&quot;SMT_B_3_whole_reOK&quot;:null,&quot;SMT_B_3_whole_yieldRate&quot;:null,&quot;SMT_B_3_board_OK&quot;:null,&quot;SMT_B_3_board_NG&quot;:null,&quot;SMT_B_3_board_reOK&quot;:null,&quot;SMT_B_3_board_yieldRate&quot;:null,&quot;SMT_B_3_component_OK&quot;:null,&quot;SMT_B_3_component_NG&quot;:null,&quot;SMT_B_3_component_reOK&quot;:null,&quot;SMT_B_3_component_yieldRate&quot;:null,&quot;SMT_B_3_tin_OK&quot;:null,&quot;SMT_B_3_tin_NG&quot;:null,&quot;SMT_B_3_tin_reOK&quot;:null,&quot;SMT_B_3_tin_yieldRate&quot;:null&#125;&quot;</span><br></pre></td></tr></table></figure>
<h3 id="1-ConsumeKafka-2-6">1. ConsumeKafka_2_6</h3>
<p><img src="https://imgur.com/IfSEnQm.png" alt=""><br>
<img src="https://imgur.com/K1tWR8f.png" alt=""></p>
<h3 id="2-PutMongo">2. PutMongo</h3>
<p><img src="https://imgur.com/zqApWOn.png" alt=""></p>
<h3 id="4-建立關係">4. 建立關係</h3>
<h4 id="a-ConsumeKafka-—-PutMongo">a. ConsumeKafka  —&gt; PutMongo</h4>
<p><img src="https://imgur.com/wOVPXlu.png" alt=""></p>
<h4 id="c-建立完成後可以發現最後一個-PutMongo-的-processor-有報錯">c. 建立完成後可以發現最後一個 PutMongo 的 processor 有報錯</h4>
<p><img src="https://imgur.com/ROEzhXl.png" alt=""></p>
<h4 id="d-進入-PutMongo-processor-的-SETTINGS-將-Automatically-Terminate-Relationships-的關係打開">d. 進入 PutMongo processor 的 <code>SETTINGS</code> 將 <code>Automatically Terminate Relationships</code> 的關係打開</h4>
<p><img src="https://imgur.com/R2hAeN5.png" alt=""></p>
<div class="info">
<p><code>Automatically Terminate Relationships</code> 指的是數據流路由到這個 Processor 後，特定狀態下會被刪除，一般在 Endpoint Processor 配置，因為數據流不需要再被繼續路由了。</p>
</div>
<h3 id="5-啟動流程">5. 啟動流程</h3>
<p>都完成後可以看到 flow 的原件都已經 Ready，將 Processor 依次啟動。<br>
<img src="https://imgur.com/wOVPXlu.png" alt=""></p>
<p>啟動後可以看到數據開始收送，<br>
<img src="https://imgur.com/oPdDASw.png" alt=""></p>
<p>另外通過 NiFi Data Provenance 可以看到數據流的狀態<br>
<img src="https://imgur.com/UJHbHNR.png" alt=""></p>
<h6 id="Reference">Reference</h6>
<ul>
<li><a href="https://anyisalin.github.io/2019/01/03/nifi-demo/">https://anyisalin.github.io/2019/01/03/nifi-demo/</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1416651">https://cloud.tencent.com/developer/article/1416651</a></li>
</ul>
]]></content>
      <categories>
        <category>Big Data</category>
        <category>NiFi</category>
      </categories>
      <tags>
        <tag>NiFi</tag>
      </tags>
  </entry>
  <entry>
    <title>[SSL] 用 Let&#39;s Encrypt &amp; Certbot 為網站加密</title>
    <url>/nginx-certbot/</url>
    <content><![CDATA[<p>在講求資訊安全的時代，大部分的網站幾乎都使用 https 做為網站的通訊協定，這篇文章將記錄怎麼使用免費的第三方憑證 Let’s Encrypt &amp; Certbot，為網站添加安全保障。</p>
<span id="more"></span>
<h3 id="Let’s-Encryt">Let’s Encryt</h3>
<p>Let’s Encrypt 是一個免費、自動化且開放的憑證機構 (Certificate Authority, CA)，取得憑證後，可為網站提供 SSL/TLS 加密。</p>
<p>Let’s Encrypt 使用 ACME 協定，來驗證申請網域控制權。使用者透過 ACME 客戶端軟體取得並管理憑證。最常見的 ACME 客戶端軟體為 <mark>Certbot</mark></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;NOTE&gt;</span><br><span class="line">ACME (Automatic Certificate Management Environment): 自動憑證管理環境。由 Let&#x27;s Encrypt 所實作的協議，與它相容的軟體可以透過此協議與 Let’s Encrypt 溝通以獲得憑證。[1]</span><br></pre></td></tr></table></figure>
<h3 id="實作">實作</h3>
<p>在 <a href="https://certbot.eff.org/instructions">Certbot</a> 官方網站有快速指引，只需要選擇網站使用的 HTTP Server 以及作業系統，下方就會列出指令，可以直接複製並安裝。</p>
<p><img src="https://imgur.com/6g4Uh5t.png" alt="certbot"></p>
<p>本文以 Ubuntu 18.04 + Nginx HTTP Server 實作。</p>
<h4 id="1-加入Certbot-PPA">1. 加入Certbot PPA</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;NOTE&gt;</span><br><span class="line">PPA(Personal Pakage Archives)：個人軟體包文件，可加入個人開發者的 repository，使其他使用戶安裝和更新。</span><br></pre></td></tr></table></figure>
<p>請依序在 console 中下以下 command</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 檢查更新</span><br><span class="line">$ sudo apt-get update</span><br><span class="line"></span><br><span class="line">// 安裝套件管理的套件</span><br><span class="line">$ sudo apt-get install software-properties-common</span><br><span class="line"></span><br><span class="line">// 啟用universe倉庫</span><br><span class="line">$ sudo add-apt-repository universe</span><br><span class="line"></span><br><span class="line">// 加入 certbot ppa repository</span><br><span class="line">$ sudo add-apt-repository ppa:certbot/certbot</span><br><span class="line"></span><br><span class="line">// 再更新一次套件資訊</span><br><span class="line">$ sudo apt-get update</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="2-安裝-Certbot">2. 安裝 Certbot</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install certbot python-certbot-nginx</span><br></pre></td></tr></table></figure>
<h4 id="3-取得並安裝憑證">3. 取得並安裝憑證</h4>
<p>依使用者需求有下面幾種不同的做法</p>
<p>📌 <span style="font-size:13.28 px"><strong>全自動</strong></span><br>
讓certbot自動編輯完nginx配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo certbot --nginx</span><br></pre></td></tr></table></figure>
<p>📌 <span style="font-size:13.28 px"><strong>半自動</strong></span><br>
由使用者自己設置nginx配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo certbot certonly --nginx</span><br></pre></td></tr></table></figure>
<p>📌 <span style="font-size:13.28 px"><strong>webroot</strong></span><br>
若系統有不能中斷的需求，可以使用 <code>webroot</code> 套件，製作憑證過程不影響伺服器運作。<br>
安裝前需要先在 nginx 設定 acme-challenge，以證明具有網域控制權；</p>
<p><strong>a.</strong>　設定acme-challenge，進入/etc/nginx/site-available/編輯default文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo vi /etc/nginx/site-available/default</span><br></pre></td></tr></table></figure>
<p><strong>b.</strong>　在default文件中，在server block中加入下面設定</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line"> #略</span><br><span class="line">	location ~ /.well-known &#123;</span><br><span class="line">    	allow all;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>c.</strong>　執行 Certbot 取得憑證，其中 /var/www/html/ 為 Nginx 預設站點</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo certbot certonly --webroot -w /var/www/html/ -d www.domain.com</span><br></pre></td></tr></table></figure>
<p>上述任一方式，安裝過程都會需要輸入用於收通知的信箱。安裝完成後，憑證會放在　/etc/letsencrypt/live/www.domain.com　下，共四個檔案 cert.pem、chain.pem、fullchain.pem、privkey.pem</p>
<h4 id="4-產生-Diffie-Hellman-密碼組合-optional">4. 產生 Diffie-Hellman 密碼組合 (optional)</h4>
<p>迪菲-赫爾曼密鑰交換[2] 是一種安全協定，可以讓雙方在沒有對方任何預先資訊的條件下通過不安全通訊建立一個金鑰。此金鑰可在後續的通訊中將作為對稱金鑰來加密通訊內容。<br>
在 /etc/ssl/certs/ 下產生一個 2048bit 的 Diffie-Hellman 金鑰：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048</span><br></pre></td></tr></table></figure>
<h4 id="5-設定Nginx配置文件">5. 設定Nginx配置文件</h4>
<p>產生一個 nginx 的 configuration snippets 來配置 SSL 的相關設定，主要參考自 <a href="http://Cipherli.st">Cipherli.st</a> 建議的 Nginx 設定：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo touch /etc/nginx/snippets/ssl-params.conf</span><br><span class="line">$ sudo  vi /etc/nginx/snippets/ssl-params.conf</span><br></pre></td></tr></table></figure>
<p>片段（Snippet）是一個編程用語，指的是原始碼、機器碼、文本中可重複使用的小區塊。[4]</p>
<p>插入以下：[3]</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">ssl_prefer_server_ciphers on;</span><br><span class="line">ssl_ciphers &quot;EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH&quot;;</span><br><span class="line">ssl_ecdh_curve secp384r1;</span><br><span class="line">ssl_session_cache shared:SSL:10m;</span><br><span class="line">ssl_session_tickets off;</span><br><span class="line">ssl_stapling on;</span><br><span class="line">ssl_stapling_verify on;</span><br><span class="line">resolver 8.8.8.8 8.8.4.4 valid=300s; // Google DNS IP </span><br><span class="line">resolver_timeout 5s;</span><br><span class="line">add_header X-Frame-Options DENY;</span><br><span class="line">add_header X-Content-Type-Options nosniff;</span><br><span class="line">ssl_dhparam /etc/ssl/certs/dhparam.pem; // step4 dh金鑰存放位址</span><br></pre></td></tr></table></figure>
<p>接著依照需求，看是否需要保留 http ，或是僅保留 https 而 http 設定自動轉向到 https</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo  vi /etc/nginx/site-enabled/default</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 80 default_server;</span><br><span class="line">  listen [::]:80 default_server;</span><br><span class="line">  server_name domain.com www.domain.com;</span><br><span class="line">  return 301 https://$server_name$request_uri;  // 加上這行讓 http port 轉向 https</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">server &#123;</span><br><span class="line">  listen [::]:443 ssl ipv6only=on http2 default_server; </span><br><span class="line">  listen 443 ssl http2 default_server; # managed by Certbot</span><br><span class="line">  server_name domain.com www.domain.com;</span><br><span class="line">  ssl_certificate /etc/letsencrypt/live/domain.com/fullchain.pem;</span><br><span class="line">  ssl_certificate_key /etc/letsencrypt/live/domain.com/privkey.pem;</span><br><span class="line">  include snippets/ssl-params.conf;</span><br><span class="line">  location ~ /.well-known &#123;</span><br><span class="line">    allow all;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">	</span><br></pre></td></tr></table></figure>
<h4 id="6-測試並啟用-nginx">6. 測試並啟用 nginx</h4>
<p>設定完成後便可以測試 nginx 配置是否正確</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo nginx -t</span><br></pre></td></tr></table></figure>
<p>如果有出現：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br></pre></td></tr></table></figure>
<p>就表示正常，便可重新啟用 nginx</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl restart nginx</span><br></pre></td></tr></table></figure>
<h4 id="7-設定排程自動更新憑證">7. 設定排程自動更新憑證</h4>
<p>因為Let’s Encrypt的每一個憑證期限為三個月，快過期的時候需要輸入指令certbot renew更新憑證，</p>
<p>加入參數 sudo certbot renew --dry-run ，能測試 Cerbot 是否能夠正常執行憑證更新。</p>
<p>但為了方便，以下將用 cron job 去自動更新憑證。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//確認certbox位址</span><br><span class="line">$ which certbox</span><br><span class="line"></span><br><span class="line">//開啟排程設定</span><br><span class="line">sudo crontab -e</span><br></pre></td></tr></table></figure>
<p>並加入以下排程：每個禮拜一的凌晨 2:00 進行憑證檢查及更新</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00 2 * * 1 /usr/bin/certbot renew --quiet --post-hook &quot;/etc/init.d/nginx restart&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//重啟crontab</span><br><span class="line">sudo /etc/init.d/cron restart</span><br></pre></td></tr></table></figure>
<h6 id="參考資料">參考資料</h6>
<p>[1] <a href="https://letsencrypt.org/zh-tw/docs/glossary/">https://letsencrypt.org/zh-tw/docs/glossary/</a><br>
[2] <a href="https://zh.wikipedia.org/zh-tw/%E8%BF%AA%E8%8F%B2-%E8%B5%AB%E7%88%BE%E6%9B%BC%E5%AF%86%E9%91%B0%E4%BA%A4%E6%8F%9B">https://zh.wikipedia.org/zh-tw/迪菲-赫爾曼密鑰交換</a><br>
[3] <a href="https://syslink.pl/cipherlist/">https://syslink.pl/cipherlist/</a><br>
[4] <a href="https://zh.wikipedia.org/wiki/%E7%89%87%E6%AE%B5">https://zh.wikipedia.org/wiki/片段</a></p>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>SSL</category>
      </categories>
      <tags>
        <tag>SSL</tag>
        <tag>nginx</tag>
        <tag>certbot</tag>
        <tag>Let&#39;s Encrypt</tag>
        <tag>https</tag>
      </tags>
  </entry>
  <entry>
    <title>[Kubernetes] 設定 liveness probe 監聽應用以重啟 pod</title>
    <url>/setup-liveness-probe-to-restart-pod-when-showup-err-log/</url>
    <content><![CDATA[<p>目前手上有一個監聽 Oracle CDC 的程式跑在以 Debian 為基底的 kubernetes pod 中，會定期因為 Oracle 的錯誤訊息 ORA-12518: TNS 監聽程式無法分發客戶機連線的問題而斷線。此時雖然程式有 error log，但 Pod 的狀態仍然為 Running，只要重啟 Pod 即可重新正常運作。</p>
<span id="more"></span>
<h3 id="ORA-12518">ORA-12518</h3>
<p><img src="https://imgur.com/LnkfICA.png" alt=""><br>
首先順便解釋此錯誤的原因 The process of handing off a client connection to another process failed.<br>
參考網路上其他分享：</p>
<ul>
<li><a href="https://stackoverflow.com/questions/13624464/ora-12518-tnslistener-could-not-hand-off-client-connection">stackoverflow</a></li>
<li><a href="https://ittutorial.org/ora-12518-tns-listener-could-not-hand-off-client-connection/">ittutorial</a></li>
<li><a href="https://www.cnblogs.com/javadu/archive/2012/02/20/2359556.html">cnblogs</a></li>
</ul>
<p>從根本可以解決的方式如下：</p>
<ol>
<li>Edit /etc/systemd/system.conf file and Set DefaultTasksMax to ‘infinity’.</li>
<li>dedicated server: 修改 oracle processes &amp; sessions parameters</li>
<li>shared server: 修改 oracle dispatcher parameters</li>
</ol>
<h3 id="然而">然而</h3>
<p>因為 IT server 並不在我控管的範圍，所以只能自己手動重啟 Pod。原本是想說寫 cronJob 定期重啟 pod，但在找資料的過程中，發現在 <a href="https://stackoverflow.com/a/61328816/13318115">stackoverflow crobjob 問題</a> 的解法中有人提出了直接使用 livenessprobe 解決。</p>
<h3 id="從設定-livenessProbe-解決">從設定 livenessProbe 解決</h3>
<p>Kubelet 使用 liveness probe（存活探針）來確定何時重啟容器。當應用程序處於運行狀態但無法做進一步操作，liveness 探針將捕獲到 deadlock，重啟處於該狀態下的容器，使應用程序在存在 bug 的情況下依然能夠繼續運行下去。</p>
<ul>
<li>exec.Command：要在容器內執行的檢測命令，如果命令執行成功，將返回 0，kubelet 就會認為該容器是活著的並且很健康。如果返回非 0 值，kubelet 就會殺掉這個容器並重啟它。</li>
<li>periodSeconds：liveness probe 多久檢查一次</li>
<li>initialDelaySeconds：首次啟動 pod 後，要延遲多久後執行 liveness probe</li>
</ul>
<h3 id="probe-command-要寫啥">probe command 要寫啥?</h3>
<p>接下來又另一個問題來了，我的 probe 中的檢測命令要寫啥? 因為在手動重啟時，只能從 kubectl logs 為依據，查看有無錯誤訊息。然而現在 command 要執行在容器中，但容器裡面沒辦法直接使用 kubectl 取得應用的 stdout 的訊息。又去堆疊溢位(XD 找到了兩種解決方法。</p>
<h4 id="在容器裡-curl-Kubernete-API-server">在容器裡 curl Kubernete API server</h4>
<p>設定 pod 連 kubernetes api server 請參考另外一篇<a href="https://ulahsieh.github.io/curl-Kubernetes-API-server-within-Pod/">文章記錄</a>。<br>
command 應該就會長成以下，如果 curl 回到的 output 會 grep 到 error 訊息，則重啟。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">livenessProbe:</span></span><br><span class="line">  <span class="attr">exec:</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">bash</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;curl -s --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt --header &quot;</span><span class="attr">Authorization:</span> <span class="string">Bearer</span> <span class="string">$(cat</span> <span class="string">/var/run/secrets/kubernetes.io/serviceaccount/token)&quot;</span> <span class="string">-X</span> <span class="string">GET</span> <span class="string">https://kubernetes.default.svc/api/v1/namespaces/converg-it/pods/converg-it-adapter-oracle-8575f54dc6-7lnv6/log?sinceSeconds=100</span> <span class="string">|</span> <span class="string">grep</span> <span class="string">&#x27;error&#x27;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">  initialDelaySeconds: 120</span></span><br><span class="line"><span class="string">  periodSeconds: 60</span></span><br></pre></td></tr></table></figure>
<h4 id="在容器裡查看監聽的-port">在容器裡查看監聽的 port</h4>
<p>在目前跑的容器中，使用 ss 查看目前系統的 socket 狀態，可以發現到其實在正常連結的情況下能偵測到連線(establish state) oracle server 的監聽。<br>
<img src="https://imgur.com/YAgQZeI.png" alt=""><br>
那麼當發生連線異常時(ORA-12518)，就可以當作是重啟的條件。<br>
<img src="https://imgur.com/s8QhlJT.png" alt=""></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">livenessProbe:</span></span><br><span class="line">  <span class="attr">exec:</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">bash</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;ss -an | grep -q &#x27;EST.*:1521 *$&#x27;&quot;</span></span><br><span class="line">  <span class="attr">initialDelaySeconds:</span> <span class="number">120</span></span><br><span class="line">  <span class="attr">periodSeconds:</span> <span class="number">60</span></span><br></pre></td></tr></table></figure>
<h3 id="Reference">Reference</h3>
<ul>
<li><a href="https://jimmysong.io/kubernetes-handbook/guide/configure-pod-service-account.html">https://jimmysong.io/kubernetes-handbook/guide/configure-pod-service-account.html</a></li>
<li><a href="https://stackoverflow.com/questions/49000280/monitor-and-take-action-based-on-pod-log-event">https://stackoverflow.com/questions/49000280/monitor-and-take-action-based-on-pod-log-event</a></li>
<li><a href="https://stackoverflow.com/questions/57711963/kubernetes-liveness-probe-can-a-pod-monitor-its-own-stdout">https://stackoverflow.com/questions/57711963/kubernetes-liveness-probe-can-a-pod-monitor-its-own-stdout</a></li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>[Terraform] Upgrade to the Latest Version</title>
    <url>/terraform-Upgrade/</url>
    <content><![CDATA[<p>目前的環境使用的 terraform 版本是 v0.13.5<br>
<img src="https://imgur.com/QDUkUEk.png" alt=""></p>
<p>參考以下官網說明，如果從 0.13 版要往最新版 v1 升，需要先升到 0.14。</p>
<span id="more"></span>
<table>
<thead>
<tr>
<th>Current Version</th>
<th>Recommendation</th>
</tr>
</thead>
<tbody>
<tr>
<td>v0.10 or earlier</td>
<td>Refer to the upgrade guides for these historical versions until you have upgraded to the latest v0.11 release, then refer to the following item.</td>
</tr>
<tr>
<td>v0.11</td>
<td>Use the terraform 0.12checklist command to detect any situations that must be addressed before upgrading to v0.12, resolve them, and then upgrade to the latest v0.12 release and follow the v0.12 Upgrade Guide.</td>
</tr>
<tr>
<td>v0.12</td>
<td>Upgrade to the latest Terraform v0.13 release and then follow the v0.13 upgrade guide to upgrade your configuration and state for explicit provider requirements.</td>
</tr>
<tr>
<td>v0.13</td>
<td>Upgrade to the latest Terraform v0.14 release and attempt a normal Terraform run. If you encounter any new errors, refer to the v0.14 upgrade guide for resolution steps.</td>
</tr>
<tr>
<td>v0.14</td>
<td>Upgrade directly to the latest Terraform v1.0 release and attempt a normal Terraform run. If you encounter any new errors, refer to the v0.15 upgrade guide for resolution steps.</td>
</tr>
<tr>
<td>v0.15</td>
<td>Upgrade directly to the latest Terraform v1.0 release and attempt a normal Terraform run. Terraform v1.0 is a continuation of the v0.15 series, and so v1.0.0 and later are directly backward-compatible with Terraform v0.15.5.</td>
</tr>
</tbody>
</table>
<h3 id="開始升級">開始升級</h3>
<p>各版 release <a href="https://releases.hashicorp.com/terraform/">載點</a>，請依照不同的作業系統安裝。<br>
<img src="https://imgur.com/Fbo6jfu.png" alt=""></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master1 ~]<span class="comment"># wget https://releases.hashicorp.com/terraform/0.14.11/terraform_0.14.11_linux_amd64.zip</span></span><br><span class="line">--2021-09-14 13:00:30--  https://releases.hashicorp.com/terraform/0.14.11/terraform_0.14.11_linux_amd64.zip</span><br><span class="line">Resolving releases.hashicorp.com (releases.hashicorp.com)... 151.101.1.183, 151.101.65.183, 151.101.129.183, ...</span><br><span class="line">Connecting to releases.hashicorp.com (releases.hashicorp.com)|151.101.1.183|:443... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 33789439 (32M) [application/zip]</span><br><span class="line">Saving to: ‘terraform_0.14.11_linux_amd64.zip’</span><br><span class="line"></span><br><span class="line">100%[==============================================================================================&gt;] 33,789,439  8.05MB/s   <span class="keyword">in</span> 4.0s</span><br><span class="line"></span><br><span class="line">2021-09-14 13:00:34 (8.10 MB/s) - ‘terraform_0.14.11_linux_amd64.zip’ saved [33789439/33789439]</span><br><span class="line"></span><br><span class="line">[root@master1 ~]<span class="comment">#</span></span><br><span class="line">[root@master1 ~]<span class="comment"># unzip terraform_0.14.11_linux_amd64.zip</span></span><br><span class="line">Archive:  terraform_0.14.11_linux_amd64.zip</span><br><span class="line">  inflating: terraform</span><br><span class="line"></span><br><span class="line">[root@master1 ~]<span class="comment">#</span></span><br><span class="line">[root@master1 ~]<span class="comment"># mv terraform /usr/local/bin/</span></span><br><span class="line">mv: overwrite ‘/usr/<span class="built_in">local</span>/bin/terraform’? y</span><br><span class="line">[root@master1 ~]<span class="comment"># terraform version</span></span><br><span class="line">Terraform v0.14.11</span><br><span class="line"></span><br><span class="line">Your version of Terraform is out of date! The latest version</span><br><span class="line">is 1.0.6. You can update by downloading from https://www.terraform.io/downloads.html</span><br><span class="line">[root@master1 ~]<span class="comment">#</span></span><br><span class="line">[root@master1 ~]<span class="comment"># wget https://releases.hashicorp.com/terraform/1.0.6/terraform_1.0.6_linux_amd64.zip</span></span><br><span class="line">[root@master1 ~]<span class="comment"># wget https://releases.hashicorp.com/terraform/1.0.6/terraform_1.0.6_linux_amd64.zip</span></span><br><span class="line">--2021-09-14 13:31:21--  https://releases.hashicorp.com/terraform/1.0.6/terraform_1.0.6_linux_amd64.zip</span><br><span class="line">Resolving releases.hashicorp.com (releases.hashicorp.com)... 151.101.129.183, 151.101.1.183, 151.101.65.183, ...</span><br><span class="line">Connecting to releases.hashicorp.com (releases.hashicorp.com)|151.101.129.183|:443... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 32677516 (31M) [application/zip]</span><br><span class="line">Saving to: ‘terraform_1.0.6_linux_amd64.zip’</span><br><span class="line"></span><br><span class="line">100%[=================================================================================================================&gt;] 32,677,516  11.0MB/s   <span class="keyword">in</span> 2.8s</span><br><span class="line"></span><br><span class="line">2021-09-14 13:31:24 (11.0 MB/s) - ‘terraform_1.0.6_linux_amd64.zip’ saved [32677516/32677516]</span><br><span class="line"></span><br><span class="line">[root@master1 ~]<span class="comment">#</span></span><br><span class="line">[root@master1 ~]<span class="comment"># unzip terraform_1.0.6_linux_amd64.zip</span></span><br><span class="line">Archive:  terraform_1.0.6_linux_amd64.zip</span><br><span class="line">  inflating: terraform</span><br><span class="line"></span><br><span class="line">[root@master1 ~]<span class="comment">#</span></span><br><span class="line">[root@master1 ~]<span class="comment"># mv terraform /usr/local/bin/</span></span><br><span class="line">mv: overwrite ‘/usr/<span class="built_in">local</span>/bin/terraform’? y</span><br><span class="line">[root@master1 ~]<span class="comment"># terraform version</span></span><br><span class="line">Terraform v1.0.6</span><br></pre></td></tr></table></figure>
<h3 id="cannot-execute-binary-file">cannot execute binary file</h3>
<p>如果在安裝完後，使用 <code>terrform</code> cli 時，發現以下錯誤</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@master1 ~]# terraform version</span><br><span class="line">-bash: /usr/local/bin/terraform: cannot execute binary file</span><br></pre></td></tr></table></figure>
<p>則是因為下載到錯誤的作業系統的安裝包。</p>
<h6 id="Reference">Reference</h6>
<ul>
<li><a href="https://www.terraform.io/upgrade-guides/1-0.html">https://www.terraform.io/upgrade-guides/1-0.html</a></li>
</ul>
]]></content>
      <categories>
        <category>DevOps</category>
        <category>Terraform</category>
      </categories>
      <tags>
        <tag>terraform</tag>
      </tags>
  </entry>
  <entry>
    <title>[KVM] 為 image 瘦身</title>
    <url>/shrink-kvm-image-%E7%98%A6%E8%BA%AB/</url>
    <content><![CDATA[<p><font style="background:RosyBrown" color="Bisque">2022-02-22 Tuesday 22:22:22, Happy the 2 Day !!!</font> ✌️ 🌟</p>
<h2 id="問題說明">問題說明</h2>
<p>在建立 vm 後，發現其使用的 qcow2 image 檔案大小超級大。使用 qemu-img info 查看 vm 真正的使用容量僅 2G 但實際上卻佔用了啟動時劃分的 disk size 如範例的 60G。</p>
<span id="more"></span>
<p><img src="https://imgur.com/cxEZUrX.png" alt=""></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@nexdata images]# qemu-img info rockym</span><br><span class="line">image: rockym</span><br><span class="line">file format: qcow2</span><br><span class="line">virtual size: 60G (64424509440 bytes)</span><br><span class="line">disk size: 2.1G</span><br><span class="line">cluster_size: 65536</span><br><span class="line">Format specific information:</span><br><span class="line">    compat: 1.1</span><br><span class="line">    lazy refcounts: true</span><br><span class="line">    refcount bits: 16</span><br><span class="line">    corrupt: false</span><br></pre></td></tr></table></figure>
<h2 id="解決方式">解決方式</h2>
<p>透過 convert 轉換 qcow2 檔案縮小：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">qemu-img convert -p -f qcow2 ./vm-disk-original.qcow2 -O qcow2 ./vm-disk-shrinked.qcow2</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/EITaak4.png" alt=""></p>
<div class="warning">
<p>以防萬一，請先將 VM 關機後再操作。</p>
</div>
<h2 id="Reference">Reference</h2>
<ul>
<li><a href="https://serverfault.com/questions/881595/kvm-guest-qcow2-larger-than-disk-size">https://serverfault.com/questions/881595/kvm-guest-qcow2-larger-than-disk-size</a></li>
</ul>
]]></content>
      <categories>
        <category>DevOps</category>
        <category>KVM</category>
      </categories>
      <tags>
        <tag>KVM</tag>
      </tags>
  </entry>
  <entry>
    <title>[Docker] 限制 log 大小以避免硬碟爆掉</title>
    <url>/truncate-docker-log/</url>
    <content><![CDATA[<p>默認情況下，Docker 會抓所有 container 的標準輸出和標準錯誤 (stdout &amp; stderr)，並將其寫入 <code>/var/lib/docker/containers/[container-id]/[container-id]-json.log</code> 的 json 文件中。</p>
<span id="more"></span>
<p>當 container 運作時間愈長，Log 檔案會隨之變大，進而導致機器硬碟空間被 Log 佔據。因此需限制 Log 的檔案大小，以避免硬碟被塞爆。例如以下這個 log 就佔了 1G 多的磁碟空間：<br>
<img src="https://imgur.com/z1p61Ox.png" alt=""></p>
<h3 id="手動清除日誌">手動清除日誌</h3>
<p>可以使用下列幾種方法清除該 log 檔案內容：</p>
<h4 id="redirection-operator">redirection operator</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ &gt; &lt;log file&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>&gt;</code> 重新導向運算子，因檔案已經存在，所以重新導向後會清空原有的內容。</li>
</ul>
<h4 id="truncate">truncate</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ truncate --size 0 &lt;log file&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>truncate : 將文件縮小或放大到指定大小的命令。</p>
</li>
<li>
<p>–size : 指定大小的參數。</p>
</li>
</ul>
<h4 id="dev-null">/dev/null</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cat /dev/null &gt; &lt;log file&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>/dev/null：是在類 Unix 操作系統上稱為空設備的特殊設備，當從中讀取數據時不會有任何數據，在寫入時也不存儲任何數據。</li>
</ul>
<p><img src="https://imgur.com/ZJk0xmk.png" alt=""><br>
上圖使用第一種清除方法，可以看到 1G 的空間被釋放！</p>
<p>但每次都手動清除是件很麻煩的事，可以考慮使用 <code>cronjob</code> 設定排程，或是直接設定 docker log 的容量上限。</p>
<h3 id="設定自動日誌滾動">設定自動日誌滾動</h3>
<p>docker 默認的日誌驅動程式設定可以在 <code>/etc/docker/daemon.json</code> 中定義，若無此文件，則需額外新增，設定值可參考下列內容：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;log-driver&quot;</span>: <span class="string">&quot;json-file&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;log-opts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;max-size&quot;</span>: <span class="string">&quot;50m&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;max-file&quot;</span>: <span class="string">&quot;3&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>選項</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>max-size</td>
<td>滾動前日誌的最大大小。一個正整數加上一個代表測量單位（k，m 或 g）的修飾符。默認為 -1（代表無限制）</td>
</tr>
<tr>
<td>max-file</td>
<td>可以存在的最大日誌文件數量。如果滾動日誌會創建多余文件，則會刪除最舊的文件。只有在設置了 max-size 時才有效。一個正整數。默認為 1。</td>
</tr>
</tbody>
</table>
<p>執行以下命令來重新加載 docker daemon。<font style="background:MistyRose">新的配置將在重新啟動後適用於所有<span class="dotunderletter"><strong>新</strong>建立</span>的容器，現有容器即使重啟 Docker 也不會使用新的日誌記錄配置。</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ systemctl daemon-reload</span><br><span class="line"></span><br><span class="line">$ systemctl restart docker</span><br></pre></td></tr></table></figure>
<h3 id="個別為單一容器設置日誌滾動">個別為單一容器設置日誌滾動</h3>
<p>若不想全局配置，也可以在個別容器啟動時，在 command 中加入參數改動。</p>
<h4 id="docker-run">docker run</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run \</span><br><span class="line">    --log-driver json-file \</span><br><span class="line">    --log-opt max-size=10m \</span><br><span class="line">    --log-opt max-file=10 </span><br><span class="line">    ubuntu:18.04</span><br></pre></td></tr></table></figure>
<h4 id="docker-compose">docker-compose</h4>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.2&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&#x27;nginx:latest&#x27;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;80:80&#x27;</span></span><br><span class="line">    <span class="attr">logging:</span></span><br><span class="line">      <span class="attr">driver:</span> <span class="string">&quot;json-file&quot;</span></span><br><span class="line">      <span class="attr">options:</span></span><br><span class="line">        <span class="attr">max-size:</span> <span class="string">&quot;1k&quot;</span></span><br><span class="line">        <span class="attr">max-file:</span> <span class="string">&quot;3&quot;</span></span><br></pre></td></tr></table></figure>
<h6 id="Reference">Reference</h6>
<ul>
<li><a href="https://www.rdaemon.com/truncate-files-using-command-line-tools">https://www.rdaemon.com/truncate-files-using-command-line-tools</a></li>
<li><a href="https://blog.csdn.net/kikajack/article/details/79575659">https://blog.csdn.net/kikajack/article/details/79575659</a></li>
<li><a href="https://blog.boatswain.io/zh/post/docker-container-log-rotation/">https://blog.boatswain.io/zh/post/docker-container-log-rotation/</a></li>
</ul>
]]></content>
      <categories>
        <category>DevOps</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>[SQA] eslint &amp; husky 簡介</title>
    <url>/week3-preview/</url>
    <content><![CDATA[<h4 id="eslint-npm-module">eslint (npm module)</h4>
<p>eslint 等於 es + lint，用來檢查 Javascript coding style 的工具。</p>
<ul>
<li>es = ECMAScript, Javascript 的標準</li>
<li>lint = 一個語法檢查的工具</li>
</ul>
<span id="more"></span>
<h4 id="husky-npm-module">husky (npm module)</h4>
<p>husky 讓我們能在 package.json 配置 git hook 腳本。</p>
<hr>
<p>使用 npm install 完成套件安裝 eslint + husky後，就會在每次 commit 前自動檢查程式碼是否符合規範，符合才能提交成功。通常用在團隊開發時，可以統一程式碼風格。<br>
<img src="https://imgur.com/PVW8W9i.png" alt=""><br>
不符合規範時會在 console 印出錯誤訊息，<br>
<img src="https://imgur.com/J4Y7BCS.png" alt=""></p>
<p><code>前面的數字代表第幾行：後面的數字代表該行的幾個字發生錯誤。</code><br>
通常都<strong>從後面開始修</strong>，因為有些錯誤是要加空行，從前面改的話會導致後面的行號會亂掉。如果真的亂掉的話，那只要在重新下 git commit 一次，讓 eslint 重新檢查。</p>
<p>如果想讓 eslint 忽略某些檢查的話，例如要忽略可以宣告沒有被使用的變數，只要在最前面加上註解：<br>
<code>// eslint-disable no-unused-vars</code><br>
<img src="https://imgur.com/jp7ckfz.png" alt=""></p>
<h3 id="Source">Source</h3>
<p>[All] 此篇為觀看 Lidemy MTR04 的筆記，圖片來源取自上課影片</p>
]]></content>
      <categories>
        <category>SQA</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>eslint</tag>
        <tag>husky</tag>
      </tags>
  </entry>
  <entry>
    <title>[Vue] 解析 vue-admin-template</title>
    <url>/vue-admin-template1/</url>
    <content><![CDATA[<h3 id="專案結構-src">專案結構(src)</h3>
<span id="more"></span>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">user@pc10:~/vue-admin-template/src$ tree -L 1</span><br><span class="line">├── api                 <span class="comment"># 所有請求，對後端的請求皆寫在這裡</span></span><br><span class="line">├── App.vue             <span class="comment"># 入口頁面</span></span><br><span class="line">├── assets              <span class="comment"># 圖片等資源</span></span><br><span class="line">├── components          <span class="comment"># 全局公共組件，非公共組件在各自的 view 中維護</span></span><br><span class="line">├── icons</span><br><span class="line">├── layout              <span class="comment"># 全局 layout</span></span><br><span class="line">├── main.js             <span class="comment"># 程式入口</span></span><br><span class="line">├── permission.js       <span class="comment"># 權限管理</span></span><br><span class="line">├── router              <span class="comment"># 路由，把頁面放進導航欄</span></span><br><span class="line">├── settings.js</span><br><span class="line">├── store               <span class="comment"># 全局 store 管理，Vuex 倉庫，用於儲存狀態</span></span><br><span class="line">├── styles              <span class="comment"># 全局樣式</span></span><br><span class="line">├── utils               <span class="comment"># 全局公共方法，非公共在各自的 view 中維護</span></span><br><span class="line">└── views               <span class="comment"># 所有頁面，自添加的頁面放這裡  </span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="main-js">main.js</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;normalize.css/normalize.css&#x27;</span> <span class="comment">// A modern alternative to CSS resets</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> locale <span class="keyword">from</span> <span class="string">&#x27;element-ui/lib/locale/lang/en&#x27;</span> <span class="comment">// lang i18n</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@/styles/index.scss&#x27;</span> <span class="comment">// global css</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// In Vue Webpack template, Webpack is configured to replace @/ with src path，@ 是webpack中定義的別名，代替 resolve(&#x27;src&#x27;) 指向的路徑</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@/icons&#x27;</span> <span class="comment">// icon</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@/permission&#x27;</span> <span class="comment">// permission control</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * If you don&#x27;t want to use mock-server</span></span><br><span class="line"><span class="comment"> * you want to use MockJs for mock api</span></span><br><span class="line"><span class="comment"> * you can execute: mockXHR()</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Currently MockJs will be used in the production environment,</span></span><br><span class="line"><span class="comment"> * please remove it before going online ! ! !</span></span><br><span class="line"><span class="comment"> * 下面 if 區塊的用途是指在 production 環境下會使用 mock server，如果後端已經做好準備上線的話，請記得註解掉這邊</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; mockXHR &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../mock&#x27;</span>)</span><br><span class="line">  mockXHR()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 補充: Mock 是一個模擬數據生成器，用來模擬 ajax 請求，當後端還沒開發完成時，前端可自行寫靜態模擬數據</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// set ElementUI lang to EN</span></span><br><span class="line"><span class="comment">// 如果想要中文版 element-ui，按 Vue.use(ElementUI) 方式聲明</span></span><br><span class="line">Vue.use(ElementUI, &#123; locale &#125;)</span><br><span class="line"><span class="comment">// Vue.use(plugin) 是用來安裝插件的，就可以在組件中調用 this.$router、this.$route、this.$store、this.$alert() (ElementUI的彈窗組件) 參數(方法)。</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"><span class="comment">// 關掉提醒 production 的警告訊息，開發環境下 Vue 會提供很多警告來幫你對付常見的錯誤與陷阱。而在生產環境下，這些警告語句卻沒有用，反而會增加應用的體積。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,  <span class="comment">// 要綁定的 DOM 元件</span></span><br><span class="line">  router,  </span><br><span class="line">  store, <span class="comment">// 在根實例中註冊 store，會注入到所有子元件中供他們使用。使子元件能用 this.$store 存取 store 中的狀態。</span></span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App)  <span class="comment">//createElement</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用 new Vue 建構 vue 實體(instance)，傳入一個選項物件(options object)，裡面含了所有實體所需的屬性，這邊就將掛載元素(el)、router、store、render 等屬性，其他屬性還有如資料(data)、方法(methods)、模板(template)、生命週期掛鉤等等，都可以在官網 API 文件中查找。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 除了使用 el 綁定 HTML 元素外，也可以在宣告完實例後用 $mount 的方法來掛載</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">new Vue(&#123;</span></span><br><span class="line"><span class="comment">  render: h =&gt; h(App)</span></span><br><span class="line"><span class="comment">&#125;).$mount(&#x27;#app&#x27;)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="App-vue-router-view">App.vue - router-view</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">/* 整個 div 的視圖由 router-view 取代，為路由的進入點，路由切換的時候會在這顯示不同的內容。*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">/* </span><br><span class="line">export default 為 ES6 的語法</span><br><span class="line"></span><br><span class="line">export 用來導出模塊/變數，通常是一個 Vue instance 的選項物件(options object)，可以在其他地方使用 import 引入，舉個栗子，這邊 export 了 App.vue 模組，在上面 main.js 使用 import 匯入了。</span><br><span class="line"></span><br><span class="line">export 可區分為兩種：</span><br><span class="line">-named export（具名匯出）：可匯獨立的物件、變數、函式等等，匯出前必須給予特定名稱，而匯入時也必須使用相同的名稱。另外，一個檔案中可以有多個 named export。</span><br><span class="line">-default export（預設匯出）：一個檔案僅能有唯一的 default export，而此類型不需要給予名稱。</span><br><span class="line"></span><br><span class="line">name: ‘app’ 相當於一個全局 ID；可以不寫；寫了可以提供更好的調用。</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="router-index-js">router/index.js</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用 vue-router</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Layout */</span></span><br><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">&#x27;@/layout&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> constantRoutes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,  <span class="comment">// 指定要跳轉的路徑</span></span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/login/index&#x27;</span>),  <span class="comment">// 路由對應到的組件</span></span><br><span class="line">    <span class="attr">hidden</span>: <span class="literal">true</span>  <span class="comment">// 項目將不會顯示在 sidebar</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">    component: () =&gt; import(&#x27;@/views/login/index&#x27;),</span></span><br><span class="line"><span class="comment">    lazy loading，把不同路由對應的組件分割成不同的代碼塊，然後當路由被訪問的時候才載入組件，更加高效。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/404&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/404&#x27;</span>),</span><br><span class="line">    <span class="attr">hidden</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: Layout,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/dashboard&#x27;</span>,  <span class="comment">// 重定向</span></span><br><span class="line">    <span class="attr">children</span>: [&#123;   <span class="comment">// 嵌套路由的子路由 </span></span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;dashboard&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Dashboard&#x27;</span>,  <span class="comment">// 路由名稱</span></span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/dashboard/index&#x27;</span>),</span><br><span class="line">      <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;Dashboard&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;dashboard&#x27;</span> &#125; <span class="comment">// 路由元訊息</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 404 page must be placed at the end !!!含有通配符(*)的路由應該放在最後，通常用於客戶端 404 錯誤。</span></span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/404&#x27;</span>, <span class="attr">hidden</span>: <span class="literal">true</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> createRouter = <span class="function">() =&gt;</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  <span class="attr">scrollBehavior</span>: <span class="function">() =&gt;</span> (&#123; <span class="attr">y</span>: <span class="number">0</span> &#125;),  <span class="comment">// 對於所有路由導航，切換後讓頁面滾動到頂部。</span></span><br><span class="line">  <span class="attr">routes</span>: constantRoutes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = createRouter()</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">resetRouter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> newRouter = createRouter()</span><br><span class="line">  router.matcher = newRouter.matcher <span class="comment">// reset router</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Frontend</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>vue-admin-template</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Rocky Linux 8 安裝 Kubernetes 1.23 (containerd as cri)</title>
    <url>/%E5%AE%89%E8%A3%9D-Kubernetes-1-23/</url>
    <content><![CDATA[<p>kubernetes 1.22 版之後，就不再支持 Docker 作為 container runtime 以及管理容器及鏡像的工具了。可以使用 <code>containerd</code> 取代 docker 的 container runtime；以及 <code>crictl</code> 作為 CRI(Container Runtime Interface)，另外 podman 也可以用來管理容器和鏡像。本篇記錄基於 containerd &amp; crictl 使用 kubeadm 部屬 Kubernetes 集群的過程。</p>
<span id="more"></span>
<h2 id="系統環境配置-所有節點">系統環境配置 (所有節點)</h2>
<h3 id="最小系統資源需求">最小系統資源需求</h3>
<ul>
<li>每台機器 4 GiB 以上 RAM</li>
<li>master control plane 節點至少需要有兩個以上的 vCPU</li>
<li>集群中所有機器之間的完整網絡連接 (can be private or public)</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">Server Type</th>
<th style="text-align:center">Hostname</th>
<th style="text-align:center">Spec</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">master</td>
<td style="text-align:center"><a href="http://node.ulatest.com">node.ulatest.com</a></td>
<td style="text-align:center">4 vCPU, 8G RAM</td>
</tr>
<tr>
<td style="text-align:center">worker</td>
<td style="text-align:center"><a href="http://rockyw.ulatest.com">rockyw.ulatest.com</a></td>
<td style="text-align:center">8 vCPU, 16G RAM</td>
</tr>
<tr>
<td style="text-align:center">worker</td>
<td style="text-align:center"><a href="http://rockyw2.ulatest.com">rockyw2.ulatest.com</a></td>
<td style="text-align:center">8 vCPU, 16G RAM</td>
</tr>
</tbody>
</table>
<h3 id="配置-etc-hosts">配置 /etc/hosts</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /etc/hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line"></span><br><span class="line">10.1.5.130  nexdata nexdata.ulatest.com</span><br><span class="line">10.1.5.146  node node.ulatest.com</span><br><span class="line">10.1.5.147  rockyw rockyw.ulatest.com</span><br><span class="line">10.1.5.148  rockyw2 rockyw2.ulatest.com</span><br><span class="line"></span><br><span class="line">10.1.5.130  nfs nfs.ulatest.com</span><br></pre></td></tr></table></figure>
<h3 id="更新軟體套件">更新軟體套件</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum update -y</span><br></pre></td></tr></table></figure>
<h3 id="系統配置">系統配置</h3>
<h4 id="停用防火牆">停用防火牆</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure>
<h4 id="關閉-SELINUX">關閉 SELINUX</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27;</span> /etc/selinux/config</span><br><span class="line">cat /etc/selinux/config</span><br><span class="line"><span class="comment"># This file controls the state of SELinux on the system.</span></span><br><span class="line"><span class="comment"># SELINUX= can take one of these three values:</span></span><br><span class="line"><span class="comment">#     enforcing - SELinux security policy is enforced.</span></span><br><span class="line"><span class="comment">#     permissive - SELinux prints warnings instead of enforcing.</span></span><br><span class="line"><span class="comment">#     disabled - No SELinux policy is loaded.</span></span><br><span class="line">SELINUX=disabled</span><br><span class="line"><span class="comment"># SELINUXTYPE= can take one of these three values:</span></span><br><span class="line"><span class="comment">#     targeted - Targeted processes are protected,</span></span><br><span class="line"><span class="comment">#     minimum - Modification of targeted policy. Only selected processes are protected.</span></span><br><span class="line"><span class="comment">#     mls - Multi Level Security protection.</span></span><br><span class="line">SELINUXTYPE=targeted</span><br></pre></td></tr></table></figure>
<h4 id="關閉-swap">關閉 swap</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Turn off swap</span></span><br><span class="line">swapoff -a</span><br><span class="line"><span class="comment"># comment out the line of swap&#x27;s mount point</span></span><br><span class="line">sed -i <span class="string">&#x27;/ swap / s/^\(.*\)$/#\1/g&#x27;</span> /etc/fstab</span><br></pre></td></tr></table></figure>
<h4 id="配置-kernel-module-自動加載">配置 kernel module 自動加載</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt; <span class="string">EOF &gt; /etc/modules-load.d/containerd.conf</span></span><br><span class="line"><span class="string">overlay</span></span><br><span class="line"><span class="string">br_netfilter</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 執行以下命令使配置生效</span></span><br><span class="line">modprobe overlay</span><br><span class="line">modprobe br_netfilter</span><br></pre></td></tr></table></figure>
<h4 id="調整-kernel-參數">調整 kernel 參數</h4>
<p>Kubernetes 的核心是依靠 netfilter kernel module 來設定低級別的集群 IP 負載均衡，需要兩個關鍵的 module：IP轉發和橋接。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt; <span class="string">EOF &gt; /etc/sysctl.d/kubernetes.conf</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class="line"><span class="string">net.ipv4.ip_forward = 1</span></span><br><span class="line"><span class="string">vm.swappiness = 0</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 執行以下命令使配置生效</span></span><br><span class="line">sysctl -p /etc/sysctl.d/kubernetes.conf</span><br></pre></td></tr></table></figure>
<p>以上操作含意如下：</p>
<ul>
<li>開啟 iptables 對 bridge 的數據進行處理</li>
<li>開啟數據包轉發功能（實現 vxlan）</li>
<li>禁止使用 swap 空間，只有當系統 OOM 時才允許使用它</li>
</ul>
<h4 id="開啟-ipvs-module">開啟 ipvs module</h4>
<p>Kube-Proxy 是 Kubernetes 用來控制 Service 轉發過程的一個元件，預設會使用 iptables 作為 Kubernetes Service 的底層實現方式，而此模式最主要的問題是在服務多的時候產生太多的 iptables 規則，大規模情況下有明顯的性能問題。可以透過參數變化的方式要求 Kube-Proxy 使用 ipvs。開啟 ipvs 的前提條件是加載以下的 kernal module：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt; <span class="string">EOF &gt; /etc/sysconfig/modules/ipvs.modules</span></span><br><span class="line"><span class="string">#!/bin/bash</span></span><br><span class="line"><span class="string">modprobe -- ip_vs</span></span><br><span class="line"><span class="string">modprobe -- ip_vs_rr</span></span><br><span class="line"><span class="string">modprobe -- ip_vs_wrr</span></span><br><span class="line"><span class="string">modprobe -- ip_vs_sh</span></span><br><span class="line"><span class="string">modprobe -- nf_conntrack</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">chmod 755 /etc/sysconfig/modules/ipvs.modules &amp;&amp; bash /etc/sysconfig/modules/ipvs.modules &amp;&amp; lsmod | grep -e ip_vs -e nf_conntrack</span><br></pre></td></tr></table></figure>
<p>上面腳本創建了的 <code>/etc/sysconfig/modules/ipvs.modules</code> 文件，保證在節點重啟後能自動加載所需模塊。使用 <code>lsmod | grep -e ip_vs -e nf_conntrack</code> 命令查看是否已經正確加載所需的內核模塊。<br>
<img src="https://imgur.com/BqaYQks.png" alt=""><br>
接下來還需要確保各個節點上已經安裝了 ipset 軟件包，以及管理工具 ipvsadm 便於查看 ipvs 的代理規則。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y ipset ipvsadm</span><br></pre></td></tr></table></figure>
<p>如果以上前提條件如果不滿足，則即使 kube-proxy 的配置開啟了 ipvs 模式，也會退回到 iptables 模式。</p>
<h2 id="安裝-containerd-crictl-所有節點">安裝 containerd &amp; crictl (所有節點)</h2>
<h3 id="安裝-containerd">安裝 containerd</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils</span><br><span class="line"><span class="comment"># 使用 docker.ce 作為 containerd 的 repo</span></span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">yum install -y containerd.io</span><br><span class="line">systemctl <span class="built_in">enable</span> containerd</span><br></pre></td></tr></table></figure>
<p>生成 containerd 的配置文件:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /etc/containerd</span><br><span class="line">containerd config default &gt; /etc/containerd/config.toml</span><br></pre></td></tr></table></figure>
<p>根據 <a href="https://kubernetes.io/docs/setup/production-environment/container-runtimes/">Kubernetes 文檔 Container runtimes</a> 中的內容，對於使用 systemd 作為 init system 的 Linux 發行版，使用 systemd 作為容器的 cgroup driver 可以確保服務器節點在資源緊張的情況更加穩定，因此這裡配置各個節點上 containerd 的 cgroup driver 為 systemd。</p>
<ul>
<li>如果檔案中<code>[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes.runc.options]</code> 區塊下，沒有 <code>SystemdCgroup</code> 的選項，下：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s|\(\s\+\)\[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes.runc.options\]|\1\[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes.runc.options\]\n\1  SystemdCgroup = true|g&#x27;</span> /etc/containerd/config.toml</span><br></pre></td></tr></table></figure>
<ul>
<li>如果檔案中<code>[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes.runc.options]</code> 區塊下，有 <code>SystemdCgroup = false</code> 的選項，下：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s/            SystemdCgroup = false/            SystemdCgroup = true/&#x27;</span> /etc/containerd/config.toml</span><br></pre></td></tr></table></figure>
<p>修改完畢後 config 內容會如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes.runc]</span><br><span class="line">  ...</span><br><span class="line">  [plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes.runc.options]</span><br><span class="line">    SystemdCgroup = true</span><br></pre></td></tr></table></figure>
<p>重啟 containerd 已應用 config</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart containerd</span><br></pre></td></tr></table></figure>
<h3 id="安裝-crictl">安裝 crictl</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y wget tar</span><br><span class="line">wget https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.23.0/crictl-v1.23.0-linux-amd64.tar.gz</span><br><span class="line">tar zxvf crictl-v1.23.0-linux-amd64.tar.gz -C /usr/<span class="built_in">local</span>/bin</span><br></pre></td></tr></table></figure>
<p>設定 container runtime interface 為 containerd</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt; <span class="string">EOF &gt; /etc/crictl.yaml</span></span><br><span class="line"><span class="string">runtime-endpoint: unix:///run/containerd/containerd.sock</span></span><br><span class="line"><span class="string">image-endpoint: unix:///run/containerd/containerd.sock</span></span><br><span class="line"><span class="string">timeout: 10</span></span><br><span class="line"><span class="string">debug: false</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
<p>測試</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crictl images</span><br><span class="line">IMAGE               TAG                 IMAGE ID            SIZE</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/HJ9AMbi.png" alt=""><br>
如果上方 CRI 沒有指定的話，會出現以下錯誤<br>
<img src="https://imgur.com/BS6vsBx.png" alt=""></p>
<h2 id="安裝-kubernetes-套件-所有節點">安裝 kubernetes 套件 (所有節點)</h2>
<h3 id="新增-kubernetes-repo">新增 kubernetes repo</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt; <span class="string">EOF &gt; /etc/yum.repos.d/kubernetes.repo</span></span><br><span class="line"><span class="string">[kubernetes]</span></span><br><span class="line"><span class="string">name=Kubernetes</span></span><br><span class="line"><span class="string">baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=1</span></span><br><span class="line"><span class="string">repo_gpgcheck=1</span></span><br><span class="line"><span class="string">gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
<p>在更新 yum 源後，使用 yum makecache 生成緩存，將套件包訊息提前在本地 cache 一份，用來提高搜索安裝套件的速度。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum makecache -y </span><br></pre></td></tr></table></figure>
<p>通過 yum list 命令可以查看當前源的穩定版本，目前的穩定版本是 1.23.4-0。安裝 kubeadm 便會將 kubelet、kubectl 等依賴一併安裝。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum list kubeadm</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/na2gxVz.png" alt=""></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y kubeadm-1.23.4-0</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/q7eRhL4.png" alt=""></p>
<h3 id="配置命令參數自動補全功能">配置命令參數自動補全功能</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y bash-completion</span><br><span class="line">echo &#x27;source &lt;(kubectl completion bash)&#x27; &gt;&gt; $HOME/.bashrc</span><br><span class="line">echo &#x27;source &lt;(kubeadm completion bash)&#x27; &gt;&gt; $HOME/.bashrc</span><br><span class="line">source $HOME/.bashrc</span><br></pre></td></tr></table></figure>
<h3 id="啟動kubelet-服務">啟動kubelet 服務</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable kubelet</span><br><span class="line">systemctl restart kubelet</span><br></pre></td></tr></table></figure>
<h2 id="配置節點">配置節點</h2>
<h3 id="kubeadm-部署-master-節點">kubeadm 部署 master 節點</h3>
<h4 id="準備配置文件">準備配置文件</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubeadm config print init-defaults &gt; kubeadm-init.yaml</span><br><span class="line">vim kubeadm.yaml</span><br></pre></td></tr></table></figure>
<p>更改以下配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeadm.k8s.io/v1beta3</span></span><br><span class="line"><span class="attr">bootstrapTokens:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">groups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">system:bootstrappers:kubeadm:default-node-token</span></span><br><span class="line">  <span class="attr">token:</span> <span class="string">abcdef.0123456789abcdef</span></span><br><span class="line">  <span class="attr">ttl:</span> <span class="string">24h0m0s</span></span><br><span class="line">  <span class="attr">usages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">signing</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">authentication</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">InitConfiguration</span></span><br><span class="line"><span class="attr">localAPIEndpoint:</span></span><br><span class="line">  <span class="attr">advertiseAddress:</span> <span class="number">10.1</span><span class="number">.5</span><span class="number">.146</span> <span class="comment"># 改為 master node IP</span></span><br><span class="line">  <span class="attr">bindPort:</span> <span class="number">6443</span></span><br><span class="line"><span class="attr">nodeRegistration:</span></span><br><span class="line">  <span class="attr">criSocket:</span> <span class="string">unix:///run/containerd/containerd.sock</span> <span class="comment"># 改為 containerd Unix socket 地址</span></span><br><span class="line">  <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rockym</span> <span class="comment"># 指定節點名稱</span></span><br><span class="line">  <span class="attr">taints:</span> <span class="literal">null</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiServer:</span></span><br><span class="line">  <span class="attr">timeoutForControlPlane:</span> <span class="string">4m0s</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeadm.k8s.io/v1beta3</span></span><br><span class="line"><span class="attr">certificatesDir:</span> <span class="string">/etc/kubernetes/pki</span></span><br><span class="line"><span class="attr">clusterName:</span> <span class="string">kubernetes</span></span><br><span class="line"><span class="attr">controllerManager:</span> &#123;&#125;</span><br><span class="line"><span class="attr">dns:</span> &#123;&#125;</span><br><span class="line"><span class="attr">etcd:</span></span><br><span class="line">  <span class="attr">local:</span></span><br><span class="line">    <span class="attr">dataDir:</span> <span class="string">/var/lib/etcd</span></span><br><span class="line"><span class="attr">imageRepository:</span> <span class="string">k8s.gcr.io</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterConfiguration</span></span><br><span class="line"><span class="attr">kubernetesVersion:</span> <span class="number">1.23</span><span class="number">.0</span></span><br><span class="line"><span class="attr">networking:</span></span><br><span class="line">  <span class="attr">dnsDomain:</span> <span class="string">cluster.local</span></span><br><span class="line">  <span class="attr">serviceSubnet:</span> <span class="number">10.96</span><span class="number">.0</span><span class="number">.0</span><span class="string">/12</span></span><br><span class="line">  <span class="attr">podSubnet:</span> <span class="number">10.244</span><span class="number">.0</span><span class="number">.0</span><span class="string">/16</span> <span class="comment"># 指定 pod 子網 cidr，在設定 calico 時會用到</span></span><br><span class="line"><span class="attr">scheduler:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<h4 id="叢集初始化">叢集初始化</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubeadm init --config=kubeadm-init.yaml</span><br></pre></td></tr></table></figure>
<p>完成後按照提示將 /etc/kubernetes/admin.conf 複製到 $HOME/.kube/config</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure>
<p>並複製下面那一串加入指令以便其他 node 加入 (兩個小時過期)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubeadm join 10.1.5.146:6443 --token abcdef.0123456789abcdef \</span><br><span class="line">--discovery-token-ca-cert-hash sha256:fc56685aedecf323023637a6e02cc1584cfc88bfeb0690dc0e2a1feca278f008</span><br></pre></td></tr></table></figure>
<p>或是之後使用 kubeadm token create --print-join-command 建立新的。<br>
<img src="https://imgur.com/bQmARMt.png" alt=""><br>
以上就完成 master 節點的部屬，可以使用 kubectl command 確認。<br>
<img src="https://imgur.com/kW9kScR.png" alt=""><br>
因目前網路尚未設置，所以 coredns 狀態為 Pending 是正常的。</p>
<h4 id="安裝-calico">安裝 calico</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -s https://docs.projectcalico.org/manifests/calico.yaml |  kubectl apply -f -</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/AN29VqM.png" alt=""><br>
安裝完畢後就可以發現節點已經部屬完成了。<br>
<img src="https://imgur.com/d9Is0x1.png" alt=""></p>
<h3 id="加入工作節點">加入工作節點</h3>
<p>在各工作節點上直接輸入上方的 join command</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubeadm join 10.1.5.146:6443 --token abcdef.0123456789abcdef \</span><br><span class="line">--discovery-token-ca-cert-hash sha256:fc56685aedecf323023637a6e02cc1584cfc88bfeb0690dc0e2a1feca278f008</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/nIV8pGu.png" alt=""><br>
就可大功告成了~<br>
<img src="https://imgur.com/Q6AICJ9.png" alt=""></p>
<div class="info">
<p><strong>後記</strong><br>
有些截圖裡面可以發現原本的 master node 的 hostname 本來叫 rockym 的，可是在加入 master node 節點的時候的名字忘記改 (冏) 導致 master node 強迫改名為 node …<br>
求助谷歌大神，發現改節點名稱最乾淨且簡單的方式就是刪掉節點後重新加入，但不巧地是我要改的節點就是唯一一個的 master node =__= 只好折衷將錯就錯改 hostname，不知道後續會不會發生問題，先記錄一下。</p>
</div>
<h2 id="Reference">Reference</h2>
<ul>
<li><a href="https://fuckcloudnative.io/posts/ipvs-how-kubernetes-services-direct-traffic-to-pods/">kube-proxy</a></li>
<li><a href="https://kubernetes.io/zh/docs/concepts/services-networking/service/#proxy-mode-ipvs">https://kubernetes.io/zh/docs/concepts/services-networking/service/#proxy-mode-ipvs</a></li>
<li><a href="https://kubernetes.io/docs/setup/production-environment/container-runtimes/#containerd">https://kubernetes.io/docs/setup/production-environment/container-runtimes/#containerd</a></li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>程式初學者基礎知識 - CLI, 計概, 網路, session &amp; cookie, 演算法</title>
    <url>/Mentor-CS101-Note/</url>
    <content><![CDATA[<p>這篇文章是紀錄程式實驗導師第一周觀看課程 CS101 的筆記，主要闡述了程式初學者該具備的基礎知識，包含 Coding 簡介、前後端介紹，以及一些計算機概論。</p>
<h3 id="到底寫程式是什麼">到底寫程式是什麼</h3>
<p><code>Coding</code> 的目的就是要跟電腦溝通，要對電腦下指令，讓電腦照著指示做。<br>
那為什麼需要程式碼呢？ 因為電腦只看得懂以 0 和 1 組成的機器語言，且它針對各種不同的事都只按照同一個標準去做事（標準化），例如不同廠牌的 USB 須按照 USB 標準去生產，而電腦只須懂這個標準就好。<br>
所以寫程式的標準就是程式碼，而市面上的各種程式語言最終都會轉換成電腦懂得機器語言。</p>
<span id="more"></span>
<h3 id="程式碼不是重點，解決問題才是">程式碼不是重點，解決問題才是</h3>
<p>把問題拆解，並試著把解法寫成條列式，一行就是一個動作，例如：找單字裡面有沒有包含字母 P，有的話位置是第幾個？<br>
在經過將無限重複的步驟有限化並加上結束判斷、將提到的變數命名一個代號、將答案回傳等都納入後會得到下面的步驟：<br>
<img src="https://imgur.com/utdAp5U.png" alt=""></p>
<h3 id="什麼是-Command-Line">什麼是 Command Line</h3>
<p>與之對應的是圖形化介面 GUI (Graphic User Interface)，GUI 指的是用看得到的圖形介面去操作電腦。而 Command Line Interface 指的是只能透過文字跟電腦做溝通的介面。<br>
問題是，GUI 這麼直覺好用，為什麼還要有 CLI 呢？因為—</p>
<ol>
<li>有些功能只能用 CLI</li>
<li>有時候用文字去操作指令比較快</li>
</ol>
<p>這邊羅列幾個常用到的 Command：</p>
<ul>
<li>pwd：print working directory，列出當前所在位置</li>
<li>ls：list Segment 印出檔案清單，加上 <code>-al</code> 參數可以列出隱藏檔案 (-a) 並把清單詳細條列 (-l)。</li>
<li>cd：change directory 切換資料夾，<code>$ cd ..</code> 代表回到上一層，<code>$ cd ~</code> 代表回到 home 目錄 (使用者的專屬文件目錄)，<code>$ cd /</code> 代表回到根目錄 (存放電腦底層檔案)。</li>
<li>man：manual 可以叫出指令的使用手冊，例如 <code>$ man ls</code> 列出 ls 的使用方法。</li>
<li>touch：<code>$ touch &lt;fileName&gt;</code>，如果檔案不存在，則會建立一個新檔案；如果檔案存在，則會修改檔案時間。</li>
<li>rm：<code>$ rm &lt;fileName&gt;</code> 刪除檔案，<code>$ rm -r &lt;fileName&gt;</code> 刪除資料夾。</li>
<li>mkdir：<code>$ mkdir &lt;directoryName&gt;</code> 建立資料夾於當前目錄。</li>
<li>mv：<code>$ mv &lt;oldName&gt; &lt;newName&gt;</code> 改檔案名字，<code>$ mv &lt;oldName&gt; /opt/&lt;newName&gt;</code> 移動檔案到 /opt 路徑下並改檔名。</li>
<li>cp：<code>$ cp &lt;fileName&gt; /opt</code> 複製檔案到 /opt 目錄底下；　<code>$ cp &lt;directoryName&gt; -r /opt</code> 複製資料夾到 /opt 目錄底下。</li>
<li>cat：catenate，連結檔案、印出檔案內容到 ，<code>$ cat &lt;fileName&gt;</code>。</li>
<li>less：分頁式印出檔案，不同於 <code>cat</code> 一次會印出檔案會暫 console 很大版面不好閱讀，<code>$ less &lt;fileName&gt;</code>，按 ‵q‵ 可離開分頁式畫面。</li>
<li>echo：印出字串。</li>
<li>grep：可以抓取指定關鍵字，例如 <code>$ grep if hello.js</code>，把所有 hello.js 檔案中包含 if 的字印出來。</li>
<li>wget：下載檔案，例如 <code>$ wget &lt;URL&gt;</code></li>
<li>curl：送出request，可用於測試 API，例如 <code>$ curl &lt;api URL&gt;</code>，會回傳 reponse、<code>$ curl -I &lt;URL&gt;</code>，會列出 Header。</li>
<li><code>&gt;</code>：指重新導向，<code>$ ls -al &gt; result.txt</code>，將 ls -al 輸出的資料保存到 result.txt。</li>
<li><code>&gt;&gt;</code>：可以 append 到檔案結尾，<code>$ echo &quot;append to the end&quot; &gt;&gt; result.txt</code>。</li>
<li><code>|</code>：唸做 pipe，指的是前面的輸出為後面的輸入，例如 <code>$ cat hello.txt | grep h</code> 會印出 hello.txt 中有 h 的地方。</li>
<li>date：印出系統目前的時間。</li>
<li>top：table of process，印出所有 process，類似 Windows 的工作管理員。</li>
<li>nslookup：解析 domain name 以及 ip 位址的對應。<br>
<img src="https://imgur.com/CFwzOQy.png" alt=""></li>
<li>ping：丟封包到指定伺服器，檢測是否能連到該伺服器。<br>
<img src="https://imgur.com/HIg8vjr.png" alt=""></li>
<li>telnet：可以去檢測某伺服器的某個 port 是否正常服務，例如<code>$ telnet ptt.cc 23</code>。</li>
</ul>
<h3 id="二進位是什麼－電腦中的資料儲存與表示方法">二進位是什麼－電腦中的資料儲存與表示方法</h3>
<p>首先先來談什麼是進位，以十進位來說，代表單一位數裡面不會有<code>十</code>，一旦逢十就要進位。八進位代表單一位數不會有 <code>八</code>，所以 7 的下一位是 10，代表進位了。<br>
以數學角度來看的話，十進位就代表以十為基底，例如 <code>123 = 1*10^2 + 2*10^1 + 3*10^0</code><br>
若 123 為八進位的話，那就表示 <code>1*8^2 + 2*8^1 + 3*8^0</code> 等於十進位的83。</p>
<table><tr><td bgcolor=#FAFAFA>
<b>小知識</b></br>
在很多地方常常會看到色碼，例如 #FFFFFF 為白色、#000000 為黑色。這些數字是以 16 進位表示法。電腦裡面的三原色是 RGB 紅綠藍，每個顏色又細分為 256 個數值 (0~255)。例如黃色是紅色 255, 綠色 255, 藍色 0 組合而成，就可以表示成 #FFFF00
</td></tr></table>
<h3 id="電腦儲存單位">電腦儲存單位</h3>
<pre><code>- Bit 位元，資料儲存的最小單位，只能存 1 或 0
- Byte 位元組，byte = 8 bit 
- KB Kilobyte，1 KB = 1024 byte = 2^10 byte
- MB Magabyte，1 MB = 1024 KB
- GB Gigabyte，1 GB = 1024 MB 
- TB, PB, ZB, YB … 以此類推
</code></pre>
<p>基本上 PB 級以上的單位日常幾乎用不到，只應用在大數據領域，例如 Google 的 MapReduce 每個月要處理的資料量超過 400 PB、Facebook 註冊用戶超過十億，每天產生 300 TB 以上的資料…</p>
<h3 id="數字的儲存">數字的儲存</h3>
<p>電腦通常會用 32 bits 來存數字，也就是 4 bytes，每一個 bit 可以表示 0 或 1，32 個 bit 就會有 2^32 種情形，大約是 40 億左右。</p>
<h5 id="負數的表示方法">負數的表示方法</h5>
<p>最前面位數如果為 1 表示是負數，負數的二進位可以由該數的正數二進位的 0、1 顛倒最後加 1 來求得，這個表示法稱作<strong>二的補數</strong>。</p>
<p><img src="https://imgur.com/XnYJE1w.png" alt=""></p>
<p>如果數值超過可以表示範圍的話，會有溢位 overflow 的錯誤狀況發生，例如：</p>
<p><img src="https://imgur.com/YKNaFiC.png" alt=""></p>
<p>因為 112+64=176 &gt; 127 (用 8bit 存的可表示範圍 -128~127)</p>
<h5 id="電腦儲存小數的方法">電腦儲存小數的方法</h5>
<p><img src="https://imgur.com/wd9dXeR.png" alt=""></p>
<p>所以 10^-5 的 -5 會存在 exponent 的 11 bits 中，853 存在後面 mantissa 52 bits 中。</p>
<h3 id="網路基礎概論">網路基礎概論</h3>
<p>從你在瀏覽器輸入 <a href="http://google.com">google.com</a> 到畫面出來後，中間發生了什麼？</p>
<p>先解釋一些網路的基礎名詞：<br>
- IP：網路上透過 ip 位址來表示主機所在的位置，為網路 &amp; 電腦溝通的地址<br>
- Domain：域名，即為我們常用的網址例如 <a href="http://google.com">google.com</a>，比起 IP 可讀且好記<br>
- DNS：Domain Name System，負責把域名轉換成 IP。8.8.8.8 是 goolge 提通的免費 DNS 伺服器<br>
- Port：端口或是連接阜，伺服器上通常提供很多服務，服務就是用端口去區分的，例如 80 port 就是開給網頁 http 用的、443 給 https 用。<br>
- 前端：只使用者看得到的部分，包含顯示網頁內容的 HTML、負責網頁樣式排版的 CSS 以及負責使用者的操作行為 (如點擊按鈕之後會出現什麼) 的 JavaScript。<br>
- 後端：後端指的是背後運作的程序、資料交換或儲存，比如說在搜尋引擎點選搜尋的剎那，就會把關鍵字發送到網頁後端去，後端伺服器就會從資料庫撈資料，這個撈出來再回傳的動作，就是後端看不見的程式完成的。</p>
<p>回到段落一開始的問題—</p>
<p><img src="https://imgur.com/g2jU9vl.png" alt=""></p>
<p>以上就是基本網頁溝通的情境／流程。</p>
<h3 id="內網與外網">內網與外網</h3>
<p>一般來說，公司的網路都會形成一個「內部網路」，內部所使用的 IP 是虛擬 IP，只在內網裡面才看得到。但對外面的人來說，他們只看得到你們公司的唯一一個 IP 地址，這就是外網跟內網。</p>
<p><img src="https://imgur.com/S4xUVXn.png" alt=""></p>
<h3 id="VPN">VPN</h3>
<p>Virtual Private Network，有些內網服務為了提升安全性會鎖 IP，只開放內部私有 IP 存取，如果要從外部網路連進去，就需要透過 VPN 來翻牆。</p>
<h3 id="Session-Cookie-的概念">Session &amp; Cookie 的概念</h3>
<p>通常你在瀏覽網頁的時候(譬如購物網站)，當您登入後然後在各個子業面上做切換，為什麼切換時都能保持登入狀態？或是為什麼購物車的東西不會因為切換而不見？<br>
登入功能背後的原理－</p>
<p><img src="https://imgur.com/xgc2Q34.png" alt=""></p>
<p>登入之後，server 怎麼知道剛剛的 request 跟現在是同一個人?</p>
<h5 id="session">session</h5>
<p>可以把它想成識別證，server 會儲存 session ID 和與之對應的內容例如帳號。</p>
<h5 id="Cookie">Cookie</h5>
<p>是讓瀏覽器儲存資訊的地方，server 可以要求瀏覽器設置 cookie用於存放 session ID，之後的每個 request，瀏覽器都會把 Cookie 帶上來。<br>
總而言之，就是登入後會給你一張識別證，等下次再來的時候出示識別證就能知道你是誰了。<br>
所以加入 session &amp; cookie 的流程變成以下：<br>
<img src="https://imgur.com/U3g34OK.png" alt=""></p>
<h3 id="同樣的網頁載不同瀏覽器為什麼會跑版">同樣的網頁載不同瀏覽器為什麼會跑版?</h3>
<p>網頁的組成固定是由 HTML、CSS 以及 Javascript 組成的都只是一堆文字，而瀏覽器負責翻譯，不同瀏覽器有不同的標準，就會有不同的行為差異。</p>
<h3 id="資料庫概念">資料庫概念</h3>
<h4 id="SQL">SQL</h4>
<p>Structural Query Language，用來操作資料庫的語言，常見指令如下：</p>
<h6 id="查詢">查詢</h6>
<p><code>SELECT phone FROM users where name=Peter;</code>，從 users 資料表裡找到 name 是 Peter 的那列，並把 phone 這個欄位的值取出來。<br>
<code>SELECT * FROM users;</code>，取出 users 資料表的所有資料。</p>
<h6 id="刪除">刪除</h6>
<p><code>DELETE FROM users WHERE name=Peter;</code>，刪除 users 資料表中 name 是 Peter 的那列。</p>
<h6 id="更新">更新</h6>
<p><code>UPDATE users SET phone=123456 WHERE name=Peter;</code>，更新 users 裡面 name 是 Peter 的那列，把 phone 設為 123456。</p>
<h6 id="新增">新增</h6>
<p><code>INSERT INTO users(name,phone) VALUES (Alice, 789012)</code>，新增一筆紀錄，name 是 Alice，phone 是 789012。</p>
<h3 id="初級攻擊手段">初級攻擊手段</h3>
<h4 id="DOS-DDOS">DOS &amp; DDOS</h4>
<h5 id="DOS">DOS</h5>
<p>Denial of Service ，惡意不斷發 request，導致有限資源的伺服器要不段處理單一需求，進而沒辦法處理其他人需求，而出現錯誤或是連不上的情形</p>
<h5 id="DDOS">DDOS</h5>
<p>Distributed Denial of Service，從不同來源不段發出 request，以癱瘓服務，通常都是經由木馬植入被害人電腦，讓該電腦被操控去做攻擊</p>
<h4 id="一些盜帳號的方式">一些盜帳號的方式</h4>
<h5 id="木馬程式">木馬程式</h5>
<p>駭客可以透過被裝入木馬的電腦開一個後門，就可以從遠端連線到該電腦去做任何事，可以利用你當跳板去入侵網站，或是讓你成為 DDoS 攻擊的一員，也可以偷你電腦中的資料</p>
<h5 id="暴力破解">暴力破解</h5>
<p>嘗試所有可能的字母數字組合，或是使用一些常見的密碼組合去試（字典檔）。</p>
<h5 id="SQL-Injection">SQL Injection</h5>
<p>先來一個範例，上面提到資料庫的查詢語法 <code>SELECT</code>，如果今天駭客下的是 <code>SELECT * FROM users WHERE username=''or 1=1' AND password='123456'</code>；帳號的地方填入<code>'or 1=1</code>時，後面都會被省略，而 <code>or 1=1</code>保證是 true，所以一定會找到資料。<br>
所以 SQL Injection 代表攻擊者去鑽一些設計不良的程式的漏洞，透多特殊的文字變成程式去騙後端程式。</p>
<h5 id="XSS">XSS</h5>
<p>Cross Site Scripting，同樣是讓輸入變成程式的一部份，例如在網站中可以輸入文字的地方他寫了一段 Javascript 去擷取網站的 cookie，就有可能盜用你的身分去做事情。</p>
<p>SQL Injection 以及 XSS 兩種攻擊方式都是因為沒有處理好「使用者輸入」而造成非預期的程式執行。</p>
<h3 id="網站的密碼安全">網站的密碼安全</h3>
<p>一般網站針對密碼都不會真正的儲存明碼，而是雜湊過的密碼，使得駭客就算入侵網站取得資料庫，也不曉得較敏感的密碼資訊。</p>
<h5 id="雜湊函數">雜湊函數</h5>
<p>是一個單項的函數，雜湊後不可反推回去，輸入一樣保證輸出一樣，最有名的函數是 MD5。<br>
不可逆的原因是因為有無限的輸入但只有有限的輸出，所以造成可能有兩個不同的輸入有想同的輸出，代表產生碰撞。<br>
所以這就是為什麼通常忘記密碼只能重設，而無法告訴你原本的密碼。<br>
SHA256 是比 md5 更安全的函數，但要注意的是愈安全，加解密需要更多運算資源，速度就愈慢。</p>
<h5 id="加鹽-salting">加鹽 (salting)</h5>
<p>但如果僅僅是用 md5 的話，還是有可能可以用暴力破解法破解。此時使用加鹽，會自動幫使用者產生一段亂數，做雜湊時是對 (亂數+密碼) 做雜湊，可以確保就算暴力破解了也不會是正確的密碼。</p>
<h3 id="程式基礎概念">程式基礎概念</h3>
<h5 id="組合語言">組合語言</h5>
<p>低階語言，很接近電腦底層，一個指令只做一兩件事情，可以翻譯成機器語言。</p>
<h5 id="編譯器">編譯器</h5>
<p>把原始語言編譯 (Complie) 成目的語言，簡單來說就是個翻譯機。因為電腦只看得懂機器語言，所以寫 C 會有 C 的 Complier，寫 Java 會有 Java 的 Compiler，這些最終都會被翻成機器語言。</p>
<h5 id="逆向工程">逆向工程</h5>
<p>既然可以從程式碼變成機器看得懂的語言，當然就可以「逆向」回來 把機器碼變成看得懂的語言，這個就叫做逆向工程。<br>
逆向以後你甚至可以修改程式，把某些地方改成你想要的樣子 改完之後再重新翻譯回去，就變成破解版的程式了。<br>
從組合語言回推到機器語言的過程稱作<strong>反組譯</strong> Disassembly</p>
<h3 id="各式各樣的程式語言">各式各樣的程式語言</h3>
<p>每一種程式語言都有自己擅長的領域，功能、語法也都不太一樣。</p>
<ul>
<li>C：適合打基礎，了解電腦底層運作（記憶體、指標）。</li>
<li>C++：和 C 的差別在於語法以及多了物件導向的概念。</li>
<li>Java：編譯出來的程式碼跑在 Java 虛擬機上 (JVM)，達到跨平台的特色，寫 Android 必學語言。</li>
<li>Javascript：跟 Java 沒關係，原本只能跑在瀏覽器，後來可以在瀏覽器以外的地方執行。</li>
<li>Python：可以做資料分析、網頁、小工具，資源多且語法簡單，適合初學者。</li>
</ul>
<h3 id="演算法是什麼">演算法是什麼</h3>
<p>演算法就是解決問題的方法，意即當有問題輸入，透過演算法，會得到結果輸出。<br>
可以用時間複雜度與空間複雜度去比較演算法的優劣。</p>
<ul>
<li>時間複雜度：一個演算法平均需要多少時間來完成。詳細可以參考<a href="https://medium.com/appworks-school/%E5%88%9D%E5%AD%B8%E8%80%85%E5%AD%B8%E6%BC%94%E7%AE%97%E6%B3%95-%E5%BE%9E%E6%99%82%E9%96%93%E8%A4%87%E9%9B%9C%E5%BA%A6%E8%AA%8D%E8%AD%98%E5%B8%B8%E8%A6%8B%E6%BC%94%E7%AE%97%E6%B3%95-%E4%B8%80-b46fece65ba5">文章</a></li>
</ul>
<p><img src="https://imgur.com/2zF1BAn.jpg" alt=""><br>
當資料筆數愈大，所需要的時間的關係。</p>
<ul>
<li>空間複雜度：一個演算法平均需要多少空間來完成。</li>
</ul>
<h5 id="時間換取空間；空間換取時間">時間換取空間；空間換取時間</h5>
<p>有時候可以改變演算法，衡量要速度慢但不會消耗太多記憶體，還是速度快，但消耗記憶體。例如：從 n 個數字裡找目標數字，共有 m 次查詢。</p>
<ul>
<li>時間換空間：m 次查詢，每次都要從頭找 n 次，O(N*M)。</li>
<li>空間換時間：第一次查 n 次，便紀錄在一張表所有數字出現的次數，往後查詢就只要查一次，O(N+M)。</li>
</ul>
<h5 id="二分搜尋法">二分搜尋法</h5>
<p>藉由排序後的特性，一直不斷的往中間切，將搜尋範圍不斷縮小而不用從頭到尾搜尋，更有效率。</p>
<h3 id="排序的演算法">排序的演算法</h3>
<h5 id="選擇排序法">選擇排序法</h5>
<p>Selection Sort，從還沒排序的數列裡找最小的，然後移到最左邊。</p>
<p><img src="https://imgur.com/spa80Vk.png" alt=""><br>
[1]</p>
<h5 id="泡沫排序法">泡沫排序法</h5>
<p>Bubble Sort，左到右兩兩比較，把比較大的數字往右邊移 (浮上來)。</p>
<p><img src="https://imgur.com/u8VaYqo.png" alt=""></p>
<h5 id="插入排序法">插入排序法</h5>
<p>Insertion Sort，類似完撲克牌時排序的方法，從左邊開始把每一張牌都放到正確位置。</p>
<p><img src="https://imgur.com/wbN9CNv.png" alt=""></p>
<h5 id="合併排序法">合併排序法</h5>
<p>Merge Sort，把一個數列切成左右兩半，個別排序後再合併起來。</p>
<p><img src="https://imgur.com/59Ar0uV.gif" alt=""></p>
<h5 id="快速排序法">快速排序法</h5>
<p>Quick Sort，挑選一個基準點 (pivot)，讓左邊的數字都小於它，右邊的數字都大於它，然後對左右兩邊重複此操作。</p>
<p><img src="https://imgur.com/m1QYSbu.gif" alt=""></p>
<p>合併排序及快速排序都是把大問題切割成小問題</p>
<h3 id="前端工程師-後端工程師做什麼">前端工程師 &amp; 後端工程師做什麼</h3>
<p><img src="https://imgur.com/fu9Oyrf.png" alt=""></p>
<p>就如同前面講的，網頁由 HTML, CSS, Javascript 組成，前端工程師要做的就是寫出這三支程式，主要跟網頁呈現有關。<br>
<img src="https://imgur.com/yo3AeXA.png" alt=""></p>
<p>而後端工程師負責處理後端的業務流程，比如說判斷使用者帳號密碼、去資料庫撈資料…等等，所以除了要懂主機跟寫應用程式外還需要了解資料庫。<br>
<img src="https://imgur.com/kI0DgWc.png" alt=""></p>
<h3 id="應用程式開發">應用程式開發</h3>
<h4 id="IDE">IDE</h4>
<p>整合式開發環境 Integrated Development Environment，拿 Android Studio 為例，把所有開發應用程式要用的功能整合起來了。</p>
<p><img src="https://imgur.com/8VTXtAY.png" alt=""></p>
<h3 id="API">API</h3>
<p>應用程式介面 Application Programming Interface，前端工程師要接後端的功能，要用 API 串接，要請後端工程師開一個功能串口。直接舉例比較清楚，以 Google 帳號登入的 api 為例，就是 Goole 提供了其他開發者這個<code>登入的功能</code>的 <code>api</code><br>
去實做到他們的應用程式裡。</p>
<h3 id="基礎的程式概念">基礎的程式概念</h3>
<ul>
<li>條件判斷 Conditional，用在需要判斷抉擇的時候。</li>
<li>迴圈 Loop，重複做一樣的事情，通常有中止條件，否則就會變無窮迴圈，無窮迴圈會一直跑直到消耗完記憶體容量為止。</li>
<li>變數 Variable，用來儲存資訊。</li>
<li>函式 Function，把程序中重複性高的地方切開成許多獨立的小程序。</li>
</ul>
<h3 id="Source">Source</h3>
<p>[1] <a href="https://visualgo.net/en/sorting">https://visualgo.net/en/sorting</a><br>
[All] 此篇文章 Lidemy CS101 的筆記，內容及圖片大部分取自上課影片</p>
]]></content>
      <categories>
        <category>程式初心者</category>
      </categories>
      <tags>
        <tag>前端後端基礎</tag>
        <tag>計算機概論</tag>
        <tag>cookie</tag>
        <tag>session</tag>
      </tags>
  </entry>
</search>
